{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs \u00b6 For full documentation visit mkdocs.org . Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout \u00b6 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. print(\"Hello, world!\")","title":"Index"},{"location":"#welcome_to_mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project_layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. print(\"Hello, world!\")","title":"Project layout"},{"location":"test-page/","text":"displaybuf \u00b6 FrameBuffer wrapper for using framebuf based GUIs with displaysys. Works with MicroPython Nano-GUI, Micro-GUI and MicroPython-Touch from Peter Hinch, but may also be used without them. Usage 'color_setup.py' from displaybuf import DisplayBuffer as SSD from board_config import display_drv format = SSD.RGB565 # or .GS8 or .GS4_HMSB ssd = SSD(display_drv, format) 'main.py' from color_setup import ssd Classes \u00b6 DisplayBuffer \u00b6 DisplayBuffer: A class to wrap an displaysys driver and provide a framebuf compatible interface to it. It provides a show() method to copy the framebuf to the display. The show() method is optimized for the format. The format must be one of the following: DisplayBuffer.RGB565 DisplayBuffer.GS8 DisplayBuffer.GS4_HMSB Functions \u00b6 color staticmethod \u00b6 color ( r , g , b , idx = None ) Get an RGB565 or RGB332 value for a color and optionally register it in the display's LUT. This is a convenience function for using this framework WITHOUT Nano-GUI or Micro-GUI. Those packages have their own methods of registering colors. Parameters: r ( int ) \u2013 Red component (0-255) g ( int ) \u2013 Green component (0-255) b ( int ) \u2013 Blue component (0-255) idx ( int , default: None ) \u2013 Optional index to register the color in the display's LUT (0-15); ignored if the display doesn't use a LUT in its current format Raises: ValueError \u2013 If 16 colors have already been registered or if the index is out of range Returns: int \u2013 RGB565 color value in RG565 format; RGB332 color value in GS8 format; the index of the registered color in the LUT in GS4_HMSB format displaysys \u00b6 A collection of classes and functions for working with displays and input devices in *Python. The goal is to provide a common API for working with displays and input devices across different platforms including MicroPython, CircuitPython and CPython. It works on microcontrollers, desktops, web browsers and Jupyter notebooks. Classes \u00b6 DisplayDriver \u00b6 Attributes \u00b6 bfa property \u00b6 bfa The bottom fixed area set by set_vscroll or vscrdef. Returns: int \u2013 The bottom fixed area. bfa_area property \u00b6 bfa_area The bottom fixed area as an Area object. Returns: tuple \u2013 The bottom fixed area. brightness property writable \u00b6 brightness The brightness of the display. height property \u00b6 height The height of the display in pixels. power property writable \u00b6 power The power state of the display. requires_byteswap property \u00b6 requires_byteswap Whether the display requires byte swapping. rotation property writable \u00b6 rotation The rotation of the display. tfa property \u00b6 tfa The top fixed area set by set_vscroll or vscrdef. Returns: int \u2013 The top fixed area. tfa_area property \u00b6 tfa_area The top fixed area as an Area object. Returns: tuple \u2013 The top fixed area. touch_device property writable \u00b6 touch_device The touch device. vsa property \u00b6 vsa The vertical scroll area set by set_vscroll or vscrdef. Returns: int \u2013 The vertical scroll area. vsa_area property \u00b6 vsa_area The vertical scroll area as an Area object. Returns: tuple \u2013 The vertical scroll area. vscroll property writable \u00b6 vscroll The vertical scroll position relative to the top fixed area. Returns: int \u2013 The vertical scroll position. width property \u00b6 width The width of the display in pixels. Functions \u00b6 blit_transparent \u00b6 blit_transparent ( buf , x , y , w , h , key ) Blit a buffer with transparency. Parameters: buf ( memoryview ) \u2013 The buffer to blit. x ( int ) \u2013 The x coordinate to blit to. y ( int ) \u2013 The y coordinate to blit to. w ( int ) \u2013 The width to blit. h ( int ) \u2013 The height to blit. key ( int ) \u2013 The color key to use for transparency. Returns: tuple \u2013 The x, y, w, h coordinates of the blitted area. deinit \u00b6 deinit () Deinitialize the display. disable_auto_byteswap \u00b6 disable_auto_byteswap ( value ) Disable byte swapping in the display driver. If self.requires_byteswap and the guest application is capable of byte swapping color data check to see if byte swapping can be disabled. If so, disable it. Usage # If byte swapping is required and the display driver is capable of having byte swapping disabled, # disable it and set a flag so we can swap the color bytes as they are created. if display_drv.requires_byteswap: needs_swap = display_drv.disable_auto_byteswap(True) else: needs_swap = False Parameters: value ( bool ) \u2013 Whether to disable byte swapping. Returns: bool \u2013 Whether byte swapping was disabled successfully. fill \u00b6 fill ( color ) Fill the display with a color. Parameters: color ( int ) \u2013 The color to fill the display with. hard_reset \u00b6 hard_reset () Perform a hardware reset of the display. Should be overridden by the subclass. invert_colors \u00b6 invert_colors ( value ) Invert the colors of the display. Should be overridden by the subclass. Parameters: value ( bool ) \u2013 True to invert the colors, False to restore the colors. reset \u00b6 reset () Perform a reset of the display. Should be overridden by the subclass. scroll \u00b6 scroll ( dx , dy ) Scroll the display. Parameters: dx ( int ) \u2013 The number of pixels to scroll horizontally. dy ( int ) \u2013 The number of pixels to scroll vertically. set_vscroll \u00b6 set_vscroll ( tfa = 0 , bfa = 0 ) Set the vertical scroll definition and move the vertical scroll to the top. Parameters: tfa ( int , default: 0 ) \u2013 The top fixed area. bfa ( int , default: 0 ) \u2013 The bottom fixed area. show \u00b6 show ( * args , ** kwargs ) Show the display. Base class method does nothing. May be overridden by subclasses. sleep_mode \u00b6 sleep_mode ( value ) Set the sleep mode of the display. Should be overridden by the subclass. Parameters: value ( bool ) \u2013 True to enter sleep mode, False to exit sleep mode. soft_reset \u00b6 soft_reset () Perform a software reset of the display. Should be overridden by the subclass. translate_point \u00b6 translate_point ( point ) Translate a point from real coordinates to scrolled coordinates. Useful for touch events. Parameters: point ( tuple ) \u2013 The x and y coordinates to translate. Returns: tuple \u2013 The translated x and y coordinates. vscrdef \u00b6 vscrdef ( tfa , vsa , bfa ) Set the vertical scroll definition. Should be overridden by the subclass and called as super().vscrdef(tfa, vsa, bfa). Parameters: tfa ( int ) \u2013 The top fixed area. vsa ( int ) \u2013 The vertical scroll area. bfa ( int ) \u2013 The bottom fixed area. vscsad \u00b6 vscsad ( vssa = None ) Set or get the vertical scroll start address. Should be overridden by the subclass and called as super().vscsad(y). Parameters: vssa ( int , default: None ) \u2013 The vertical scroll start address. Returns: int \u2013 The vertical scroll start address. Functions \u00b6 alloc_buffer \u00b6 alloc_buffer ( size ) Create a new buffer of the specified size. In the future, this function may be modified to use port-specific memory allocation such as ESP32's heap_caps_malloc. Parameters: size ( int ) \u2013 The size of the buffer to create. Returns: memoryview \u2013 The new buffer. color565 \u00b6 color565 ( r , g = None , b = None ) Convert RGB values to a 16-bit color value. Parameters: r ( ( int , tuple or list ) ) \u2013 The red value or a tuple or list of RGB values. g ( int , default: None ) \u2013 The green value. b ( int , default: None ) \u2013 The blue value. Returns: int \u2013 The 16-bit color value color888 \u00b6 color888 ( r , g , b ) Convert RGB values to a 24-bit color value. Parameters: r ( int ) \u2013 The red value. g ( int ) \u2013 The green value. b ( int ) \u2013 The blue value. Returns: int \u2013 The 24-bit color value. color_rgb \u00b6 color_rgb ( color ) color can be an 16-bit integer or a tuple, list or bytearray of length 2 or 3. eventsys \u00b6 An Event System including event types and device types for *Python. Classes \u00b6 events \u00b6 A container for event types and classes. Similar to a C enum and struct. Functions \u00b6 custom_type \u00b6 custom_type ( types = {}, classes = {}) Create new event types and classes for the events class. For example, to recreate the events for the keypad device: import eventsys types = [(\"KEYDOWN\", 0x300), (\"KEYUP\", 0x301)] classes = {\"Key\": \"type name key mod scancode window\"} eventsys.custom_type(types, classes) # Optionally update the filter events.filter += [events.KEYDOWN, events.KEYUP] Parameters: types ( dict [ str , int ] , default: {} ) \u2013 Dictionary of event types and values. classes ( dict [ str , str ] , default: {} ) \u2013 Dictionary of event classes and fields. graphics \u00b6 Graphics library extending MicroPython's framebuf module. Classes \u00b6 Area \u00b6 Represents a rectangular area defined by its position and dimensions. Attributes: x ( int | float ) \u2013 The x-coordinate of the top-left corner of the area. y ( int | float ) \u2013 The y-coordinate of the top-left corner of the area. w ( int | float ) \u2013 The width of the area. h ( int | float ) \u2013 The height of the area. Methods: Name Description contains Checks if the specified point is contained within the area. contains_area Checks if the specified area is contained within the area. intersects Checks if the current Area object intersects with another Area object. touches_or_intersects Checks if the current Area object touches or intersects with another Area object. shift Returns a new Area shifted by the specified amount in the x and y directions. clip Clips the current Area object to the specified Area object. Special Methods eq (other): Checks if the current Area object is equal to another Area object. ne (other): Checks if the current Area object is not equal to another Area object. add (other): Computes the union of the current Area object and another Area object. iter (): Returns an iterator over the elements of the Area object. repr (): Returns a string representation of the Area object. str (): Returns a string representation of the Area object. Functions \u00b6 __add__ \u00b6 __add__ ( other ) Computes the union of the current Area object and another Area object. Parameters: other ( Area ) \u2013 The other Area object to compute the union with. Returns: Area \u2013 A new Area object representing the union of the two areas. __eq__ \u00b6 __eq__ ( other ) Checks if the current Area object is equal to another Area object. Parameters: other ( Area ) \u2013 The other Area object to compare with. Returns: bool \u2013 True if the two Area objects are equal, False otherwise. __init__ \u00b6 __init__ ( x , y = None , w = None , h = None ) Initializes a new instance of the Area class. Parameters: x ( int | float | tuple ) \u2013 The x-coordinate of the top-left corner of the area or a tuple containing the x, y, w, and h coordinates of the area. y ( int | float , default: None ) \u2013 The y-coordinate of the top-left corner of the area. w ( int | float , default: None ) \u2013 The width of the area. h ( int | float , default: None ) \u2013 The height of the area. __iter__ \u00b6 __iter__ () Returns an iterator over the elements of the Area object. Returns: iterator \u2013 An iterator over the elements of the Area object. __ne__ \u00b6 __ne__ ( other ) Checks if the current Area object is not equal to another Area object. Parameters: other ( Area ) \u2013 The other Area object to compare with. Returns: bool \u2013 True if the two Area objects are not equal, False otherwise. __repr__ \u00b6 __repr__ () Returns a string representation of the Area object. Returns: str \u2013 A string representation of the Area object. __str__ \u00b6 __str__ () Returns a string representation of the Area object. Returns: str \u2013 A string representation of the Area object. clip \u00b6 clip ( other ) Clips the current Area object to the specified Area object. Parameters: other ( Area ) \u2013 The other Area object to clip to. Returns: Area \u2013 A new Area object representing the clipped area. contains \u00b6 contains ( x , y = None ) Checks if the specified point is contained within the area. Parameters: x ( int | tuple ) \u2013 The x-coordinate of the point to check or a tuple containing the x and y coordinates of the point. y ( int , default: None ) \u2013 The y-coordinate of the point to check. Returns: bool \u2013 True if the point is contained within the area, False otherwise. contains_area \u00b6 contains_area ( other ) Checks if the specified area is contained within the area. Parameters: other ( Area ) \u2013 The other area to check. Returns: bool \u2013 True if the other area is contained within the area, False otherwise. inset \u00b6 inset ( d1 , d2 = None , d3 = None , d4 = None ) Returns a new Area inset by the specified amount(s). If only one argument is provided, it is used as the inset in all 4 directions. If two arguments are provided, the first is used as the inset in the x direction and the second as the inset in the y direction. If three arguments are provided, they are used as the insets in the left, top/bottom, and right directions, respectively. If four arguments are provided, they are used as the insets in the left, top, right, and bottom directions, respectively. Parameters: d1 ( int | float ) \u2013 The inset in the x direction or the inset in all 4 directions. d2 ( int | float , default: None ) \u2013 The inset in the y direction or the inset in the top/bottom direction. d3 ( int | float , default: None ) \u2013 The inset in the right direction. d4 ( int | float , default: None ) \u2013 The inset in the bottom direction. Returns: Area \u2013 A new Area object inset by the specified amount(s). intersects \u00b6 intersects ( other ) Checks if the current Area object intersects with another Area object. Parameters: other ( Area ) \u2013 The other Area object to check for overlap. Returns: bool \u2013 True if the two Area objects intersect, False otherwise. offset \u00b6 offset ( d1 , d2 = None , d3 = None , d4 = None ) Returns a new Area offset by the specified amount(s). If only one argument is provided, it is used as the offset in all 4 directions. If two arguments are provided, the first is used as the offset in the x direction and the second as the offset in the y direction. If three arguments are provided, they are used as the offsets in the left, top/bottom, and right directions, respectively. If four arguments are provided, they are used as the offsets in the left, top, right, and bottom directions, respectively. Parameters: d1 ( int | float ) \u2013 The offset in the x direction or the offset in all 4 directions. d2 ( int | float , default: None ) \u2013 The offset in the y direction or the offset in the top/bottom direction. d3 ( int | float , default: None ) \u2013 The offset in the right direction. d4 ( int | float , default: None ) \u2013 The offset in the bottom direction. Returns: Area \u2013 A new Area object offset by the specified amount(s). shift \u00b6 shift ( dx = 0 , dy = 0 ) Returns a new Area shifted by the specified amount in the x and y directions. Parameters: dx ( int | float , default: 0 ) \u2013 The amount to shift the area in the x direction. dy ( int | float , default: 0 ) \u2013 The amount to shift the area in the y direction. Returns: Area \u2013 A new Area object shift by the specified amount in the x and y directions. touches_or_intersects \u00b6 touches_or_intersects ( other ) Checks if the current Area object touches or intersects with another Area object. Parameters: other ( Area ) \u2013 The other Area object to check for overlap or touch. Returns: bool \u2013 True if the two Area objects touch or intersect, False otherwise. Draw \u00b6 A Draw class to draw shapes onto a specified canvas. Parameters: canvas ( Canvas ) \u2013 The canvas to draw on. Usage: # canvas is an instance of DisplayDriver, FrameBuffer, or other canvas-like object draw = Draw(canvas) draw.fill(0x0000) draw.rect(10, 10, 100, 100, 0xFFFF) Font \u00b6 A class to read binary fonts like those found at https://github.com/spacerace/romfont and draw text to a canvas. Parameters: font_data ( str | byterray , default: None ) \u2013 The path to the font .bin file or memoryview. Default is None. height ( int , default: None ) \u2013 The height of the font. Default is None. cached ( bool , default: True ) \u2013 If True, the font file will be read into memory on init. If False, the font file will be read from disk each time it is needed. Attributes \u00b6 height property \u00b6 height Return the height of the font in pixels. width property \u00b6 width Return the width of the font in pixels. Functions \u00b6 __enter__ \u00b6 __enter__ () Initialize/open the font file __exit__ \u00b6 __exit__ ( exception_type , exception_value , traceback ) cleanup on exit deinit \u00b6 deinit () Close the font file as cleanup. draw_char \u00b6 draw_char ( char , x , y , canvas , color , scale = 1 , inverted = False ) Draw one character at position (x,y). Parameters: char ( str ) \u2013 The character to draw. x ( int ) \u2013 The x position to draw the character. y ( int ) \u2013 The y position to draw the character. canvas ( Canvas ) \u2013 The DisplayDriver, FrameBuffer, or other canvas-like object to draw on. color ( int ) \u2013 The color to draw the character in. scale ( int , default: 1 ) \u2013 The scale factor to draw the character at. Default is 1. inverted ( bool , default: False ) \u2013 If True, draw the character inverted. Default is False. Returns: Area \u2013 The area that was drawn to. export \u00b6 export ( filename ) Export the font data in self._cache to a .py file that can be imported. The format is a single bytes object named _FONT. There are 256 lines, one for each character. The last line is FONT = memoryview(_FONT) . Parameters: filename ( str ) \u2013 The path to save the file to. text \u00b6 text ( canvas , string , x , y , color , scale = 1 , inverted = False ) Draw text to the canvas. Parameters: canvas ( Canvas ) \u2013 The DisplayDriver, FrameBuffer, or other canvas-like object to draw on. string ( str ) \u2013 The text to draw. x ( int ) \u2013 The x position to start drawing the text. y ( int ) \u2013 The y position to start drawing the text. color ( int ) \u2013 The color to draw the text in. scale ( int , default: 1 ) \u2013 The scale factor to draw the text at. Default is 1. inverted ( bool , default: False ) \u2013 If True, draw the text inverted. Default is False. Returns: Area \u2013 The area that was drawn to. text_width \u00b6 text_width ( text , scale = 1 ) Return the pixel width of the specified text message. Takes into account the scale factor, but not any newlines. Parameters: text ( str ) \u2013 The text to measure. scale ( int , default: 1 ) \u2013 The scale factor to measure the text at. Default is 1. FrameBuffer \u00b6 An extension of MicroPython's framebuf.FrameBuffer that adds some useful methods for drawing shapes and text. Each method returns a bounding box (x, y, w, h) of the drawn shape to indicate the area of the display that was modified. This can be used to update only the modified area of the display. Exposes attributes not exposed in the base class, such as color_depth, width, height, buffer, and format. Also adds a save method to save the framebuffer to a file, and a from_file method to load a framebuffer from a file. Inherits from frambuf.Framebuffer, which may be compiled into MicroPython or may be from _framebuf.py. Methods should return an Area object, but the MicroPython framebuf module returns None, so the methods inherited from framebuf.FrameBuffer are overridden to return an Area object. Parameters: buffer ( bytearray ) \u2013 Framebuffer buffer width ( int ) \u2013 Width in pixels height ( int ) \u2013 Height in pixels format ( int ) \u2013 Framebuffer format Attributes: buffer ( bytearray ) \u2013 Framebuffer buffer width ( int ) \u2013 Width in pixels height ( int ) \u2013 Height in pixels format ( int ) \u2013 Framebuffer format color_depth ( int ) \u2013 Color depth Functions \u00b6 arc \u00b6 arc ( * args , ** kwargs ) Arc drawing function. Will draw a single pixel wide arc with a radius r centered at x, y from a0 to a1. Parameters: x ( int ) \u2013 X-coordinate of the arc's center. y ( int ) \u2013 Y-coordinate of the arc's center. r ( int ) \u2013 Radius of the arc. a0 ( float ) \u2013 Starting angle in degrees. a1 ( float ) \u2013 Ending angle in degrees. c ( int ) \u2013 color. Returns: Area \u2013 The bounding box of the arc. blit \u00b6 blit ( buf , x , y , key =- 1 , palette = None ) Blit the given buffer at the given location. Parameters: buf ( FrameBuffer ) \u2013 FrameBuffer to blit x ( int ) \u2013 x coordinate y ( int ) \u2013 y coordinate key ( int , default: -1 ) \u2013 Color key (default: -1) palette ( list , default: None ) \u2013 Palette (default: None) Returns: Area \u2013 Bounding box of the blitted buffer blit_rect \u00b6 blit_rect ( buf , x , y , w , h ) Blit a rectangular area from a buffer to the canvas. Uses the canvas's blit_rect method if available, otherwise writes directly to the buffer. Parameters: buf ( memoryview ) \u2013 Buffer to blit. Must already be byte-swapped if necessary. x ( int ) \u2013 X-coordinate to blit to. y ( int ) \u2013 Y-coordinate to blit to. w ( int ) \u2013 Width of the area to blit. h ( int ) \u2013 Height of the area to blit. Returns: Area \u2013 The bounding box of the blitted area. blit_transparent \u00b6 blit_transparent ( * args , ** kwargs ) Blit a buffer with transparency. Parameters: buf ( memoryview ) \u2013 Buffer to blit. x ( int ) \u2013 X-coordinate to blit to. y ( int ) \u2013 Y-coordinate to blit to. w ( int ) \u2013 Width of the area to blit. h ( int ) \u2013 Height of the area to blit. key ( int ) \u2013 Key value for transparency. Returns: Area \u2013 The bounding box of the blitted area. circle \u00b6 circle ( * args , ** kwargs ) Circle drawing function. Will draw a single pixel wide circle centered at x0, y0 and the specified r. Parameters: x0 ( int ) \u2013 Center x coordinate y0 ( int ) \u2013 Center y coordinate r ( int ) \u2013 Radius c ( int ) \u2013 Color f ( bool ) \u2013 Fill the circle (default: False) Returns: Area \u2013 The bounding box of the circle. ellipse \u00b6 ellipse ( x , y , rx , ry , c , f = False , m = 15 ) Draw an ellipse at the given location, radii and color. Parameters: x ( int ) \u2013 Center x coordinate y ( int ) \u2013 Center y coordinate rx ( int ) \u2013 X radius ry ( int ) \u2013 Y radius c ( int ) \u2013 color f ( bool , default: False ) \u2013 Fill the ellipse (default: False) m ( int , default: 15 ) \u2013 Bitmask to determine which quadrants to draw (default: 0b1111) Returns: Area \u2013 Bounding box of the ellipse fill \u00b6 fill ( c ) Fill the buffer with the given color. Parameters: c ( int ) \u2013 color Returns: Area \u2013 Bounding box of the filled buffer fill_rect \u00b6 fill_rect ( x , y , w , h , c ) Fill the given rectangle with the given color. Parameters: x ( int ) \u2013 x coordinate y ( int ) \u2013 y coordinate w ( int ) \u2013 Width in pixels h ( int ) \u2013 Height in pixels c ( int ) \u2013 color Returns: Area \u2013 Bounding box of the filled rectangle from_file staticmethod \u00b6 from_file ( filename ) Load a framebuffer from a file. Parameters: filename ( str ) \u2013 Filename to load from gradient_rect \u00b6 gradient_rect ( * args , ** kwargs ) Fill a rectangle with a gradient. Parameters: x ( int ) \u2013 X-coordinate of the top-left corner of the rectangle. y ( int ) \u2013 Y-coordinate of the top-left corner of the rectangle. w ( int ) \u2013 Width of the rectangle. h ( int ) \u2013 Height of the rectangle. c1 ( int ) \u2013 565 encoded color for the top or left edge. c2 ( int ) \u2013 565 encoded color for the bottom or right edge. If None or the same as c1, fill_rect will be called instead. vertical ( bool ) \u2013 If True, the gradient will be vertical. If False, the gradient will be horizontal. Returns: Area \u2013 The bounding box of the filled area. hline \u00b6 hline ( x , y , w , c ) Draw a horizontal line at the given location, width and color. Parameters: x ( int ) \u2013 x coordinate y ( int ) \u2013 y coordinate w ( int ) \u2013 Width in pixels c ( int ) \u2013 color Returns: Area \u2013 Bounding box of the horizontal line line \u00b6 line ( x1 , y1 , x2 , y2 , c ) Draw a line between the given start and end points and color. Parameters: x1 ( int ) \u2013 Start x coordinate y1 ( int ) \u2013 Start y coordinate x2 ( int ) \u2013 End x coordinate y2 ( int ) \u2013 End y coordinate c ( int ) \u2013 color Returns: Area \u2013 Bounding box of the line pixel \u00b6 pixel ( x , y , c = None ) Draw a single pixel at the given location and color. Parameters: x ( int ) \u2013 x coordinate y ( int ) \u2013 y coordinate c ( int , default: None ) \u2013 color (default: None) Returns: Area \u2013 Bounding box of the pixel poly \u00b6 poly ( x , y , coords , c , f = False ) Draw a polygon at the given location, coordinates and color. Parameters: x ( int ) \u2013 x coordinate y ( int ) \u2013 y coordinate coords ( array ) \u2013 Array of x, y coordinate tuples c ( int ) \u2013 color f ( bool , default: False ) \u2013 Fill the polygon (default: False) Returns: Area \u2013 Bounding box of the polygon polygon \u00b6 polygon ( * args , ** kwargs ) Draw a polygon on the canvas. Parameters: points ( list ) \u2013 List of points to draw. x ( int ) \u2013 X-coordinate of the polygon's position. y ( int ) \u2013 Y-coordinate of the polygon's position. color ( int ) \u2013 color. angle ( float ) \u2013 Rotation angle in radians (default: 0). center_x ( int ) \u2013 X-coordinate of the rotation center (default: 0). center_y ( int ) \u2013 Y-coordinate of the rotation center (default: 0). Raises: ValueError \u2013 If the polygon has less than 3 points. Returns: Area \u2013 The bounding box of the polygon. rect \u00b6 rect ( x , y , w , h , c , f = False ) Draw a rectangle at the given location, size and color. Parameters: x ( int ) \u2013 Top left corner x coordinate y ( int ) \u2013 Top left corner y coordinate w ( int ) \u2013 Width in pixels h ( int ) \u2013 Height in pixels c ( int ) \u2013 color f ( bool , default: False ) \u2013 Fill the rectangle (default: False) Returns: Area \u2013 Bounding box of the rectangle round_rect \u00b6 round_rect ( * args , ** kwargs ) Rounded rectangle drawing function. Will draw a single pixel wide rounded rectangle starting at x0, y0 and extending w, h pixels with the specified radius. Parameters: x0 ( int ) \u2013 X-coordinate of the top-left corner of the rectangle. y0 ( int ) \u2013 Y-coordinate of the top-left corner of the rectangle. w ( int ) \u2013 Width of the rectangle. h ( int ) \u2013 Height of the rectangle. r ( int ) \u2013 Radius of the corners. c ( int ) \u2013 color. f ( bool ) \u2013 Fill the rectangle (default: False). Returns: Area \u2013 The bounding box of the rectangle. save \u00b6 save ( filename = None ) Save the framebuffer to a file. The file extension must match the format, otherwise the extension will be appended to the filename. Saves 1-bit formats as PBM, 2-bit formats as PGM with max value 3, 4-bit formats as PGM with max value 15, 8-bit formats as PGM with max value 255, and 16-bit formats as BMP. Parameters: filename ( str , default: None ) \u2013 Filename to save to scroll \u00b6 scroll ( xstep , ystep ) Shift the contents of the FrameBuffer by the given vector (xstep, ystep). This may leave a footprint of the previous colors in the FrameBuffer. Parameters: xstep ( int ) \u2013 The number of pixels to shift the FrameBuffer in the x direction. ystep ( int ) \u2013 The number of pixels to shift the FrameBuffer in the y direction. Raises: ValueError \u2013 If the FrameBuffer format depth is not a multiple of 8 text \u00b6 text ( s , x , y , c = 1 , scale = 1 , inverted = False , font_data = None , height = 8 , ) Draw text at the given location, using the given font and color. Parameters: s ( str ) \u2013 Text to draw x ( int ) \u2013 x coordinate y ( int ) \u2013 y coordinate c ( int , default: 1 ) \u2013 color scale ( int , default: 1 ) \u2013 Scale factor (default: 1) inverted ( bool , default: False ) \u2013 Invert the text (default: False) font_data ( str , default: None ) \u2013 Path to the font file (default: None) height ( int , default: 8 ) \u2013 Height of the font (default: 8) Returns: Area \u2013 Bounding box of the text text14 \u00b6 text14 ( * args , ** kwargs ) Place text on the canvas with a 14 pixel high font. Breaks on to next line. Does not break on line going off canvas. Args: canvas (Canvas): The DisplayDriver, FrameBuffer, or other canvas-like object to draw on. s (str): The text to draw. x (int): The x position to start drawing the text. y (int): The y position to start drawing the text. c (int): The color to draw the text in. Default is 1. scale (int): The scale factor to draw the text at. Default is 1. inverted (bool): If True, draw the text inverted. Default is False. font_data (str): The path to the font file to use. Default is None. Returns: Area: The area that was drawn to. text16 \u00b6 text16 ( * args , ** kwargs ) Place text on the canvas with a 16 pixel high font. Breaks on to next line. Does not break on line going off canvas. Args: canvas (Canvas): The DisplayDriver, FrameBuffer, or other canvas-like object to draw on. s (str): The text to draw. x (int): The x position to start drawing the text. y (int): The y position to start drawing the text. c (int): The color to draw the text in. Default is 1. scale (int): The scale factor to draw the text at. Default is 1. inverted (bool): If True, draw the text inverted. Default is False. font_data (str): The path to the font file to use. Default is None. Returns: Area: The area that was drawn to. text8 \u00b6 text8 ( * args , ** kwargs ) Place text on the canvas with an 8 pixel high font. Breaks on to next line. Does not break on line going off canvas. Args: canvas (Canvas): The DisplayDriver, FrameBuffer, or other canvas-like object to draw on. s (str): The text to draw. x (int): The x position to start drawing the text. y (int): The y position to start drawing the text. c (int): The color to draw the text in. Default is 1. scale (int): The scale factor to draw the text at. Default is 1. inverted (bool): If True, draw the text inverted. Default is False. font_data (str): The path to the font file to use. Default is None. Returns: Area: The area that was drawn to. triangle \u00b6 triangle ( * args , ** kwargs ) Triangle drawing function. Draws a single pixel wide triangle with vertices at (x0, y0), (x1, y1), and (x2, y2). Parameters: x0 ( int ) \u2013 X-coordinate of the first vertex. y0 ( int ) \u2013 Y-coordinate of the first vertex. x1 ( int ) \u2013 X-coordinate of the second vertex. y1 ( int ) \u2013 Y-coordinate of the second vertex. x2 ( int ) \u2013 X-coordinate of the third vertex. y2 ( int ) \u2013 Y-coordinate of the third vertex. c ( int ) \u2013 color. f ( bool ) \u2013 Fill the triangle (default: False). Returns: Area \u2013 The bounding box of the triangle. vline \u00b6 vline ( x , y , h , c ) Draw a vertical line at the given location, height and color. Parameters: x ( int ) \u2013 x coordinate y ( int ) \u2013 y coordinate h ( int ) \u2013 Height in pixels c ( int ) \u2013 color Returns: Area \u2013 Bounding box of the vertical line Functions \u00b6 arc \u00b6 arc ( canvas , x , y , r , a0 , a1 , c ) Arc drawing function. Will draw a single pixel wide arc with a radius r centered at x, y from a0 to a1. Parameters: x ( int ) \u2013 X-coordinate of the arc's center. y ( int ) \u2013 Y-coordinate of the arc's center. r ( int ) \u2013 Radius of the arc. a0 ( float ) \u2013 Starting angle in degrees. a1 ( float ) \u2013 Ending angle in degrees. c ( int ) \u2013 color. Returns: Area \u2013 The bounding box of the arc. blit \u00b6 blit ( canvas , source , x , y , key =- 1 , palette = None ) Blit a source to the canvas at the specified x, y location. Parameters: source ( FrameBuffer ) \u2013 Source FrameBuffer object. x ( int ) \u2013 X-coordinate to blit to. y ( int ) \u2013 Y-coordinate to blit to. key ( int , default: -1 ) \u2013 Key value for transparency (default: -1). palette ( Palette , default: None ) \u2013 Palette object for color translation (default: None). Returns: Area \u2013 The bounding box of the blitted area. blit_rect \u00b6 blit_rect ( canvas , buf , x , y , w , h ) Blit a rectangular area from a buffer to the canvas. Uses the canvas's blit_rect method if available, otherwise writes directly to the buffer. Parameters: buf ( memoryview ) \u2013 Buffer to blit. Must already be byte-swapped if necessary. x ( int ) \u2013 X-coordinate to blit to. y ( int ) \u2013 Y-coordinate to blit to. w ( int ) \u2013 Width of the area to blit. h ( int ) \u2013 Height of the area to blit. Returns: Area \u2013 The bounding box of the blitted area. blit_transparent \u00b6 blit_transparent ( canvas , buf , x , y , w , h , key ) Blit a buffer with transparency. Parameters: buf ( memoryview ) \u2013 Buffer to blit. x ( int ) \u2013 X-coordinate to blit to. y ( int ) \u2013 Y-coordinate to blit to. w ( int ) \u2013 Width of the area to blit. h ( int ) \u2013 Height of the area to blit. key ( int ) \u2013 Key value for transparency. Returns: Area \u2013 The bounding box of the blitted area. bmp_to_framebuffer \u00b6 bmp_to_framebuffer ( filename ) Convert a BMP file to a RGB565 FrameBuffer. First ensures planes is 1, bits per pixel is 16, and compression is 0. Parameters: filename ( str ) \u2013 Filename of the circle \u00b6 circle ( canvas , x0 , y0 , r , c , f = False ) Circle drawing function. Will draw a single pixel wide circle centered at x0, y0 and the specified r. Parameters: x0 ( int ) \u2013 Center x coordinate y0 ( int ) \u2013 Center y coordinate r ( int ) \u2013 Radius c ( int ) \u2013 Color f ( bool , default: False ) \u2013 Fill the circle (default: False) Returns: Area \u2013 The bounding box of the circle. ellipse \u00b6 ellipse ( canvas , x0 , y0 , r1 , r2 , c , f = False , m = 15 , w = None , h = None ) Midpoint ellipse algorithm Draw an ellipse at the given location. Radii r1 and r2 define the geometry; equal values cause a circle to be drawn. The c parameter defines the color. The optional f parameter can be set to True to fill the ellipse. Otherwise just a one pixel outline is drawn. The optional m parameter enables drawing to be restricted to certain quadrants of the ellipse. The LS four bits determine which quadrants are to be drawn, with bit 0 specifying Q1, b1 Q2, b2 Q3 and b3 Q4. Quadrants are numbered counterclockwise with Q1 being top right. Parameters: x0 ( int ) \u2013 Center x coordinate y0 ( int ) \u2013 Center y coordinate r1 ( int ) \u2013 x radius r2 ( int ) \u2013 y radius c ( int ) \u2013 color f ( bool , default: False ) \u2013 Fill the ellipse (default: False) m ( int , default: 15 ) \u2013 Bitmask to determine which quadrants to draw (default: 0b1111) w ( int , default: None ) \u2013 Width of the ellipse (default: None) h ( int , default: None ) \u2013 Height of the ellipse (default: None) Returns: Area \u2013 The bounding box of the ellipse. fill \u00b6 fill ( canvas , c ) Fill the entire canvas with a color. Uses the canvas's fill method if available, otherwise calls the fill_rect function. Parameters: c ( int ) \u2013 color. Returns: Area \u2013 The bounding box of the filled area. fill_rect \u00b6 fill_rect ( canvas , x , y , w , h , c ) Filled rectangle drawing function. Draws a filled rectangle starting at x, y and extending w, h pixels. Uses the canvas's fill_rect method if available, otherwise calls the pixel function for each pixel. Parameters: x ( int ) \u2013 X-coordinate of the top-left corner of the rectangle. y ( int ) \u2013 Y-coordinate of the top-left corner of the rectangle. w ( int ) \u2013 Width of the rectangle. h ( int ) \u2013 Height of the rectangle. c ( int ) \u2013 color Returns: Area \u2013 The bounding box of the filled area. gradient_rect \u00b6 gradient_rect ( canvas , x , y , w , h , c1 , c2 = None , vertical = True ) Fill a rectangle with a gradient. Parameters: x ( int ) \u2013 X-coordinate of the top-left corner of the rectangle. y ( int ) \u2013 Y-coordinate of the top-left corner of the rectangle. w ( int ) \u2013 Width of the rectangle. h ( int ) \u2013 Height of the rectangle. c1 ( int ) \u2013 565 encoded color for the top or left edge. c2 ( int , default: None ) \u2013 565 encoded color for the bottom or right edge. If None or the same as c1, fill_rect will be called instead. vertical ( bool , default: True ) \u2013 If True, the gradient will be vertical. If False, the gradient will be horizontal. Returns: Area \u2013 The bounding box of the filled area. hline \u00b6 hline ( canvas , x0 , y0 , w , c ) Horizontal line drawing function. Will draw a single pixel wide line. Parameters: x0 ( int ) \u2013 X-coordinate of the start of the line. y0 ( int ) \u2013 Y-coordinate of the start of the line. w ( int ) \u2013 Width of the line. c ( int ) \u2013 color. Returns: Area \u2013 The bounding box of the line. line \u00b6 line ( canvas , x0 , y0 , x1 , y1 , c ) Line drawing function. Will draw a single pixel wide line starting at x0, y0 and ending at x1, y1. Parameters: x0 ( int ) \u2013 X-coordinate of the start of the line. y0 ( int ) \u2013 Y-coordinate of the start of the line. x1 ( int ) \u2013 X-coordinate of the end of the line. y1 ( int ) \u2013 Y-coordinate of the end of the line. c ( int ) \u2013 color. Returns: Area \u2013 The bounding box of the line. pbm_to_framebuffer \u00b6 pbm_to_framebuffer ( filename ) Convert a PBM file to a MONO_HLSB FrameBuffer Parameters: filename ( str ) \u2013 Filename of the PBM file pgm_to_framebuffer \u00b6 pgm_to_framebuffer ( filename ) Convert a PGM file to a GS2_HMSB, GS4_HMSB or GS8 FrameBuffer Parameters: filename ( str ) \u2013 Filename of the PGM file pixel \u00b6 pixel ( canvas , x , y , c ) Draw a single pixel at the specified x, y location. Uses the canvas's pixel method if available, otherwise writes directly to the buffer. Parameters: x ( int ) \u2013 X-coordinate of the pixel. y ( int ) \u2013 Y-coordinate of the pixel. c ( int ) \u2013 color. Returns: Area \u2013 The bounding box of the pixel. poly \u00b6 poly ( canvas , x , y , coords , c , f = False ) Given a list of coordinates, draw an arbitrary (convex or concave) closed polygon at the given x, y location using the given color. The coords must be specified as an array of integers, e.g. array('h', [x0, y0, x1, y1, ... xn, yn]) or a list or tuple of points, e.g. [(x0, y0), (x1, y1), ... (xn, yn)]. The optional f parameter can be set to True to fill the polygon. Otherwise, just a one-pixel outline is drawn. Parameters: x ( int ) \u2013 X-coordinate of the polygon's position. y ( int ) \u2013 Y-coordinate of the polygon's position. coords ( list ) \u2013 List of coordinates. c ( int ) \u2013 color. f ( bool , default: False ) \u2013 Fill the polygon (default: False). Returns: Area \u2013 The bounding box of the polygon. polygon \u00b6 polygon ( canvas , points , x , y , color , angle = 0 , center_x = 0 , center_y = 0 , ) Draw a polygon on the canvas. Parameters: points ( list ) \u2013 List of points to draw. x ( int ) \u2013 X-coordinate of the polygon's position. y ( int ) \u2013 Y-coordinate of the polygon's position. color ( int ) \u2013 color. angle ( float , default: 0 ) \u2013 Rotation angle in radians (default: 0). center_x ( int , default: 0 ) \u2013 X-coordinate of the rotation center (default: 0). center_y ( int , default: 0 ) \u2013 Y-coordinate of the rotation center (default: 0). Raises: ValueError \u2013 If the polygon has less than 3 points. Returns: Area \u2013 The bounding box of the polygon. rect \u00b6 rect ( canvas , x0 , y0 , w , h , c , f = False ) Rectangle drawing function. Will draw a single pixel wide rectangle starting at x0, y0 and extending w, h pixels. Parameters: x0 ( int ) \u2013 X-coordinate of the top-left corner of the rectangle. y0 ( int ) \u2013 Y-coordinate of the top-left corner of the rectangle. w ( int ) \u2013 Width of the rectangle. h ( int ) \u2013 Height of the rectangle. c ( int ) \u2013 color. f ( bool , default: False ) \u2013 Fill the rectangle (default: False). Returns: Area \u2013 The bounding box of the rectangle. round_rect \u00b6 round_rect ( canvas , x0 , y0 , w , h , r , c , f = False ) Rounded rectangle drawing function. Will draw a single pixel wide rounded rectangle starting at x0, y0 and extending w, h pixels with the specified radius. Parameters: x0 ( int ) \u2013 X-coordinate of the top-left corner of the rectangle. y0 ( int ) \u2013 Y-coordinate of the top-left corner of the rectangle. w ( int ) \u2013 Width of the rectangle. h ( int ) \u2013 Height of the rectangle. r ( int ) \u2013 Radius of the corners. c ( int ) \u2013 color. f ( bool , default: False ) \u2013 Fill the rectangle (default: False). Returns: Area \u2013 The bounding box of the rectangle. text \u00b6 text ( * args , height = 8 , ** kwargs ) Selector to call the correct text function based on the height of the font. See text8, text14, and text16 for more information. Parameters: height ( int , default: 8 ) \u2013 The height of the font to use. Default is 8. text14 \u00b6 text14 ( canvas , s , x , y , c = 1 , scale = 1 , inverted = False , font_data = None , ) Place text on the canvas with a 14 pixel high font. Breaks on to next line. Does not break on line going off canvas. Args: canvas (Canvas): The DisplayDriver, FrameBuffer, or other canvas-like object to draw on. s (str): The text to draw. x (int): The x position to start drawing the text. y (int): The y position to start drawing the text. c (int): The color to draw the text in. Default is 1. scale (int): The scale factor to draw the text at. Default is 1. inverted (bool): If True, draw the text inverted. Default is False. font_data (str | byterray): The path to the font .bin file or memoryview. Default is None. Returns: Area: The area that was drawn to. text16 \u00b6 text16 ( canvas , s , x , y , c = 1 , scale = 1 , inverted = False , font_data = None , ) Place text on the canvas with a 16 pixel high font. Breaks on to next line. Does not break on line going off canvas. Args: canvas (Canvas): The DisplayDriver, FrameBuffer, or other canvas-like object to draw on. s (str): The text to draw. x (int): The x position to start drawing the text. y (int): The y position to start drawing the text. c (int): The color to draw the text in. Default is 1. scale (int): The scale factor to draw the text at. Default is 1. inverted (bool): If True, draw the text inverted. Default is False. font_data (str | byterray): The path to the font .bin file or memoryview. Default is None. Returns: Area: The area that was drawn to. text8 \u00b6 text8 ( canvas , s , x , y , c = 1 , scale = 1 , inverted = False , font_data = None , ) Place text on the canvas with an 8 pixel high font. Breaks on to next line. Does not break on line going off canvas. Args: canvas (Canvas): The DisplayDriver, FrameBuffer, or other canvas-like object to draw on. s (str): The text to draw. x (int): The x position to start drawing the text. y (int): The y position to start drawing the text. c (int): The color to draw the text in. Default is 1. scale (int): The scale factor to draw the text at. Default is 1. inverted (bool): If True, draw the text inverted. Default is False. font_data (str | byterray): The path to the font .bin file or memoryview. Default is None. Returns: Area: The area that was drawn to. triangle \u00b6 triangle ( canvas , x0 , y0 , x1 , y1 , x2 , y2 , c , f = False ) Triangle drawing function. Draws a single pixel wide triangle with vertices at (x0, y0), (x1, y1), and (x2, y2). Parameters: x0 ( int ) \u2013 X-coordinate of the first vertex. y0 ( int ) \u2013 Y-coordinate of the first vertex. x1 ( int ) \u2013 X-coordinate of the second vertex. y1 ( int ) \u2013 Y-coordinate of the second vertex. x2 ( int ) \u2013 X-coordinate of the third vertex. y2 ( int ) \u2013 Y-coordinate of the third vertex. c ( int ) \u2013 color. f ( bool , default: False ) \u2013 Fill the triangle (default: False). Returns: Area \u2013 The bounding box of the triangle. vline \u00b6 vline ( canvas , x0 , y0 , h , c ) Horizontal line drawing function. Will draw a single pixel wide line. Parameters: x0 ( int ) \u2013 X-coordinate of the start of the line. y0 ( int ) \u2013 Y-coordinate of the start of the line. h ( int ) \u2013 Height of the line. c ( int ) \u2013 color. Returns: Area \u2013 The bounding box of the line. multimer \u00b6 Cross-platform Timer class for *Python. Enables using 'from multimer import Timer' on MicroPython on microcontrollers, on MicroPython on Unix (which doesn't have a machine.Timer) and CPython (ditto). _librt.py uses uses MicroPython ffi to connect to libc and librt, while _sdl2.py uses SDL2 on CPython to connect to libSDL2. No compatibility for CircuitPython yet. Returns None if the platform is not supported rather than raising an ImportError so that the client can handle the error more gracefully (e.g. by using if Timer is not None: ). Usage from multimer import Timer tim = Timer() tim.init(mode=Timer.PERIODIC, period=500, callback=lambda t: print(\".\")) .... tim.deinit() Classes \u00b6 Functions \u00b6 get_timer \u00b6 get_timer ( callback , period = 33 ) Creates and returns a timer to periodically call the callback function Parameters: callback ( function ) \u2013 The function to call periodically period ( int , default: 33 ) \u2013 The period in milliseconds, default is 33ms (30fps) palettes \u00b6 Classes \u00b6 MappedPalette \u00b6 A class to represent a color palette with a color map. Functions \u00b6 color_rgb \u00b6 color_rgb ( color ) color can be an 16-bit integer or a tuple, list or bytearray of length 2 or 3. Palette \u00b6 A class to represent a color palette. Functions \u00b6 color_rgb \u00b6 color_rgb ( color ) color can be an 16-bit integer or a tuple, list or bytearray of length 2 or 3.","title":"Test Page"},{"location":"test-page/#src.lib.displaybuf--displaybuf","text":"FrameBuffer wrapper for using framebuf based GUIs with displaysys. Works with MicroPython Nano-GUI, Micro-GUI and MicroPython-Touch from Peter Hinch, but may also be used without them. Usage 'color_setup.py' from displaybuf import DisplayBuffer as SSD from board_config import display_drv format = SSD.RGB565 # or .GS8 or .GS4_HMSB ssd = SSD(display_drv, format) 'main.py' from color_setup import ssd","title":"displaybuf"},{"location":"test-page/#src.lib.displaybuf-classes","text":"","title":"Classes"},{"location":"test-page/#src.lib.displaybuf.DisplayBuffer","text":"DisplayBuffer: A class to wrap an displaysys driver and provide a framebuf compatible interface to it. It provides a show() method to copy the framebuf to the display. The show() method is optimized for the format. The format must be one of the following: DisplayBuffer.RGB565 DisplayBuffer.GS8 DisplayBuffer.GS4_HMSB","title":"DisplayBuffer"},{"location":"test-page/#src.lib.displaybuf.DisplayBuffer-functions","text":"","title":"Functions"},{"location":"test-page/#src.lib.displaybuf.DisplayBuffer.color","text":"color ( r , g , b , idx = None ) Get an RGB565 or RGB332 value for a color and optionally register it in the display's LUT. This is a convenience function for using this framework WITHOUT Nano-GUI or Micro-GUI. Those packages have their own methods of registering colors. Parameters: r ( int ) \u2013 Red component (0-255) g ( int ) \u2013 Green component (0-255) b ( int ) \u2013 Blue component (0-255) idx ( int , default: None ) \u2013 Optional index to register the color in the display's LUT (0-15); ignored if the display doesn't use a LUT in its current format Raises: ValueError \u2013 If 16 colors have already been registered or if the index is out of range Returns: int \u2013 RGB565 color value in RG565 format; RGB332 color value in GS8 format; the index of the registered color in the LUT in GS4_HMSB format","title":"color"},{"location":"test-page/#src.lib.displaysys--displaysys","text":"A collection of classes and functions for working with displays and input devices in *Python. The goal is to provide a common API for working with displays and input devices across different platforms including MicroPython, CircuitPython and CPython. It works on microcontrollers, desktops, web browsers and Jupyter notebooks.","title":"displaysys"},{"location":"test-page/#src.lib.displaysys-classes","text":"","title":"Classes"},{"location":"test-page/#src.lib.displaysys.DisplayDriver","text":"","title":"DisplayDriver"},{"location":"test-page/#src.lib.displaysys.DisplayDriver-attributes","text":"","title":"Attributes"},{"location":"test-page/#src.lib.displaysys.DisplayDriver.bfa","text":"bfa The bottom fixed area set by set_vscroll or vscrdef. Returns: int \u2013 The bottom fixed area.","title":"bfa"},{"location":"test-page/#src.lib.displaysys.DisplayDriver.bfa_area","text":"bfa_area The bottom fixed area as an Area object. Returns: tuple \u2013 The bottom fixed area.","title":"bfa_area"},{"location":"test-page/#src.lib.displaysys.DisplayDriver.brightness","text":"brightness The brightness of the display.","title":"brightness"},{"location":"test-page/#src.lib.displaysys.DisplayDriver.height","text":"height The height of the display in pixels.","title":"height"},{"location":"test-page/#src.lib.displaysys.DisplayDriver.power","text":"power The power state of the display.","title":"power"},{"location":"test-page/#src.lib.displaysys.DisplayDriver.requires_byteswap","text":"requires_byteswap Whether the display requires byte swapping.","title":"requires_byteswap"},{"location":"test-page/#src.lib.displaysys.DisplayDriver.rotation","text":"rotation The rotation of the display.","title":"rotation"},{"location":"test-page/#src.lib.displaysys.DisplayDriver.tfa","text":"tfa The top fixed area set by set_vscroll or vscrdef. Returns: int \u2013 The top fixed area.","title":"tfa"},{"location":"test-page/#src.lib.displaysys.DisplayDriver.tfa_area","text":"tfa_area The top fixed area as an Area object. Returns: tuple \u2013 The top fixed area.","title":"tfa_area"},{"location":"test-page/#src.lib.displaysys.DisplayDriver.touch_device","text":"touch_device The touch device.","title":"touch_device"},{"location":"test-page/#src.lib.displaysys.DisplayDriver.vsa","text":"vsa The vertical scroll area set by set_vscroll or vscrdef. Returns: int \u2013 The vertical scroll area.","title":"vsa"},{"location":"test-page/#src.lib.displaysys.DisplayDriver.vsa_area","text":"vsa_area The vertical scroll area as an Area object. Returns: tuple \u2013 The vertical scroll area.","title":"vsa_area"},{"location":"test-page/#src.lib.displaysys.DisplayDriver.vscroll","text":"vscroll The vertical scroll position relative to the top fixed area. Returns: int \u2013 The vertical scroll position.","title":"vscroll"},{"location":"test-page/#src.lib.displaysys.DisplayDriver.width","text":"width The width of the display in pixels.","title":"width"},{"location":"test-page/#src.lib.displaysys.DisplayDriver-functions","text":"","title":"Functions"},{"location":"test-page/#src.lib.displaysys.DisplayDriver.blit_transparent","text":"blit_transparent ( buf , x , y , w , h , key ) Blit a buffer with transparency. Parameters: buf ( memoryview ) \u2013 The buffer to blit. x ( int ) \u2013 The x coordinate to blit to. y ( int ) \u2013 The y coordinate to blit to. w ( int ) \u2013 The width to blit. h ( int ) \u2013 The height to blit. key ( int ) \u2013 The color key to use for transparency. Returns: tuple \u2013 The x, y, w, h coordinates of the blitted area.","title":"blit_transparent"},{"location":"test-page/#src.lib.displaysys.DisplayDriver.deinit","text":"deinit () Deinitialize the display.","title":"deinit"},{"location":"test-page/#src.lib.displaysys.DisplayDriver.disable_auto_byteswap","text":"disable_auto_byteswap ( value ) Disable byte swapping in the display driver. If self.requires_byteswap and the guest application is capable of byte swapping color data check to see if byte swapping can be disabled. If so, disable it. Usage # If byte swapping is required and the display driver is capable of having byte swapping disabled, # disable it and set a flag so we can swap the color bytes as they are created. if display_drv.requires_byteswap: needs_swap = display_drv.disable_auto_byteswap(True) else: needs_swap = False Parameters: value ( bool ) \u2013 Whether to disable byte swapping. Returns: bool \u2013 Whether byte swapping was disabled successfully.","title":"disable_auto_byteswap"},{"location":"test-page/#src.lib.displaysys.DisplayDriver.fill","text":"fill ( color ) Fill the display with a color. Parameters: color ( int ) \u2013 The color to fill the display with.","title":"fill"},{"location":"test-page/#src.lib.displaysys.DisplayDriver.hard_reset","text":"hard_reset () Perform a hardware reset of the display. Should be overridden by the subclass.","title":"hard_reset"},{"location":"test-page/#src.lib.displaysys.DisplayDriver.invert_colors","text":"invert_colors ( value ) Invert the colors of the display. Should be overridden by the subclass. Parameters: value ( bool ) \u2013 True to invert the colors, False to restore the colors.","title":"invert_colors"},{"location":"test-page/#src.lib.displaysys.DisplayDriver.reset","text":"reset () Perform a reset of the display. Should be overridden by the subclass.","title":"reset"},{"location":"test-page/#src.lib.displaysys.DisplayDriver.scroll","text":"scroll ( dx , dy ) Scroll the display. Parameters: dx ( int ) \u2013 The number of pixels to scroll horizontally. dy ( int ) \u2013 The number of pixels to scroll vertically.","title":"scroll"},{"location":"test-page/#src.lib.displaysys.DisplayDriver.set_vscroll","text":"set_vscroll ( tfa = 0 , bfa = 0 ) Set the vertical scroll definition and move the vertical scroll to the top. Parameters: tfa ( int , default: 0 ) \u2013 The top fixed area. bfa ( int , default: 0 ) \u2013 The bottom fixed area.","title":"set_vscroll"},{"location":"test-page/#src.lib.displaysys.DisplayDriver.show","text":"show ( * args , ** kwargs ) Show the display. Base class method does nothing. May be overridden by subclasses.","title":"show"},{"location":"test-page/#src.lib.displaysys.DisplayDriver.sleep_mode","text":"sleep_mode ( value ) Set the sleep mode of the display. Should be overridden by the subclass. Parameters: value ( bool ) \u2013 True to enter sleep mode, False to exit sleep mode.","title":"sleep_mode"},{"location":"test-page/#src.lib.displaysys.DisplayDriver.soft_reset","text":"soft_reset () Perform a software reset of the display. Should be overridden by the subclass.","title":"soft_reset"},{"location":"test-page/#src.lib.displaysys.DisplayDriver.translate_point","text":"translate_point ( point ) Translate a point from real coordinates to scrolled coordinates. Useful for touch events. Parameters: point ( tuple ) \u2013 The x and y coordinates to translate. Returns: tuple \u2013 The translated x and y coordinates.","title":"translate_point"},{"location":"test-page/#src.lib.displaysys.DisplayDriver.vscrdef","text":"vscrdef ( tfa , vsa , bfa ) Set the vertical scroll definition. Should be overridden by the subclass and called as super().vscrdef(tfa, vsa, bfa). Parameters: tfa ( int ) \u2013 The top fixed area. vsa ( int ) \u2013 The vertical scroll area. bfa ( int ) \u2013 The bottom fixed area.","title":"vscrdef"},{"location":"test-page/#src.lib.displaysys.DisplayDriver.vscsad","text":"vscsad ( vssa = None ) Set or get the vertical scroll start address. Should be overridden by the subclass and called as super().vscsad(y). Parameters: vssa ( int , default: None ) \u2013 The vertical scroll start address. Returns: int \u2013 The vertical scroll start address.","title":"vscsad"},{"location":"test-page/#src.lib.displaysys-functions","text":"","title":"Functions"},{"location":"test-page/#src.lib.displaysys.alloc_buffer","text":"alloc_buffer ( size ) Create a new buffer of the specified size. In the future, this function may be modified to use port-specific memory allocation such as ESP32's heap_caps_malloc. Parameters: size ( int ) \u2013 The size of the buffer to create. Returns: memoryview \u2013 The new buffer.","title":"alloc_buffer"},{"location":"test-page/#src.lib.displaysys.color565","text":"color565 ( r , g = None , b = None ) Convert RGB values to a 16-bit color value. Parameters: r ( ( int , tuple or list ) ) \u2013 The red value or a tuple or list of RGB values. g ( int , default: None ) \u2013 The green value. b ( int , default: None ) \u2013 The blue value. Returns: int \u2013 The 16-bit color value","title":"color565"},{"location":"test-page/#src.lib.displaysys.color888","text":"color888 ( r , g , b ) Convert RGB values to a 24-bit color value. Parameters: r ( int ) \u2013 The red value. g ( int ) \u2013 The green value. b ( int ) \u2013 The blue value. Returns: int \u2013 The 24-bit color value.","title":"color888"},{"location":"test-page/#src.lib.displaysys.color_rgb","text":"color_rgb ( color ) color can be an 16-bit integer or a tuple, list or bytearray of length 2 or 3.","title":"color_rgb"},{"location":"test-page/#src.lib.eventsys--eventsys","text":"An Event System including event types and device types for *Python.","title":"eventsys"},{"location":"test-page/#src.lib.eventsys-classes","text":"","title":"Classes"},{"location":"test-page/#src.lib.eventsys.events","text":"A container for event types and classes. Similar to a C enum and struct.","title":"events"},{"location":"test-page/#src.lib.eventsys-functions","text":"","title":"Functions"},{"location":"test-page/#src.lib.eventsys.custom_type","text":"custom_type ( types = {}, classes = {}) Create new event types and classes for the events class. For example, to recreate the events for the keypad device: import eventsys types = [(\"KEYDOWN\", 0x300), (\"KEYUP\", 0x301)] classes = {\"Key\": \"type name key mod scancode window\"} eventsys.custom_type(types, classes) # Optionally update the filter events.filter += [events.KEYDOWN, events.KEYUP] Parameters: types ( dict [ str , int ] , default: {} ) \u2013 Dictionary of event types and values. classes ( dict [ str , str ] , default: {} ) \u2013 Dictionary of event classes and fields.","title":"custom_type"},{"location":"test-page/#src.lib.graphics--graphics","text":"Graphics library extending MicroPython's framebuf module.","title":"graphics"},{"location":"test-page/#src.lib.graphics-classes","text":"","title":"Classes"},{"location":"test-page/#src.lib.graphics.Area","text":"Represents a rectangular area defined by its position and dimensions. Attributes: x ( int | float ) \u2013 The x-coordinate of the top-left corner of the area. y ( int | float ) \u2013 The y-coordinate of the top-left corner of the area. w ( int | float ) \u2013 The width of the area. h ( int | float ) \u2013 The height of the area. Methods: Name Description contains Checks if the specified point is contained within the area. contains_area Checks if the specified area is contained within the area. intersects Checks if the current Area object intersects with another Area object. touches_or_intersects Checks if the current Area object touches or intersects with another Area object. shift Returns a new Area shifted by the specified amount in the x and y directions. clip Clips the current Area object to the specified Area object. Special Methods eq (other): Checks if the current Area object is equal to another Area object. ne (other): Checks if the current Area object is not equal to another Area object. add (other): Computes the union of the current Area object and another Area object. iter (): Returns an iterator over the elements of the Area object. repr (): Returns a string representation of the Area object. str (): Returns a string representation of the Area object.","title":"Area"},{"location":"test-page/#src.lib.graphics.Area-functions","text":"","title":"Functions"},{"location":"test-page/#src.lib.graphics.Area.__add__","text":"__add__ ( other ) Computes the union of the current Area object and another Area object. Parameters: other ( Area ) \u2013 The other Area object to compute the union with. Returns: Area \u2013 A new Area object representing the union of the two areas.","title":"__add__"},{"location":"test-page/#src.lib.graphics.Area.__eq__","text":"__eq__ ( other ) Checks if the current Area object is equal to another Area object. Parameters: other ( Area ) \u2013 The other Area object to compare with. Returns: bool \u2013 True if the two Area objects are equal, False otherwise.","title":"__eq__"},{"location":"test-page/#src.lib.graphics.Area.__init__","text":"__init__ ( x , y = None , w = None , h = None ) Initializes a new instance of the Area class. Parameters: x ( int | float | tuple ) \u2013 The x-coordinate of the top-left corner of the area or a tuple containing the x, y, w, and h coordinates of the area. y ( int | float , default: None ) \u2013 The y-coordinate of the top-left corner of the area. w ( int | float , default: None ) \u2013 The width of the area. h ( int | float , default: None ) \u2013 The height of the area.","title":"__init__"},{"location":"test-page/#src.lib.graphics.Area.__iter__","text":"__iter__ () Returns an iterator over the elements of the Area object. Returns: iterator \u2013 An iterator over the elements of the Area object.","title":"__iter__"},{"location":"test-page/#src.lib.graphics.Area.__ne__","text":"__ne__ ( other ) Checks if the current Area object is not equal to another Area object. Parameters: other ( Area ) \u2013 The other Area object to compare with. Returns: bool \u2013 True if the two Area objects are not equal, False otherwise.","title":"__ne__"},{"location":"test-page/#src.lib.graphics.Area.__repr__","text":"__repr__ () Returns a string representation of the Area object. Returns: str \u2013 A string representation of the Area object.","title":"__repr__"},{"location":"test-page/#src.lib.graphics.Area.__str__","text":"__str__ () Returns a string representation of the Area object. Returns: str \u2013 A string representation of the Area object.","title":"__str__"},{"location":"test-page/#src.lib.graphics.Area.clip","text":"clip ( other ) Clips the current Area object to the specified Area object. Parameters: other ( Area ) \u2013 The other Area object to clip to. Returns: Area \u2013 A new Area object representing the clipped area.","title":"clip"},{"location":"test-page/#src.lib.graphics.Area.contains","text":"contains ( x , y = None ) Checks if the specified point is contained within the area. Parameters: x ( int | tuple ) \u2013 The x-coordinate of the point to check or a tuple containing the x and y coordinates of the point. y ( int , default: None ) \u2013 The y-coordinate of the point to check. Returns: bool \u2013 True if the point is contained within the area, False otherwise.","title":"contains"},{"location":"test-page/#src.lib.graphics.Area.contains_area","text":"contains_area ( other ) Checks if the specified area is contained within the area. Parameters: other ( Area ) \u2013 The other area to check. Returns: bool \u2013 True if the other area is contained within the area, False otherwise.","title":"contains_area"},{"location":"test-page/#src.lib.graphics.Area.inset","text":"inset ( d1 , d2 = None , d3 = None , d4 = None ) Returns a new Area inset by the specified amount(s). If only one argument is provided, it is used as the inset in all 4 directions. If two arguments are provided, the first is used as the inset in the x direction and the second as the inset in the y direction. If three arguments are provided, they are used as the insets in the left, top/bottom, and right directions, respectively. If four arguments are provided, they are used as the insets in the left, top, right, and bottom directions, respectively. Parameters: d1 ( int | float ) \u2013 The inset in the x direction or the inset in all 4 directions. d2 ( int | float , default: None ) \u2013 The inset in the y direction or the inset in the top/bottom direction. d3 ( int | float , default: None ) \u2013 The inset in the right direction. d4 ( int | float , default: None ) \u2013 The inset in the bottom direction. Returns: Area \u2013 A new Area object inset by the specified amount(s).","title":"inset"},{"location":"test-page/#src.lib.graphics.Area.intersects","text":"intersects ( other ) Checks if the current Area object intersects with another Area object. Parameters: other ( Area ) \u2013 The other Area object to check for overlap. Returns: bool \u2013 True if the two Area objects intersect, False otherwise.","title":"intersects"},{"location":"test-page/#src.lib.graphics.Area.offset","text":"offset ( d1 , d2 = None , d3 = None , d4 = None ) Returns a new Area offset by the specified amount(s). If only one argument is provided, it is used as the offset in all 4 directions. If two arguments are provided, the first is used as the offset in the x direction and the second as the offset in the y direction. If three arguments are provided, they are used as the offsets in the left, top/bottom, and right directions, respectively. If four arguments are provided, they are used as the offsets in the left, top, right, and bottom directions, respectively. Parameters: d1 ( int | float ) \u2013 The offset in the x direction or the offset in all 4 directions. d2 ( int | float , default: None ) \u2013 The offset in the y direction or the offset in the top/bottom direction. d3 ( int | float , default: None ) \u2013 The offset in the right direction. d4 ( int | float , default: None ) \u2013 The offset in the bottom direction. Returns: Area \u2013 A new Area object offset by the specified amount(s).","title":"offset"},{"location":"test-page/#src.lib.graphics.Area.shift","text":"shift ( dx = 0 , dy = 0 ) Returns a new Area shifted by the specified amount in the x and y directions. Parameters: dx ( int | float , default: 0 ) \u2013 The amount to shift the area in the x direction. dy ( int | float , default: 0 ) \u2013 The amount to shift the area in the y direction. Returns: Area \u2013 A new Area object shift by the specified amount in the x and y directions.","title":"shift"},{"location":"test-page/#src.lib.graphics.Area.touches_or_intersects","text":"touches_or_intersects ( other ) Checks if the current Area object touches or intersects with another Area object. Parameters: other ( Area ) \u2013 The other Area object to check for overlap or touch. Returns: bool \u2013 True if the two Area objects touch or intersect, False otherwise.","title":"touches_or_intersects"},{"location":"test-page/#src.lib.graphics.Draw","text":"A Draw class to draw shapes onto a specified canvas. Parameters: canvas ( Canvas ) \u2013 The canvas to draw on. Usage: # canvas is an instance of DisplayDriver, FrameBuffer, or other canvas-like object draw = Draw(canvas) draw.fill(0x0000) draw.rect(10, 10, 100, 100, 0xFFFF)","title":"Draw"},{"location":"test-page/#src.lib.graphics.Font","text":"A class to read binary fonts like those found at https://github.com/spacerace/romfont and draw text to a canvas. Parameters: font_data ( str | byterray , default: None ) \u2013 The path to the font .bin file or memoryview. Default is None. height ( int , default: None ) \u2013 The height of the font. Default is None. cached ( bool , default: True ) \u2013 If True, the font file will be read into memory on init. If False, the font file will be read from disk each time it is needed.","title":"Font"},{"location":"test-page/#src.lib.graphics.Font-attributes","text":"","title":"Attributes"},{"location":"test-page/#src.lib.graphics.Font.height","text":"height Return the height of the font in pixels.","title":"height"},{"location":"test-page/#src.lib.graphics.Font.width","text":"width Return the width of the font in pixels.","title":"width"},{"location":"test-page/#src.lib.graphics.Font-functions","text":"","title":"Functions"},{"location":"test-page/#src.lib.graphics.Font.__enter__","text":"__enter__ () Initialize/open the font file","title":"__enter__"},{"location":"test-page/#src.lib.graphics.Font.__exit__","text":"__exit__ ( exception_type , exception_value , traceback ) cleanup on exit","title":"__exit__"},{"location":"test-page/#src.lib.graphics.Font.deinit","text":"deinit () Close the font file as cleanup.","title":"deinit"},{"location":"test-page/#src.lib.graphics.Font.draw_char","text":"draw_char ( char , x , y , canvas , color , scale = 1 , inverted = False ) Draw one character at position (x,y). Parameters: char ( str ) \u2013 The character to draw. x ( int ) \u2013 The x position to draw the character. y ( int ) \u2013 The y position to draw the character. canvas ( Canvas ) \u2013 The DisplayDriver, FrameBuffer, or other canvas-like object to draw on. color ( int ) \u2013 The color to draw the character in. scale ( int , default: 1 ) \u2013 The scale factor to draw the character at. Default is 1. inverted ( bool , default: False ) \u2013 If True, draw the character inverted. Default is False. Returns: Area \u2013 The area that was drawn to.","title":"draw_char"},{"location":"test-page/#src.lib.graphics.Font.export","text":"export ( filename ) Export the font data in self._cache to a .py file that can be imported. The format is a single bytes object named _FONT. There are 256 lines, one for each character. The last line is FONT = memoryview(_FONT) . Parameters: filename ( str ) \u2013 The path to save the file to.","title":"export"},{"location":"test-page/#src.lib.graphics.Font.text","text":"text ( canvas , string , x , y , color , scale = 1 , inverted = False ) Draw text to the canvas. Parameters: canvas ( Canvas ) \u2013 The DisplayDriver, FrameBuffer, or other canvas-like object to draw on. string ( str ) \u2013 The text to draw. x ( int ) \u2013 The x position to start drawing the text. y ( int ) \u2013 The y position to start drawing the text. color ( int ) \u2013 The color to draw the text in. scale ( int , default: 1 ) \u2013 The scale factor to draw the text at. Default is 1. inverted ( bool , default: False ) \u2013 If True, draw the text inverted. Default is False. Returns: Area \u2013 The area that was drawn to.","title":"text"},{"location":"test-page/#src.lib.graphics.Font.text_width","text":"text_width ( text , scale = 1 ) Return the pixel width of the specified text message. Takes into account the scale factor, but not any newlines. Parameters: text ( str ) \u2013 The text to measure. scale ( int , default: 1 ) \u2013 The scale factor to measure the text at. Default is 1.","title":"text_width"},{"location":"test-page/#src.lib.graphics.FrameBuffer","text":"An extension of MicroPython's framebuf.FrameBuffer that adds some useful methods for drawing shapes and text. Each method returns a bounding box (x, y, w, h) of the drawn shape to indicate the area of the display that was modified. This can be used to update only the modified area of the display. Exposes attributes not exposed in the base class, such as color_depth, width, height, buffer, and format. Also adds a save method to save the framebuffer to a file, and a from_file method to load a framebuffer from a file. Inherits from frambuf.Framebuffer, which may be compiled into MicroPython or may be from _framebuf.py. Methods should return an Area object, but the MicroPython framebuf module returns None, so the methods inherited from framebuf.FrameBuffer are overridden to return an Area object. Parameters: buffer ( bytearray ) \u2013 Framebuffer buffer width ( int ) \u2013 Width in pixels height ( int ) \u2013 Height in pixels format ( int ) \u2013 Framebuffer format Attributes: buffer ( bytearray ) \u2013 Framebuffer buffer width ( int ) \u2013 Width in pixels height ( int ) \u2013 Height in pixels format ( int ) \u2013 Framebuffer format color_depth ( int ) \u2013 Color depth","title":"FrameBuffer"},{"location":"test-page/#src.lib.graphics.FrameBuffer-functions","text":"","title":"Functions"},{"location":"test-page/#src.lib.graphics.FrameBuffer.arc","text":"arc ( * args , ** kwargs ) Arc drawing function. Will draw a single pixel wide arc with a radius r centered at x, y from a0 to a1. Parameters: x ( int ) \u2013 X-coordinate of the arc's center. y ( int ) \u2013 Y-coordinate of the arc's center. r ( int ) \u2013 Radius of the arc. a0 ( float ) \u2013 Starting angle in degrees. a1 ( float ) \u2013 Ending angle in degrees. c ( int ) \u2013 color. Returns: Area \u2013 The bounding box of the arc.","title":"arc"},{"location":"test-page/#src.lib.graphics.FrameBuffer.blit","text":"blit ( buf , x , y , key =- 1 , palette = None ) Blit the given buffer at the given location. Parameters: buf ( FrameBuffer ) \u2013 FrameBuffer to blit x ( int ) \u2013 x coordinate y ( int ) \u2013 y coordinate key ( int , default: -1 ) \u2013 Color key (default: -1) palette ( list , default: None ) \u2013 Palette (default: None) Returns: Area \u2013 Bounding box of the blitted buffer","title":"blit"},{"location":"test-page/#src.lib.graphics.FrameBuffer.blit_rect","text":"blit_rect ( buf , x , y , w , h ) Blit a rectangular area from a buffer to the canvas. Uses the canvas's blit_rect method if available, otherwise writes directly to the buffer. Parameters: buf ( memoryview ) \u2013 Buffer to blit. Must already be byte-swapped if necessary. x ( int ) \u2013 X-coordinate to blit to. y ( int ) \u2013 Y-coordinate to blit to. w ( int ) \u2013 Width of the area to blit. h ( int ) \u2013 Height of the area to blit. Returns: Area \u2013 The bounding box of the blitted area.","title":"blit_rect"},{"location":"test-page/#src.lib.graphics.FrameBuffer.blit_transparent","text":"blit_transparent ( * args , ** kwargs ) Blit a buffer with transparency. Parameters: buf ( memoryview ) \u2013 Buffer to blit. x ( int ) \u2013 X-coordinate to blit to. y ( int ) \u2013 Y-coordinate to blit to. w ( int ) \u2013 Width of the area to blit. h ( int ) \u2013 Height of the area to blit. key ( int ) \u2013 Key value for transparency. Returns: Area \u2013 The bounding box of the blitted area.","title":"blit_transparent"},{"location":"test-page/#src.lib.graphics.FrameBuffer.circle","text":"circle ( * args , ** kwargs ) Circle drawing function. Will draw a single pixel wide circle centered at x0, y0 and the specified r. Parameters: x0 ( int ) \u2013 Center x coordinate y0 ( int ) \u2013 Center y coordinate r ( int ) \u2013 Radius c ( int ) \u2013 Color f ( bool ) \u2013 Fill the circle (default: False) Returns: Area \u2013 The bounding box of the circle.","title":"circle"},{"location":"test-page/#src.lib.graphics.FrameBuffer.ellipse","text":"ellipse ( x , y , rx , ry , c , f = False , m = 15 ) Draw an ellipse at the given location, radii and color. Parameters: x ( int ) \u2013 Center x coordinate y ( int ) \u2013 Center y coordinate rx ( int ) \u2013 X radius ry ( int ) \u2013 Y radius c ( int ) \u2013 color f ( bool , default: False ) \u2013 Fill the ellipse (default: False) m ( int , default: 15 ) \u2013 Bitmask to determine which quadrants to draw (default: 0b1111) Returns: Area \u2013 Bounding box of the ellipse","title":"ellipse"},{"location":"test-page/#src.lib.graphics.FrameBuffer.fill","text":"fill ( c ) Fill the buffer with the given color. Parameters: c ( int ) \u2013 color Returns: Area \u2013 Bounding box of the filled buffer","title":"fill"},{"location":"test-page/#src.lib.graphics.FrameBuffer.fill_rect","text":"fill_rect ( x , y , w , h , c ) Fill the given rectangle with the given color. Parameters: x ( int ) \u2013 x coordinate y ( int ) \u2013 y coordinate w ( int ) \u2013 Width in pixels h ( int ) \u2013 Height in pixels c ( int ) \u2013 color Returns: Area \u2013 Bounding box of the filled rectangle","title":"fill_rect"},{"location":"test-page/#src.lib.graphics.FrameBuffer.from_file","text":"from_file ( filename ) Load a framebuffer from a file. Parameters: filename ( str ) \u2013 Filename to load from","title":"from_file"},{"location":"test-page/#src.lib.graphics.FrameBuffer.gradient_rect","text":"gradient_rect ( * args , ** kwargs ) Fill a rectangle with a gradient. Parameters: x ( int ) \u2013 X-coordinate of the top-left corner of the rectangle. y ( int ) \u2013 Y-coordinate of the top-left corner of the rectangle. w ( int ) \u2013 Width of the rectangle. h ( int ) \u2013 Height of the rectangle. c1 ( int ) \u2013 565 encoded color for the top or left edge. c2 ( int ) \u2013 565 encoded color for the bottom or right edge. If None or the same as c1, fill_rect will be called instead. vertical ( bool ) \u2013 If True, the gradient will be vertical. If False, the gradient will be horizontal. Returns: Area \u2013 The bounding box of the filled area.","title":"gradient_rect"},{"location":"test-page/#src.lib.graphics.FrameBuffer.hline","text":"hline ( x , y , w , c ) Draw a horizontal line at the given location, width and color. Parameters: x ( int ) \u2013 x coordinate y ( int ) \u2013 y coordinate w ( int ) \u2013 Width in pixels c ( int ) \u2013 color Returns: Area \u2013 Bounding box of the horizontal line","title":"hline"},{"location":"test-page/#src.lib.graphics.FrameBuffer.line","text":"line ( x1 , y1 , x2 , y2 , c ) Draw a line between the given start and end points and color. Parameters: x1 ( int ) \u2013 Start x coordinate y1 ( int ) \u2013 Start y coordinate x2 ( int ) \u2013 End x coordinate y2 ( int ) \u2013 End y coordinate c ( int ) \u2013 color Returns: Area \u2013 Bounding box of the line","title":"line"},{"location":"test-page/#src.lib.graphics.FrameBuffer.pixel","text":"pixel ( x , y , c = None ) Draw a single pixel at the given location and color. Parameters: x ( int ) \u2013 x coordinate y ( int ) \u2013 y coordinate c ( int , default: None ) \u2013 color (default: None) Returns: Area \u2013 Bounding box of the pixel","title":"pixel"},{"location":"test-page/#src.lib.graphics.FrameBuffer.poly","text":"poly ( x , y , coords , c , f = False ) Draw a polygon at the given location, coordinates and color. Parameters: x ( int ) \u2013 x coordinate y ( int ) \u2013 y coordinate coords ( array ) \u2013 Array of x, y coordinate tuples c ( int ) \u2013 color f ( bool , default: False ) \u2013 Fill the polygon (default: False) Returns: Area \u2013 Bounding box of the polygon","title":"poly"},{"location":"test-page/#src.lib.graphics.FrameBuffer.polygon","text":"polygon ( * args , ** kwargs ) Draw a polygon on the canvas. Parameters: points ( list ) \u2013 List of points to draw. x ( int ) \u2013 X-coordinate of the polygon's position. y ( int ) \u2013 Y-coordinate of the polygon's position. color ( int ) \u2013 color. angle ( float ) \u2013 Rotation angle in radians (default: 0). center_x ( int ) \u2013 X-coordinate of the rotation center (default: 0). center_y ( int ) \u2013 Y-coordinate of the rotation center (default: 0). Raises: ValueError \u2013 If the polygon has less than 3 points. Returns: Area \u2013 The bounding box of the polygon.","title":"polygon"},{"location":"test-page/#src.lib.graphics.FrameBuffer.rect","text":"rect ( x , y , w , h , c , f = False ) Draw a rectangle at the given location, size and color. Parameters: x ( int ) \u2013 Top left corner x coordinate y ( int ) \u2013 Top left corner y coordinate w ( int ) \u2013 Width in pixels h ( int ) \u2013 Height in pixels c ( int ) \u2013 color f ( bool , default: False ) \u2013 Fill the rectangle (default: False) Returns: Area \u2013 Bounding box of the rectangle","title":"rect"},{"location":"test-page/#src.lib.graphics.FrameBuffer.round_rect","text":"round_rect ( * args , ** kwargs ) Rounded rectangle drawing function. Will draw a single pixel wide rounded rectangle starting at x0, y0 and extending w, h pixels with the specified radius. Parameters: x0 ( int ) \u2013 X-coordinate of the top-left corner of the rectangle. y0 ( int ) \u2013 Y-coordinate of the top-left corner of the rectangle. w ( int ) \u2013 Width of the rectangle. h ( int ) \u2013 Height of the rectangle. r ( int ) \u2013 Radius of the corners. c ( int ) \u2013 color. f ( bool ) \u2013 Fill the rectangle (default: False). Returns: Area \u2013 The bounding box of the rectangle.","title":"round_rect"},{"location":"test-page/#src.lib.graphics.FrameBuffer.save","text":"save ( filename = None ) Save the framebuffer to a file. The file extension must match the format, otherwise the extension will be appended to the filename. Saves 1-bit formats as PBM, 2-bit formats as PGM with max value 3, 4-bit formats as PGM with max value 15, 8-bit formats as PGM with max value 255, and 16-bit formats as BMP. Parameters: filename ( str , default: None ) \u2013 Filename to save to","title":"save"},{"location":"test-page/#src.lib.graphics.FrameBuffer.scroll","text":"scroll ( xstep , ystep ) Shift the contents of the FrameBuffer by the given vector (xstep, ystep). This may leave a footprint of the previous colors in the FrameBuffer. Parameters: xstep ( int ) \u2013 The number of pixels to shift the FrameBuffer in the x direction. ystep ( int ) \u2013 The number of pixels to shift the FrameBuffer in the y direction. Raises: ValueError \u2013 If the FrameBuffer format depth is not a multiple of 8","title":"scroll"},{"location":"test-page/#src.lib.graphics.FrameBuffer.text","text":"text ( s , x , y , c = 1 , scale = 1 , inverted = False , font_data = None , height = 8 , ) Draw text at the given location, using the given font and color. Parameters: s ( str ) \u2013 Text to draw x ( int ) \u2013 x coordinate y ( int ) \u2013 y coordinate c ( int , default: 1 ) \u2013 color scale ( int , default: 1 ) \u2013 Scale factor (default: 1) inverted ( bool , default: False ) \u2013 Invert the text (default: False) font_data ( str , default: None ) \u2013 Path to the font file (default: None) height ( int , default: 8 ) \u2013 Height of the font (default: 8) Returns: Area \u2013 Bounding box of the text","title":"text"},{"location":"test-page/#src.lib.graphics.FrameBuffer.text14","text":"text14 ( * args , ** kwargs ) Place text on the canvas with a 14 pixel high font. Breaks on to next line. Does not break on line going off canvas. Args: canvas (Canvas): The DisplayDriver, FrameBuffer, or other canvas-like object to draw on. s (str): The text to draw. x (int): The x position to start drawing the text. y (int): The y position to start drawing the text. c (int): The color to draw the text in. Default is 1. scale (int): The scale factor to draw the text at. Default is 1. inverted (bool): If True, draw the text inverted. Default is False. font_data (str): The path to the font file to use. Default is None. Returns: Area: The area that was drawn to.","title":"text14"},{"location":"test-page/#src.lib.graphics.FrameBuffer.text16","text":"text16 ( * args , ** kwargs ) Place text on the canvas with a 16 pixel high font. Breaks on to next line. Does not break on line going off canvas. Args: canvas (Canvas): The DisplayDriver, FrameBuffer, or other canvas-like object to draw on. s (str): The text to draw. x (int): The x position to start drawing the text. y (int): The y position to start drawing the text. c (int): The color to draw the text in. Default is 1. scale (int): The scale factor to draw the text at. Default is 1. inverted (bool): If True, draw the text inverted. Default is False. font_data (str): The path to the font file to use. Default is None. Returns: Area: The area that was drawn to.","title":"text16"},{"location":"test-page/#src.lib.graphics.FrameBuffer.text8","text":"text8 ( * args , ** kwargs ) Place text on the canvas with an 8 pixel high font. Breaks on to next line. Does not break on line going off canvas. Args: canvas (Canvas): The DisplayDriver, FrameBuffer, or other canvas-like object to draw on. s (str): The text to draw. x (int): The x position to start drawing the text. y (int): The y position to start drawing the text. c (int): The color to draw the text in. Default is 1. scale (int): The scale factor to draw the text at. Default is 1. inverted (bool): If True, draw the text inverted. Default is False. font_data (str): The path to the font file to use. Default is None. Returns: Area: The area that was drawn to.","title":"text8"},{"location":"test-page/#src.lib.graphics.FrameBuffer.triangle","text":"triangle ( * args , ** kwargs ) Triangle drawing function. Draws a single pixel wide triangle with vertices at (x0, y0), (x1, y1), and (x2, y2). Parameters: x0 ( int ) \u2013 X-coordinate of the first vertex. y0 ( int ) \u2013 Y-coordinate of the first vertex. x1 ( int ) \u2013 X-coordinate of the second vertex. y1 ( int ) \u2013 Y-coordinate of the second vertex. x2 ( int ) \u2013 X-coordinate of the third vertex. y2 ( int ) \u2013 Y-coordinate of the third vertex. c ( int ) \u2013 color. f ( bool ) \u2013 Fill the triangle (default: False). Returns: Area \u2013 The bounding box of the triangle.","title":"triangle"},{"location":"test-page/#src.lib.graphics.FrameBuffer.vline","text":"vline ( x , y , h , c ) Draw a vertical line at the given location, height and color. Parameters: x ( int ) \u2013 x coordinate y ( int ) \u2013 y coordinate h ( int ) \u2013 Height in pixels c ( int ) \u2013 color Returns: Area \u2013 Bounding box of the vertical line","title":"vline"},{"location":"test-page/#src.lib.graphics-functions","text":"","title":"Functions"},{"location":"test-page/#src.lib.graphics.arc","text":"arc ( canvas , x , y , r , a0 , a1 , c ) Arc drawing function. Will draw a single pixel wide arc with a radius r centered at x, y from a0 to a1. Parameters: x ( int ) \u2013 X-coordinate of the arc's center. y ( int ) \u2013 Y-coordinate of the arc's center. r ( int ) \u2013 Radius of the arc. a0 ( float ) \u2013 Starting angle in degrees. a1 ( float ) \u2013 Ending angle in degrees. c ( int ) \u2013 color. Returns: Area \u2013 The bounding box of the arc.","title":"arc"},{"location":"test-page/#src.lib.graphics.blit","text":"blit ( canvas , source , x , y , key =- 1 , palette = None ) Blit a source to the canvas at the specified x, y location. Parameters: source ( FrameBuffer ) \u2013 Source FrameBuffer object. x ( int ) \u2013 X-coordinate to blit to. y ( int ) \u2013 Y-coordinate to blit to. key ( int , default: -1 ) \u2013 Key value for transparency (default: -1). palette ( Palette , default: None ) \u2013 Palette object for color translation (default: None). Returns: Area \u2013 The bounding box of the blitted area.","title":"blit"},{"location":"test-page/#src.lib.graphics.blit_rect","text":"blit_rect ( canvas , buf , x , y , w , h ) Blit a rectangular area from a buffer to the canvas. Uses the canvas's blit_rect method if available, otherwise writes directly to the buffer. Parameters: buf ( memoryview ) \u2013 Buffer to blit. Must already be byte-swapped if necessary. x ( int ) \u2013 X-coordinate to blit to. y ( int ) \u2013 Y-coordinate to blit to. w ( int ) \u2013 Width of the area to blit. h ( int ) \u2013 Height of the area to blit. Returns: Area \u2013 The bounding box of the blitted area.","title":"blit_rect"},{"location":"test-page/#src.lib.graphics.blit_transparent","text":"blit_transparent ( canvas , buf , x , y , w , h , key ) Blit a buffer with transparency. Parameters: buf ( memoryview ) \u2013 Buffer to blit. x ( int ) \u2013 X-coordinate to blit to. y ( int ) \u2013 Y-coordinate to blit to. w ( int ) \u2013 Width of the area to blit. h ( int ) \u2013 Height of the area to blit. key ( int ) \u2013 Key value for transparency. Returns: Area \u2013 The bounding box of the blitted area.","title":"blit_transparent"},{"location":"test-page/#src.lib.graphics.bmp_to_framebuffer","text":"bmp_to_framebuffer ( filename ) Convert a BMP file to a RGB565 FrameBuffer. First ensures planes is 1, bits per pixel is 16, and compression is 0. Parameters: filename ( str ) \u2013 Filename of the","title":"bmp_to_framebuffer"},{"location":"test-page/#src.lib.graphics.circle","text":"circle ( canvas , x0 , y0 , r , c , f = False ) Circle drawing function. Will draw a single pixel wide circle centered at x0, y0 and the specified r. Parameters: x0 ( int ) \u2013 Center x coordinate y0 ( int ) \u2013 Center y coordinate r ( int ) \u2013 Radius c ( int ) \u2013 Color f ( bool , default: False ) \u2013 Fill the circle (default: False) Returns: Area \u2013 The bounding box of the circle.","title":"circle"},{"location":"test-page/#src.lib.graphics.ellipse","text":"ellipse ( canvas , x0 , y0 , r1 , r2 , c , f = False , m = 15 , w = None , h = None ) Midpoint ellipse algorithm Draw an ellipse at the given location. Radii r1 and r2 define the geometry; equal values cause a circle to be drawn. The c parameter defines the color. The optional f parameter can be set to True to fill the ellipse. Otherwise just a one pixel outline is drawn. The optional m parameter enables drawing to be restricted to certain quadrants of the ellipse. The LS four bits determine which quadrants are to be drawn, with bit 0 specifying Q1, b1 Q2, b2 Q3 and b3 Q4. Quadrants are numbered counterclockwise with Q1 being top right. Parameters: x0 ( int ) \u2013 Center x coordinate y0 ( int ) \u2013 Center y coordinate r1 ( int ) \u2013 x radius r2 ( int ) \u2013 y radius c ( int ) \u2013 color f ( bool , default: False ) \u2013 Fill the ellipse (default: False) m ( int , default: 15 ) \u2013 Bitmask to determine which quadrants to draw (default: 0b1111) w ( int , default: None ) \u2013 Width of the ellipse (default: None) h ( int , default: None ) \u2013 Height of the ellipse (default: None) Returns: Area \u2013 The bounding box of the ellipse.","title":"ellipse"},{"location":"test-page/#src.lib.graphics.fill","text":"fill ( canvas , c ) Fill the entire canvas with a color. Uses the canvas's fill method if available, otherwise calls the fill_rect function. Parameters: c ( int ) \u2013 color. Returns: Area \u2013 The bounding box of the filled area.","title":"fill"},{"location":"test-page/#src.lib.graphics.fill_rect","text":"fill_rect ( canvas , x , y , w , h , c ) Filled rectangle drawing function. Draws a filled rectangle starting at x, y and extending w, h pixels. Uses the canvas's fill_rect method if available, otherwise calls the pixel function for each pixel. Parameters: x ( int ) \u2013 X-coordinate of the top-left corner of the rectangle. y ( int ) \u2013 Y-coordinate of the top-left corner of the rectangle. w ( int ) \u2013 Width of the rectangle. h ( int ) \u2013 Height of the rectangle. c ( int ) \u2013 color Returns: Area \u2013 The bounding box of the filled area.","title":"fill_rect"},{"location":"test-page/#src.lib.graphics.gradient_rect","text":"gradient_rect ( canvas , x , y , w , h , c1 , c2 = None , vertical = True ) Fill a rectangle with a gradient. Parameters: x ( int ) \u2013 X-coordinate of the top-left corner of the rectangle. y ( int ) \u2013 Y-coordinate of the top-left corner of the rectangle. w ( int ) \u2013 Width of the rectangle. h ( int ) \u2013 Height of the rectangle. c1 ( int ) \u2013 565 encoded color for the top or left edge. c2 ( int , default: None ) \u2013 565 encoded color for the bottom or right edge. If None or the same as c1, fill_rect will be called instead. vertical ( bool , default: True ) \u2013 If True, the gradient will be vertical. If False, the gradient will be horizontal. Returns: Area \u2013 The bounding box of the filled area.","title":"gradient_rect"},{"location":"test-page/#src.lib.graphics.hline","text":"hline ( canvas , x0 , y0 , w , c ) Horizontal line drawing function. Will draw a single pixel wide line. Parameters: x0 ( int ) \u2013 X-coordinate of the start of the line. y0 ( int ) \u2013 Y-coordinate of the start of the line. w ( int ) \u2013 Width of the line. c ( int ) \u2013 color. Returns: Area \u2013 The bounding box of the line.","title":"hline"},{"location":"test-page/#src.lib.graphics.line","text":"line ( canvas , x0 , y0 , x1 , y1 , c ) Line drawing function. Will draw a single pixel wide line starting at x0, y0 and ending at x1, y1. Parameters: x0 ( int ) \u2013 X-coordinate of the start of the line. y0 ( int ) \u2013 Y-coordinate of the start of the line. x1 ( int ) \u2013 X-coordinate of the end of the line. y1 ( int ) \u2013 Y-coordinate of the end of the line. c ( int ) \u2013 color. Returns: Area \u2013 The bounding box of the line.","title":"line"},{"location":"test-page/#src.lib.graphics.pbm_to_framebuffer","text":"pbm_to_framebuffer ( filename ) Convert a PBM file to a MONO_HLSB FrameBuffer Parameters: filename ( str ) \u2013 Filename of the PBM file","title":"pbm_to_framebuffer"},{"location":"test-page/#src.lib.graphics.pgm_to_framebuffer","text":"pgm_to_framebuffer ( filename ) Convert a PGM file to a GS2_HMSB, GS4_HMSB or GS8 FrameBuffer Parameters: filename ( str ) \u2013 Filename of the PGM file","title":"pgm_to_framebuffer"},{"location":"test-page/#src.lib.graphics.pixel","text":"pixel ( canvas , x , y , c ) Draw a single pixel at the specified x, y location. Uses the canvas's pixel method if available, otherwise writes directly to the buffer. Parameters: x ( int ) \u2013 X-coordinate of the pixel. y ( int ) \u2013 Y-coordinate of the pixel. c ( int ) \u2013 color. Returns: Area \u2013 The bounding box of the pixel.","title":"pixel"},{"location":"test-page/#src.lib.graphics.poly","text":"poly ( canvas , x , y , coords , c , f = False ) Given a list of coordinates, draw an arbitrary (convex or concave) closed polygon at the given x, y location using the given color. The coords must be specified as an array of integers, e.g. array('h', [x0, y0, x1, y1, ... xn, yn]) or a list or tuple of points, e.g. [(x0, y0), (x1, y1), ... (xn, yn)]. The optional f parameter can be set to True to fill the polygon. Otherwise, just a one-pixel outline is drawn. Parameters: x ( int ) \u2013 X-coordinate of the polygon's position. y ( int ) \u2013 Y-coordinate of the polygon's position. coords ( list ) \u2013 List of coordinates. c ( int ) \u2013 color. f ( bool , default: False ) \u2013 Fill the polygon (default: False). Returns: Area \u2013 The bounding box of the polygon.","title":"poly"},{"location":"test-page/#src.lib.graphics.polygon","text":"polygon ( canvas , points , x , y , color , angle = 0 , center_x = 0 , center_y = 0 , ) Draw a polygon on the canvas. Parameters: points ( list ) \u2013 List of points to draw. x ( int ) \u2013 X-coordinate of the polygon's position. y ( int ) \u2013 Y-coordinate of the polygon's position. color ( int ) \u2013 color. angle ( float , default: 0 ) \u2013 Rotation angle in radians (default: 0). center_x ( int , default: 0 ) \u2013 X-coordinate of the rotation center (default: 0). center_y ( int , default: 0 ) \u2013 Y-coordinate of the rotation center (default: 0). Raises: ValueError \u2013 If the polygon has less than 3 points. Returns: Area \u2013 The bounding box of the polygon.","title":"polygon"},{"location":"test-page/#src.lib.graphics.rect","text":"rect ( canvas , x0 , y0 , w , h , c , f = False ) Rectangle drawing function. Will draw a single pixel wide rectangle starting at x0, y0 and extending w, h pixels. Parameters: x0 ( int ) \u2013 X-coordinate of the top-left corner of the rectangle. y0 ( int ) \u2013 Y-coordinate of the top-left corner of the rectangle. w ( int ) \u2013 Width of the rectangle. h ( int ) \u2013 Height of the rectangle. c ( int ) \u2013 color. f ( bool , default: False ) \u2013 Fill the rectangle (default: False). Returns: Area \u2013 The bounding box of the rectangle.","title":"rect"},{"location":"test-page/#src.lib.graphics.round_rect","text":"round_rect ( canvas , x0 , y0 , w , h , r , c , f = False ) Rounded rectangle drawing function. Will draw a single pixel wide rounded rectangle starting at x0, y0 and extending w, h pixels with the specified radius. Parameters: x0 ( int ) \u2013 X-coordinate of the top-left corner of the rectangle. y0 ( int ) \u2013 Y-coordinate of the top-left corner of the rectangle. w ( int ) \u2013 Width of the rectangle. h ( int ) \u2013 Height of the rectangle. r ( int ) \u2013 Radius of the corners. c ( int ) \u2013 color. f ( bool , default: False ) \u2013 Fill the rectangle (default: False). Returns: Area \u2013 The bounding box of the rectangle.","title":"round_rect"},{"location":"test-page/#src.lib.graphics.text","text":"text ( * args , height = 8 , ** kwargs ) Selector to call the correct text function based on the height of the font. See text8, text14, and text16 for more information. Parameters: height ( int , default: 8 ) \u2013 The height of the font to use. Default is 8.","title":"text"},{"location":"test-page/#src.lib.graphics.text14","text":"text14 ( canvas , s , x , y , c = 1 , scale = 1 , inverted = False , font_data = None , ) Place text on the canvas with a 14 pixel high font. Breaks on to next line. Does not break on line going off canvas. Args: canvas (Canvas): The DisplayDriver, FrameBuffer, or other canvas-like object to draw on. s (str): The text to draw. x (int): The x position to start drawing the text. y (int): The y position to start drawing the text. c (int): The color to draw the text in. Default is 1. scale (int): The scale factor to draw the text at. Default is 1. inverted (bool): If True, draw the text inverted. Default is False. font_data (str | byterray): The path to the font .bin file or memoryview. Default is None. Returns: Area: The area that was drawn to.","title":"text14"},{"location":"test-page/#src.lib.graphics.text16","text":"text16 ( canvas , s , x , y , c = 1 , scale = 1 , inverted = False , font_data = None , ) Place text on the canvas with a 16 pixel high font. Breaks on to next line. Does not break on line going off canvas. Args: canvas (Canvas): The DisplayDriver, FrameBuffer, or other canvas-like object to draw on. s (str): The text to draw. x (int): The x position to start drawing the text. y (int): The y position to start drawing the text. c (int): The color to draw the text in. Default is 1. scale (int): The scale factor to draw the text at. Default is 1. inverted (bool): If True, draw the text inverted. Default is False. font_data (str | byterray): The path to the font .bin file or memoryview. Default is None. Returns: Area: The area that was drawn to.","title":"text16"},{"location":"test-page/#src.lib.graphics.text8","text":"text8 ( canvas , s , x , y , c = 1 , scale = 1 , inverted = False , font_data = None , ) Place text on the canvas with an 8 pixel high font. Breaks on to next line. Does not break on line going off canvas. Args: canvas (Canvas): The DisplayDriver, FrameBuffer, or other canvas-like object to draw on. s (str): The text to draw. x (int): The x position to start drawing the text. y (int): The y position to start drawing the text. c (int): The color to draw the text in. Default is 1. scale (int): The scale factor to draw the text at. Default is 1. inverted (bool): If True, draw the text inverted. Default is False. font_data (str | byterray): The path to the font .bin file or memoryview. Default is None. Returns: Area: The area that was drawn to.","title":"text8"},{"location":"test-page/#src.lib.graphics.triangle","text":"triangle ( canvas , x0 , y0 , x1 , y1 , x2 , y2 , c , f = False ) Triangle drawing function. Draws a single pixel wide triangle with vertices at (x0, y0), (x1, y1), and (x2, y2). Parameters: x0 ( int ) \u2013 X-coordinate of the first vertex. y0 ( int ) \u2013 Y-coordinate of the first vertex. x1 ( int ) \u2013 X-coordinate of the second vertex. y1 ( int ) \u2013 Y-coordinate of the second vertex. x2 ( int ) \u2013 X-coordinate of the third vertex. y2 ( int ) \u2013 Y-coordinate of the third vertex. c ( int ) \u2013 color. f ( bool , default: False ) \u2013 Fill the triangle (default: False). Returns: Area \u2013 The bounding box of the triangle.","title":"triangle"},{"location":"test-page/#src.lib.graphics.vline","text":"vline ( canvas , x0 , y0 , h , c ) Horizontal line drawing function. Will draw a single pixel wide line. Parameters: x0 ( int ) \u2013 X-coordinate of the start of the line. y0 ( int ) \u2013 Y-coordinate of the start of the line. h ( int ) \u2013 Height of the line. c ( int ) \u2013 color. Returns: Area \u2013 The bounding box of the line.","title":"vline"},{"location":"test-page/#src.lib.multimer--multimer","text":"Cross-platform Timer class for *Python. Enables using 'from multimer import Timer' on MicroPython on microcontrollers, on MicroPython on Unix (which doesn't have a machine.Timer) and CPython (ditto). _librt.py uses uses MicroPython ffi to connect to libc and librt, while _sdl2.py uses SDL2 on CPython to connect to libSDL2. No compatibility for CircuitPython yet. Returns None if the platform is not supported rather than raising an ImportError so that the client can handle the error more gracefully (e.g. by using if Timer is not None: ). Usage from multimer import Timer tim = Timer() tim.init(mode=Timer.PERIODIC, period=500, callback=lambda t: print(\".\")) .... tim.deinit()","title":"multimer"},{"location":"test-page/#src.lib.multimer-classes","text":"","title":"Classes"},{"location":"test-page/#src.lib.multimer-functions","text":"","title":"Functions"},{"location":"test-page/#src.lib.multimer.get_timer","text":"get_timer ( callback , period = 33 ) Creates and returns a timer to periodically call the callback function Parameters: callback ( function ) \u2013 The function to call periodically period ( int , default: 33 ) \u2013 The period in milliseconds, default is 33ms (30fps)","title":"get_timer"},{"location":"test-page/#src.lib.palettes--palettes","text":"","title":"palettes"},{"location":"test-page/#src.lib.palettes-classes","text":"","title":"Classes"},{"location":"test-page/#src.lib.palettes.MappedPalette","text":"A class to represent a color palette with a color map.","title":"MappedPalette"},{"location":"test-page/#src.lib.palettes.MappedPalette-functions","text":"","title":"Functions"},{"location":"test-page/#src.lib.palettes.MappedPalette.color_rgb","text":"color_rgb ( color ) color can be an 16-bit integer or a tuple, list or bytearray of length 2 or 3.","title":"color_rgb"},{"location":"test-page/#src.lib.palettes.Palette","text":"A class to represent a color palette.","title":"Palette"},{"location":"test-page/#src.lib.palettes.Palette-functions","text":"","title":"Functions"},{"location":"test-page/#src.lib.palettes.Palette.color_rgb","text":"color_rgb ( color ) color can be an 16-bit integer or a tuple, list or bytearray of length 2 or 3.","title":"color_rgb"},{"location":"reference/SUMMARY/","text":"board_config displaybuf displaysys busdisplay fbdisplay jndisplay pgdisplay psdisplay sdldisplay _sdl2_lib eventsys devices keys graphics multimer palettes cube material_design wheel path","title":"SUMMARY"},{"location":"reference/board_config/","text":"Combination board configuration for desktop, pyscript and jupyter notebook platforms. If you are running pydisplay on a microcontroller, you will need to get or create a board_config.py file that is specific to your hardware from: https://github.com/PyDevices/pydisplay/tree/main/board_configs","title":"board_config"},{"location":"reference/path/","text":"path.py To run this command when you launch Python, type the following, substituting 'python' with the name of your Python executable, such as 'python3' or 'micropython': python -i lib/path.py On microcontrollers, you may include it in your boot.py, main.py or code.py, whichever is appropriate: import lib.path Edit the 'directories' tuple to include the directories you want to add to the path. Only directories that already exist in the current working directory will be added to the path.","title":"path"},{"location":"reference/displaybuf/","text":"displaybuf \u00b6 FrameBuffer wrapper for using framebuf based GUIs with displaysys. Works with MicroPython Nano-GUI, Micro-GUI and MicroPython-Touch from Peter Hinch, but may also be used without them. Usage 'color_setup.py' from displaybuf import DisplayBuffer as SSD from board_config import display_drv format = SSD.RGB565 # or .GS8 or .GS4_HMSB ssd = SSD(display_drv, format) 'main.py' from color_setup import ssd Classes \u00b6 DisplayBuffer \u00b6 DisplayBuffer: A class to wrap an displaysys driver and provide a framebuf compatible interface to it. It provides a show() method to copy the framebuf to the display. The show() method is optimized for the format. The format must be one of the following: DisplayBuffer.RGB565 DisplayBuffer.GS8 DisplayBuffer.GS4_HMSB Functions \u00b6 color staticmethod \u00b6 color ( r , g , b , idx = None ) Get an RGB565 or RGB332 value for a color and optionally register it in the display's LUT. This is a convenience function for using this framework WITHOUT Nano-GUI or Micro-GUI. Those packages have their own methods of registering colors. Parameters: r ( int ) \u2013 Red component (0-255) g ( int ) \u2013 Green component (0-255) b ( int ) \u2013 Blue component (0-255) idx ( int , default: None ) \u2013 Optional index to register the color in the display's LUT (0-15); ignored if the display doesn't use a LUT in its current format Raises: ValueError \u2013 If 16 colors have already been registered or if the index is out of range Returns: int \u2013 RGB565 color value in RG565 format; RGB332 color value in GS8 format; the index of the registered color in the LUT in GS4_HMSB format","title":"displaybuf"},{"location":"reference/displaybuf/#displaybuf--displaybuf","text":"FrameBuffer wrapper for using framebuf based GUIs with displaysys. Works with MicroPython Nano-GUI, Micro-GUI and MicroPython-Touch from Peter Hinch, but may also be used without them. Usage 'color_setup.py' from displaybuf import DisplayBuffer as SSD from board_config import display_drv format = SSD.RGB565 # or .GS8 or .GS4_HMSB ssd = SSD(display_drv, format) 'main.py' from color_setup import ssd","title":"displaybuf"},{"location":"reference/displaybuf/#displaybuf-classes","text":"","title":"Classes"},{"location":"reference/displaybuf/#displaybuf.DisplayBuffer","text":"DisplayBuffer: A class to wrap an displaysys driver and provide a framebuf compatible interface to it. It provides a show() method to copy the framebuf to the display. The show() method is optimized for the format. The format must be one of the following: DisplayBuffer.RGB565 DisplayBuffer.GS8 DisplayBuffer.GS4_HMSB","title":"DisplayBuffer"},{"location":"reference/displaybuf/#displaybuf.DisplayBuffer-functions","text":"","title":"Functions"},{"location":"reference/displaybuf/#displaybuf.DisplayBuffer.color","text":"color ( r , g , b , idx = None ) Get an RGB565 or RGB332 value for a color and optionally register it in the display's LUT. This is a convenience function for using this framework WITHOUT Nano-GUI or Micro-GUI. Those packages have their own methods of registering colors. Parameters: r ( int ) \u2013 Red component (0-255) g ( int ) \u2013 Green component (0-255) b ( int ) \u2013 Blue component (0-255) idx ( int , default: None ) \u2013 Optional index to register the color in the display's LUT (0-15); ignored if the display doesn't use a LUT in its current format Raises: ValueError \u2013 If 16 colors have already been registered or if the index is out of range Returns: int \u2013 RGB565 color value in RG565 format; RGB332 color value in GS8 format; the index of the registered color in the LUT in GS4_HMSB format","title":"color"},{"location":"reference/displaysys/","text":"displaysys \u00b6 A collection of classes and functions for working with displays and input devices in *Python. The goal is to provide a common API for working with displays and input devices across different platforms including MicroPython, CircuitPython and CPython. It works on microcontrollers, desktops, web browsers and Jupyter notebooks. Classes \u00b6 DisplayDriver \u00b6 Attributes \u00b6 bfa property \u00b6 bfa The bottom fixed area set by set_vscroll or vscrdef. Returns: int \u2013 The bottom fixed area. bfa_area property \u00b6 bfa_area The bottom fixed area as an Area object. Returns: tuple \u2013 The bottom fixed area. brightness property writable \u00b6 brightness The brightness of the display. height property \u00b6 height The height of the display in pixels. power property writable \u00b6 power The power state of the display. requires_byteswap property \u00b6 requires_byteswap Whether the display requires byte swapping. rotation property writable \u00b6 rotation The rotation of the display. tfa property \u00b6 tfa The top fixed area set by set_vscroll or vscrdef. Returns: int \u2013 The top fixed area. tfa_area property \u00b6 tfa_area The top fixed area as an Area object. Returns: tuple \u2013 The top fixed area. touch_device property writable \u00b6 touch_device The touch device. vsa property \u00b6 vsa The vertical scroll area set by set_vscroll or vscrdef. Returns: int \u2013 The vertical scroll area. vsa_area property \u00b6 vsa_area The vertical scroll area as an Area object. Returns: tuple \u2013 The vertical scroll area. vscroll property writable \u00b6 vscroll The vertical scroll position relative to the top fixed area. Returns: int \u2013 The vertical scroll position. width property \u00b6 width The width of the display in pixels. Functions \u00b6 blit_transparent \u00b6 blit_transparent ( buf , x , y , w , h , key ) Blit a buffer with transparency. Parameters: buf ( memoryview ) \u2013 The buffer to blit. x ( int ) \u2013 The x coordinate to blit to. y ( int ) \u2013 The y coordinate to blit to. w ( int ) \u2013 The width to blit. h ( int ) \u2013 The height to blit. key ( int ) \u2013 The color key to use for transparency. Returns: tuple \u2013 The x, y, w, h coordinates of the blitted area. deinit \u00b6 deinit () Deinitialize the display. disable_auto_byteswap \u00b6 disable_auto_byteswap ( value ) Disable byte swapping in the display driver. If self.requires_byteswap and the guest application is capable of byte swapping color data check to see if byte swapping can be disabled. If so, disable it. Usage # If byte swapping is required and the display driver is capable of having byte swapping disabled, # disable it and set a flag so we can swap the color bytes as they are created. if display_drv.requires_byteswap: needs_swap = display_drv.disable_auto_byteswap(True) else: needs_swap = False Parameters: value ( bool ) \u2013 Whether to disable byte swapping. Returns: bool \u2013 Whether byte swapping was disabled successfully. fill \u00b6 fill ( color ) Fill the display with a color. Parameters: color ( int ) \u2013 The color to fill the display with. hard_reset \u00b6 hard_reset () Perform a hardware reset of the display. Should be overridden by the subclass. invert_colors \u00b6 invert_colors ( value ) Invert the colors of the display. Should be overridden by the subclass. Parameters: value ( bool ) \u2013 True to invert the colors, False to restore the colors. reset \u00b6 reset () Perform a reset of the display. Should be overridden by the subclass. scroll \u00b6 scroll ( dx , dy ) Scroll the display. Parameters: dx ( int ) \u2013 The number of pixels to scroll horizontally. dy ( int ) \u2013 The number of pixels to scroll vertically. set_vscroll \u00b6 set_vscroll ( tfa = 0 , bfa = 0 ) Set the vertical scroll definition and move the vertical scroll to the top. Parameters: tfa ( int , default: 0 ) \u2013 The top fixed area. bfa ( int , default: 0 ) \u2013 The bottom fixed area. show \u00b6 show ( * args , ** kwargs ) Show the display. Base class method does nothing. May be overridden by subclasses. sleep_mode \u00b6 sleep_mode ( value ) Set the sleep mode of the display. Should be overridden by the subclass. Parameters: value ( bool ) \u2013 True to enter sleep mode, False to exit sleep mode. soft_reset \u00b6 soft_reset () Perform a software reset of the display. Should be overridden by the subclass. translate_point \u00b6 translate_point ( point ) Translate a point from real coordinates to scrolled coordinates. Useful for touch events. Parameters: point ( tuple ) \u2013 The x and y coordinates to translate. Returns: tuple \u2013 The translated x and y coordinates. vscrdef \u00b6 vscrdef ( tfa , vsa , bfa ) Set the vertical scroll definition. Should be overridden by the subclass and called as super().vscrdef(tfa, vsa, bfa). Parameters: tfa ( int ) \u2013 The top fixed area. vsa ( int ) \u2013 The vertical scroll area. bfa ( int ) \u2013 The bottom fixed area. vscsad \u00b6 vscsad ( vssa = None ) Set or get the vertical scroll start address. Should be overridden by the subclass and called as super().vscsad(y). Parameters: vssa ( int , default: None ) \u2013 The vertical scroll start address. Returns: int \u2013 The vertical scroll start address. Functions \u00b6 alloc_buffer \u00b6 alloc_buffer ( size ) Create a new buffer of the specified size. In the future, this function may be modified to use port-specific memory allocation such as ESP32's heap_caps_malloc. Parameters: size ( int ) \u2013 The size of the buffer to create. Returns: memoryview \u2013 The new buffer. color565 \u00b6 color565 ( r , g = None , b = None ) Convert RGB values to a 16-bit color value. Parameters: r ( ( int , tuple or list ) ) \u2013 The red value or a tuple or list of RGB values. g ( int , default: None ) \u2013 The green value. b ( int , default: None ) \u2013 The blue value. Returns: int \u2013 The 16-bit color value color888 \u00b6 color888 ( r , g , b ) Convert RGB values to a 24-bit color value. Parameters: r ( int ) \u2013 The red value. g ( int ) \u2013 The green value. b ( int ) \u2013 The blue value. Returns: int \u2013 The 24-bit color value. color_rgb \u00b6 color_rgb ( color ) color can be an 16-bit integer or a tuple, list or bytearray of length 2 or 3.","title":"displaysys"},{"location":"reference/displaysys/#displaysys--displaysys","text":"A collection of classes and functions for working with displays and input devices in *Python. The goal is to provide a common API for working with displays and input devices across different platforms including MicroPython, CircuitPython and CPython. It works on microcontrollers, desktops, web browsers and Jupyter notebooks.","title":"displaysys"},{"location":"reference/displaysys/#displaysys-classes","text":"","title":"Classes"},{"location":"reference/displaysys/#displaysys.DisplayDriver","text":"","title":"DisplayDriver"},{"location":"reference/displaysys/#displaysys.DisplayDriver-attributes","text":"","title":"Attributes"},{"location":"reference/displaysys/#displaysys.DisplayDriver.bfa","text":"bfa The bottom fixed area set by set_vscroll or vscrdef. Returns: int \u2013 The bottom fixed area.","title":"bfa"},{"location":"reference/displaysys/#displaysys.DisplayDriver.bfa_area","text":"bfa_area The bottom fixed area as an Area object. Returns: tuple \u2013 The bottom fixed area.","title":"bfa_area"},{"location":"reference/displaysys/#displaysys.DisplayDriver.brightness","text":"brightness The brightness of the display.","title":"brightness"},{"location":"reference/displaysys/#displaysys.DisplayDriver.height","text":"height The height of the display in pixels.","title":"height"},{"location":"reference/displaysys/#displaysys.DisplayDriver.power","text":"power The power state of the display.","title":"power"},{"location":"reference/displaysys/#displaysys.DisplayDriver.requires_byteswap","text":"requires_byteswap Whether the display requires byte swapping.","title":"requires_byteswap"},{"location":"reference/displaysys/#displaysys.DisplayDriver.rotation","text":"rotation The rotation of the display.","title":"rotation"},{"location":"reference/displaysys/#displaysys.DisplayDriver.tfa","text":"tfa The top fixed area set by set_vscroll or vscrdef. Returns: int \u2013 The top fixed area.","title":"tfa"},{"location":"reference/displaysys/#displaysys.DisplayDriver.tfa_area","text":"tfa_area The top fixed area as an Area object. Returns: tuple \u2013 The top fixed area.","title":"tfa_area"},{"location":"reference/displaysys/#displaysys.DisplayDriver.touch_device","text":"touch_device The touch device.","title":"touch_device"},{"location":"reference/displaysys/#displaysys.DisplayDriver.vsa","text":"vsa The vertical scroll area set by set_vscroll or vscrdef. Returns: int \u2013 The vertical scroll area.","title":"vsa"},{"location":"reference/displaysys/#displaysys.DisplayDriver.vsa_area","text":"vsa_area The vertical scroll area as an Area object. Returns: tuple \u2013 The vertical scroll area.","title":"vsa_area"},{"location":"reference/displaysys/#displaysys.DisplayDriver.vscroll","text":"vscroll The vertical scroll position relative to the top fixed area. Returns: int \u2013 The vertical scroll position.","title":"vscroll"},{"location":"reference/displaysys/#displaysys.DisplayDriver.width","text":"width The width of the display in pixels.","title":"width"},{"location":"reference/displaysys/#displaysys.DisplayDriver-functions","text":"","title":"Functions"},{"location":"reference/displaysys/#displaysys.DisplayDriver.blit_transparent","text":"blit_transparent ( buf , x , y , w , h , key ) Blit a buffer with transparency. Parameters: buf ( memoryview ) \u2013 The buffer to blit. x ( int ) \u2013 The x coordinate to blit to. y ( int ) \u2013 The y coordinate to blit to. w ( int ) \u2013 The width to blit. h ( int ) \u2013 The height to blit. key ( int ) \u2013 The color key to use for transparency. Returns: tuple \u2013 The x, y, w, h coordinates of the blitted area.","title":"blit_transparent"},{"location":"reference/displaysys/#displaysys.DisplayDriver.deinit","text":"deinit () Deinitialize the display.","title":"deinit"},{"location":"reference/displaysys/#displaysys.DisplayDriver.disable_auto_byteswap","text":"disable_auto_byteswap ( value ) Disable byte swapping in the display driver. If self.requires_byteswap and the guest application is capable of byte swapping color data check to see if byte swapping can be disabled. If so, disable it. Usage # If byte swapping is required and the display driver is capable of having byte swapping disabled, # disable it and set a flag so we can swap the color bytes as they are created. if display_drv.requires_byteswap: needs_swap = display_drv.disable_auto_byteswap(True) else: needs_swap = False Parameters: value ( bool ) \u2013 Whether to disable byte swapping. Returns: bool \u2013 Whether byte swapping was disabled successfully.","title":"disable_auto_byteswap"},{"location":"reference/displaysys/#displaysys.DisplayDriver.fill","text":"fill ( color ) Fill the display with a color. Parameters: color ( int ) \u2013 The color to fill the display with.","title":"fill"},{"location":"reference/displaysys/#displaysys.DisplayDriver.hard_reset","text":"hard_reset () Perform a hardware reset of the display. Should be overridden by the subclass.","title":"hard_reset"},{"location":"reference/displaysys/#displaysys.DisplayDriver.invert_colors","text":"invert_colors ( value ) Invert the colors of the display. Should be overridden by the subclass. Parameters: value ( bool ) \u2013 True to invert the colors, False to restore the colors.","title":"invert_colors"},{"location":"reference/displaysys/#displaysys.DisplayDriver.reset","text":"reset () Perform a reset of the display. Should be overridden by the subclass.","title":"reset"},{"location":"reference/displaysys/#displaysys.DisplayDriver.scroll","text":"scroll ( dx , dy ) Scroll the display. Parameters: dx ( int ) \u2013 The number of pixels to scroll horizontally. dy ( int ) \u2013 The number of pixels to scroll vertically.","title":"scroll"},{"location":"reference/displaysys/#displaysys.DisplayDriver.set_vscroll","text":"set_vscroll ( tfa = 0 , bfa = 0 ) Set the vertical scroll definition and move the vertical scroll to the top. Parameters: tfa ( int , default: 0 ) \u2013 The top fixed area. bfa ( int , default: 0 ) \u2013 The bottom fixed area.","title":"set_vscroll"},{"location":"reference/displaysys/#displaysys.DisplayDriver.show","text":"show ( * args , ** kwargs ) Show the display. Base class method does nothing. May be overridden by subclasses.","title":"show"},{"location":"reference/displaysys/#displaysys.DisplayDriver.sleep_mode","text":"sleep_mode ( value ) Set the sleep mode of the display. Should be overridden by the subclass. Parameters: value ( bool ) \u2013 True to enter sleep mode, False to exit sleep mode.","title":"sleep_mode"},{"location":"reference/displaysys/#displaysys.DisplayDriver.soft_reset","text":"soft_reset () Perform a software reset of the display. Should be overridden by the subclass.","title":"soft_reset"},{"location":"reference/displaysys/#displaysys.DisplayDriver.translate_point","text":"translate_point ( point ) Translate a point from real coordinates to scrolled coordinates. Useful for touch events. Parameters: point ( tuple ) \u2013 The x and y coordinates to translate. Returns: tuple \u2013 The translated x and y coordinates.","title":"translate_point"},{"location":"reference/displaysys/#displaysys.DisplayDriver.vscrdef","text":"vscrdef ( tfa , vsa , bfa ) Set the vertical scroll definition. Should be overridden by the subclass and called as super().vscrdef(tfa, vsa, bfa). Parameters: tfa ( int ) \u2013 The top fixed area. vsa ( int ) \u2013 The vertical scroll area. bfa ( int ) \u2013 The bottom fixed area.","title":"vscrdef"},{"location":"reference/displaysys/#displaysys.DisplayDriver.vscsad","text":"vscsad ( vssa = None ) Set or get the vertical scroll start address. Should be overridden by the subclass and called as super().vscsad(y). Parameters: vssa ( int , default: None ) \u2013 The vertical scroll start address. Returns: int \u2013 The vertical scroll start address.","title":"vscsad"},{"location":"reference/displaysys/#displaysys-functions","text":"","title":"Functions"},{"location":"reference/displaysys/#displaysys.alloc_buffer","text":"alloc_buffer ( size ) Create a new buffer of the specified size. In the future, this function may be modified to use port-specific memory allocation such as ESP32's heap_caps_malloc. Parameters: size ( int ) \u2013 The size of the buffer to create. Returns: memoryview \u2013 The new buffer.","title":"alloc_buffer"},{"location":"reference/displaysys/#displaysys.color565","text":"color565 ( r , g = None , b = None ) Convert RGB values to a 16-bit color value. Parameters: r ( ( int , tuple or list ) ) \u2013 The red value or a tuple or list of RGB values. g ( int , default: None ) \u2013 The green value. b ( int , default: None ) \u2013 The blue value. Returns: int \u2013 The 16-bit color value","title":"color565"},{"location":"reference/displaysys/#displaysys.color888","text":"color888 ( r , g , b ) Convert RGB values to a 24-bit color value. Parameters: r ( int ) \u2013 The red value. g ( int ) \u2013 The green value. b ( int ) \u2013 The blue value. Returns: int \u2013 The 24-bit color value.","title":"color888"},{"location":"reference/displaysys/#displaysys.color_rgb","text":"color_rgb ( color ) color can be an 16-bit integer or a tuple, list or bytearray of length 2 or 3.","title":"color_rgb"},{"location":"reference/displaysys/busdisplay/","text":"displaysys.busdisplay Classes \u00b6 BusDisplay \u00b6 Base class for displays connected via a bus. Parameters: display_bus ( ( SPIBus , I80Bus ) ) \u2013 The bus the display is connected to. init_sequence ( ( bytes , list ) , default: None ) \u2013 The initialization sequence for the display. width ( int , default: 0 ) \u2013 The width of the display in pixels. height ( int , default: 0 ) \u2013 The height of the display in pixels. colstart ( int , default: 0 ) \u2013 The column start address for the display. rowstart ( int , default: 0 ) \u2013 The row start address for the display. rotation ( int , default: 0 ) \u2013 The rotation of the display in degrees. mirrored ( bool , default: False ) \u2013 If True, the display is mirrored. color_depth ( int , default: 16 ) \u2013 The color depth of the display in bits. bgr ( bool , default: False ) \u2013 If True, the display uses BGR color order. invert ( bool , default: False ) \u2013 If True, the display colors are inverted. reverse_bytes_in_word ( bool , default: False ) \u2013 If True, the bytes in 16-bit colors are reversed. brightness ( float , default: 1.0 ) \u2013 The brightness of the display as a float between 0.0 and 1.0. backlight_pin ( ( int , Pin ) , default: None ) \u2013 The pin the display backlight is connected to. backlight_on_high ( bool , default: True ) \u2013 If True, the backlight is on when the pin is high. reset_pin ( ( int , Pin ) , default: None ) \u2013 The pin the display reset is connected to. reset_high ( bool , default: True ) \u2013 If True, the reset pin is high. power_pin ( ( int , Pin ) , default: None ) \u2013 The pin the display power is connected to. power_on_high ( bool , default: True ) \u2013 If True, the power pin is high. set_column_command ( int , default: _CASET ) \u2013 The command to set the column address. set_row_command ( int , default: _RASET ) \u2013 The command to set the row address. write_ram_command ( int , default: _RAMWR ) \u2013 The command to write to the display RAM. brightness_command ( int , default: None ) \u2013 The command to set the display brightness. data_as_commands ( bool , default: False ) \u2013 If True, data is sent as commands. single_byte_bounds ( bool , default: False ) \u2013 If True, single byte bounds are used. Attributes: display_bus ( ( SPIBus , I80Bus ) ) \u2013 The bus the display is connected to. color_depth ( int ) \u2013 The color depth of the display in bits. bgr ( bool ) \u2013 If True, the display uses BGR color order. rotation_table ( tuple ) \u2013 The rotation table for the display. Attributes \u00b6 bfa property \u00b6 bfa The bottom fixed area set by set_vscroll or vscrdef. Returns: int \u2013 The bottom fixed area. bfa_area property \u00b6 bfa_area The bottom fixed area as an Area object. Returns: tuple \u2013 The bottom fixed area. brightness property writable \u00b6 brightness The brightness of the display. colstart property \u00b6 colstart The offset in pixels to the first column of the visible display. height property \u00b6 height The height of the display in pixels. power property writable \u00b6 power The power state of the display. Returns: bool ( bool ) \u2013 The power state of the display. requires_byteswap property \u00b6 requires_byteswap Whether the display requires byte swapping. rotation property writable \u00b6 rotation The rotation of the display. rowstart property \u00b6 rowstart The offset in pixels to the first row of the visible display. tfa property \u00b6 tfa The top fixed area set by set_vscroll or vscrdef. Returns: int \u2013 The top fixed area. tfa_area property \u00b6 tfa_area The top fixed area as an Area object. Returns: tuple \u2013 The top fixed area. touch_device property writable \u00b6 touch_device The touch device. vsa property \u00b6 vsa The vertical scroll area set by set_vscroll or vscrdef. Returns: int \u2013 The vertical scroll area. vsa_area property \u00b6 vsa_area The vertical scroll area as an Area object. Returns: tuple \u2013 The vertical scroll area. vscroll property writable \u00b6 vscroll The vertical scroll position relative to the top fixed area. Returns: int \u2013 The vertical scroll position. width property \u00b6 width The width of the display in pixels. Functions \u00b6 blit_rect \u00b6 blit_rect ( buf , x , y , w , h ) Blit a buffer to the display. This method takes a buffer of pixel data and writes it to a specified rectangular area of the display. The top-left corner of the rectangle is specified by the x and y parameters, and the size of the rectangle is specified by the width and height parameters. Parameters: buf ( memoryview ) \u2013 The buffer containing the pixel data. x ( int ) \u2013 The x-coordinate of the top-left corner of the rectangle. y ( int ) \u2013 The y-coordinate of the top-left corner of the rectangle. w ( int ) \u2013 The width of the rectangle in pixels. h ( int ) \u2013 The height of the rectangle in pixels. Returns: tuple \u2013 A tuple containing the x, y, width, and height of the rectangle. blit_transparent \u00b6 blit_transparent ( buf , x , y , w , h , key ) Blit a buffer with transparency. Parameters: buf ( memoryview ) \u2013 The buffer to blit. x ( int ) \u2013 The x coordinate to blit to. y ( int ) \u2013 The y coordinate to blit to. w ( int ) \u2013 The width to blit. h ( int ) \u2013 The height to blit. key ( int ) \u2013 The color key to use for transparency. Returns: tuple \u2013 The x, y, w, h coordinates of the blitted area. deinit \u00b6 deinit () Deinitialize the display. disable_auto_byteswap \u00b6 disable_auto_byteswap ( value ) Disable byte swapping in the display driver. If self.requires_byteswap and the guest application is capable of byte swapping color data check to see if byte swapping can be disabled. If so, disable it. Usage # If byte swapping is required and the display driver is capable of having byte swapping disabled, # disable it and set a flag so we can swap the color bytes as they are created. if display_drv.requires_byteswap: needs_swap = display_drv.disable_auto_byteswap(True) else: needs_swap = False Parameters: value ( bool ) \u2013 Whether to disable byte swapping. Returns: bool \u2013 Whether byte swapping was disabled successfully. fill \u00b6 fill ( color ) Fill the display with a color. Parameters: color ( int ) \u2013 The color to fill the display with. fill_rect \u00b6 fill_rect ( x , y , w , h , c ) Draw a rectangle at the given location, size and filled with color. This method draws a filled rectangle on the display. The top-left corner of the rectangle is specified by the x and y parameters, and the size of the rectangle is specified by the width and height parameters. The rectangle is filled with the specified color. Parameters: x ( int ) \u2013 The x-coordinate of the top-left corner of the rectangle. y ( int ) \u2013 The y-coordinate of the top-left corner of the rectangle. w ( int ) \u2013 The width of the rectangle in pixels. h ( int ) \u2013 The height of the rectangle in pixels. c ( int ) \u2013 The color of the rectangle. Returns: tuple \u2013 A tuple containing the x, y, width, and height of the rectangle. hard_reset \u00b6 hard_reset () Hard reset display. init \u00b6 init () Post initialization tasks. This method may be overridden by subclasses to perform any post initialization. If it is overridden, it must call super().init() or set self._initialized = True. invert_colors \u00b6 invert_colors ( value ) Invert the colors of the display. Parameters: value ( bool ) \u2013 If True, invert the colors of the display. pixel \u00b6 pixel ( x , y , c ) Set a pixel on the display. Parameters: x ( int ) \u2013 The x-coordinate of the pixel. y ( int ) \u2013 The y-coordinate of the pixel. c ( int ) \u2013 The color of the pixel. Returns: tuple \u2013 A tuple containing the x, y, width, and height of the pixel. reset \u00b6 reset () Reset display. This method resets the display. If the display has a reset pin, it is reset using the reset pin. Otherwise, the display is reset using the software reset command. scroll \u00b6 scroll ( dx , dy ) Scroll the display. Parameters: dx ( int ) \u2013 The number of pixels to scroll horizontally. dy ( int ) \u2013 The number of pixels to scroll vertically. set_vscroll \u00b6 set_vscroll ( tfa = 0 , bfa = 0 ) Set the vertical scroll definition and move the vertical scroll to the top. Parameters: tfa ( int , default: 0 ) \u2013 The top fixed area. bfa ( int , default: 0 ) \u2013 The bottom fixed area. show \u00b6 show ( * args , ** kwargs ) Show the display. Base class method does nothing. May be overridden by subclasses. sleep_mode \u00b6 sleep_mode ( value ) Enable or disable display sleep mode. Parameters: value ( bool ) \u2013 If True, enable sleep mode. If False, disable sleep mode. soft_reset \u00b6 soft_reset () Soft reset display. translate_point \u00b6 translate_point ( point ) Translate a point from real coordinates to scrolled coordinates. Useful for touch events. Parameters: point ( tuple ) \u2013 The x and y coordinates to translate. Returns: tuple \u2013 The translated x and y coordinates. vscrdef \u00b6 vscrdef ( tfa , vsa , bfa ) Set Vertical Scrolling Definition. To scroll a 135x240 display these values should be 40, 240, 40. There are 40 lines above the display that are not shown followed by 240 lines that are shown followed by 40 more lines that are not shown. You could write to these areas off display and scroll them into view by changing the TFA, VSA and BFA values. Parameters: tfa ( int ) \u2013 Top Fixed Area. vsa ( int ) \u2013 Vertical Scrolling Area. bfa ( int ) \u2013 Bottom Fixed Area. vscsad \u00b6 vscsad ( vssa = None ) Set the vertical scroll start address. Parameters: vssa ( ( int , None) , default: None ) \u2013 The vertical scroll start address. Returns: int ( int ) \u2013 The vertical scroll start address.","title":"busdisplay"},{"location":"reference/displaysys/busdisplay/#displaysys.busdisplay-classes","text":"","title":"Classes"},{"location":"reference/displaysys/busdisplay/#displaysys.busdisplay.BusDisplay","text":"Base class for displays connected via a bus. Parameters: display_bus ( ( SPIBus , I80Bus ) ) \u2013 The bus the display is connected to. init_sequence ( ( bytes , list ) , default: None ) \u2013 The initialization sequence for the display. width ( int , default: 0 ) \u2013 The width of the display in pixels. height ( int , default: 0 ) \u2013 The height of the display in pixels. colstart ( int , default: 0 ) \u2013 The column start address for the display. rowstart ( int , default: 0 ) \u2013 The row start address for the display. rotation ( int , default: 0 ) \u2013 The rotation of the display in degrees. mirrored ( bool , default: False ) \u2013 If True, the display is mirrored. color_depth ( int , default: 16 ) \u2013 The color depth of the display in bits. bgr ( bool , default: False ) \u2013 If True, the display uses BGR color order. invert ( bool , default: False ) \u2013 If True, the display colors are inverted. reverse_bytes_in_word ( bool , default: False ) \u2013 If True, the bytes in 16-bit colors are reversed. brightness ( float , default: 1.0 ) \u2013 The brightness of the display as a float between 0.0 and 1.0. backlight_pin ( ( int , Pin ) , default: None ) \u2013 The pin the display backlight is connected to. backlight_on_high ( bool , default: True ) \u2013 If True, the backlight is on when the pin is high. reset_pin ( ( int , Pin ) , default: None ) \u2013 The pin the display reset is connected to. reset_high ( bool , default: True ) \u2013 If True, the reset pin is high. power_pin ( ( int , Pin ) , default: None ) \u2013 The pin the display power is connected to. power_on_high ( bool , default: True ) \u2013 If True, the power pin is high. set_column_command ( int , default: _CASET ) \u2013 The command to set the column address. set_row_command ( int , default: _RASET ) \u2013 The command to set the row address. write_ram_command ( int , default: _RAMWR ) \u2013 The command to write to the display RAM. brightness_command ( int , default: None ) \u2013 The command to set the display brightness. data_as_commands ( bool , default: False ) \u2013 If True, data is sent as commands. single_byte_bounds ( bool , default: False ) \u2013 If True, single byte bounds are used. Attributes: display_bus ( ( SPIBus , I80Bus ) ) \u2013 The bus the display is connected to. color_depth ( int ) \u2013 The color depth of the display in bits. bgr ( bool ) \u2013 If True, the display uses BGR color order. rotation_table ( tuple ) \u2013 The rotation table for the display.","title":"BusDisplay"},{"location":"reference/displaysys/busdisplay/#displaysys.busdisplay.BusDisplay-attributes","text":"","title":"Attributes"},{"location":"reference/displaysys/busdisplay/#displaysys.busdisplay.BusDisplay.bfa","text":"bfa The bottom fixed area set by set_vscroll or vscrdef. Returns: int \u2013 The bottom fixed area.","title":"bfa"},{"location":"reference/displaysys/busdisplay/#displaysys.busdisplay.BusDisplay.bfa_area","text":"bfa_area The bottom fixed area as an Area object. Returns: tuple \u2013 The bottom fixed area.","title":"bfa_area"},{"location":"reference/displaysys/busdisplay/#displaysys.busdisplay.BusDisplay.brightness","text":"brightness The brightness of the display.","title":"brightness"},{"location":"reference/displaysys/busdisplay/#displaysys.busdisplay.BusDisplay.colstart","text":"colstart The offset in pixels to the first column of the visible display.","title":"colstart"},{"location":"reference/displaysys/busdisplay/#displaysys.busdisplay.BusDisplay.height","text":"height The height of the display in pixels.","title":"height"},{"location":"reference/displaysys/busdisplay/#displaysys.busdisplay.BusDisplay.power","text":"power The power state of the display. Returns: bool ( bool ) \u2013 The power state of the display.","title":"power"},{"location":"reference/displaysys/busdisplay/#displaysys.busdisplay.BusDisplay.requires_byteswap","text":"requires_byteswap Whether the display requires byte swapping.","title":"requires_byteswap"},{"location":"reference/displaysys/busdisplay/#displaysys.busdisplay.BusDisplay.rotation","text":"rotation The rotation of the display.","title":"rotation"},{"location":"reference/displaysys/busdisplay/#displaysys.busdisplay.BusDisplay.rowstart","text":"rowstart The offset in pixels to the first row of the visible display.","title":"rowstart"},{"location":"reference/displaysys/busdisplay/#displaysys.busdisplay.BusDisplay.tfa","text":"tfa The top fixed area set by set_vscroll or vscrdef. Returns: int \u2013 The top fixed area.","title":"tfa"},{"location":"reference/displaysys/busdisplay/#displaysys.busdisplay.BusDisplay.tfa_area","text":"tfa_area The top fixed area as an Area object. Returns: tuple \u2013 The top fixed area.","title":"tfa_area"},{"location":"reference/displaysys/busdisplay/#displaysys.busdisplay.BusDisplay.touch_device","text":"touch_device The touch device.","title":"touch_device"},{"location":"reference/displaysys/busdisplay/#displaysys.busdisplay.BusDisplay.vsa","text":"vsa The vertical scroll area set by set_vscroll or vscrdef. Returns: int \u2013 The vertical scroll area.","title":"vsa"},{"location":"reference/displaysys/busdisplay/#displaysys.busdisplay.BusDisplay.vsa_area","text":"vsa_area The vertical scroll area as an Area object. Returns: tuple \u2013 The vertical scroll area.","title":"vsa_area"},{"location":"reference/displaysys/busdisplay/#displaysys.busdisplay.BusDisplay.vscroll","text":"vscroll The vertical scroll position relative to the top fixed area. Returns: int \u2013 The vertical scroll position.","title":"vscroll"},{"location":"reference/displaysys/busdisplay/#displaysys.busdisplay.BusDisplay.width","text":"width The width of the display in pixels.","title":"width"},{"location":"reference/displaysys/busdisplay/#displaysys.busdisplay.BusDisplay-functions","text":"","title":"Functions"},{"location":"reference/displaysys/busdisplay/#displaysys.busdisplay.BusDisplay.blit_rect","text":"blit_rect ( buf , x , y , w , h ) Blit a buffer to the display. This method takes a buffer of pixel data and writes it to a specified rectangular area of the display. The top-left corner of the rectangle is specified by the x and y parameters, and the size of the rectangle is specified by the width and height parameters. Parameters: buf ( memoryview ) \u2013 The buffer containing the pixel data. x ( int ) \u2013 The x-coordinate of the top-left corner of the rectangle. y ( int ) \u2013 The y-coordinate of the top-left corner of the rectangle. w ( int ) \u2013 The width of the rectangle in pixels. h ( int ) \u2013 The height of the rectangle in pixels. Returns: tuple \u2013 A tuple containing the x, y, width, and height of the rectangle.","title":"blit_rect"},{"location":"reference/displaysys/busdisplay/#displaysys.busdisplay.BusDisplay.blit_transparent","text":"blit_transparent ( buf , x , y , w , h , key ) Blit a buffer with transparency. Parameters: buf ( memoryview ) \u2013 The buffer to blit. x ( int ) \u2013 The x coordinate to blit to. y ( int ) \u2013 The y coordinate to blit to. w ( int ) \u2013 The width to blit. h ( int ) \u2013 The height to blit. key ( int ) \u2013 The color key to use for transparency. Returns: tuple \u2013 The x, y, w, h coordinates of the blitted area.","title":"blit_transparent"},{"location":"reference/displaysys/busdisplay/#displaysys.busdisplay.BusDisplay.deinit","text":"deinit () Deinitialize the display.","title":"deinit"},{"location":"reference/displaysys/busdisplay/#displaysys.busdisplay.BusDisplay.disable_auto_byteswap","text":"disable_auto_byteswap ( value ) Disable byte swapping in the display driver. If self.requires_byteswap and the guest application is capable of byte swapping color data check to see if byte swapping can be disabled. If so, disable it. Usage # If byte swapping is required and the display driver is capable of having byte swapping disabled, # disable it and set a flag so we can swap the color bytes as they are created. if display_drv.requires_byteswap: needs_swap = display_drv.disable_auto_byteswap(True) else: needs_swap = False Parameters: value ( bool ) \u2013 Whether to disable byte swapping. Returns: bool \u2013 Whether byte swapping was disabled successfully.","title":"disable_auto_byteswap"},{"location":"reference/displaysys/busdisplay/#displaysys.busdisplay.BusDisplay.fill","text":"fill ( color ) Fill the display with a color. Parameters: color ( int ) \u2013 The color to fill the display with.","title":"fill"},{"location":"reference/displaysys/busdisplay/#displaysys.busdisplay.BusDisplay.fill_rect","text":"fill_rect ( x , y , w , h , c ) Draw a rectangle at the given location, size and filled with color. This method draws a filled rectangle on the display. The top-left corner of the rectangle is specified by the x and y parameters, and the size of the rectangle is specified by the width and height parameters. The rectangle is filled with the specified color. Parameters: x ( int ) \u2013 The x-coordinate of the top-left corner of the rectangle. y ( int ) \u2013 The y-coordinate of the top-left corner of the rectangle. w ( int ) \u2013 The width of the rectangle in pixels. h ( int ) \u2013 The height of the rectangle in pixels. c ( int ) \u2013 The color of the rectangle. Returns: tuple \u2013 A tuple containing the x, y, width, and height of the rectangle.","title":"fill_rect"},{"location":"reference/displaysys/busdisplay/#displaysys.busdisplay.BusDisplay.hard_reset","text":"hard_reset () Hard reset display.","title":"hard_reset"},{"location":"reference/displaysys/busdisplay/#displaysys.busdisplay.BusDisplay.init","text":"init () Post initialization tasks. This method may be overridden by subclasses to perform any post initialization. If it is overridden, it must call super().init() or set self._initialized = True.","title":"init"},{"location":"reference/displaysys/busdisplay/#displaysys.busdisplay.BusDisplay.invert_colors","text":"invert_colors ( value ) Invert the colors of the display. Parameters: value ( bool ) \u2013 If True, invert the colors of the display.","title":"invert_colors"},{"location":"reference/displaysys/busdisplay/#displaysys.busdisplay.BusDisplay.pixel","text":"pixel ( x , y , c ) Set a pixel on the display. Parameters: x ( int ) \u2013 The x-coordinate of the pixel. y ( int ) \u2013 The y-coordinate of the pixel. c ( int ) \u2013 The color of the pixel. Returns: tuple \u2013 A tuple containing the x, y, width, and height of the pixel.","title":"pixel"},{"location":"reference/displaysys/busdisplay/#displaysys.busdisplay.BusDisplay.reset","text":"reset () Reset display. This method resets the display. If the display has a reset pin, it is reset using the reset pin. Otherwise, the display is reset using the software reset command.","title":"reset"},{"location":"reference/displaysys/busdisplay/#displaysys.busdisplay.BusDisplay.scroll","text":"scroll ( dx , dy ) Scroll the display. Parameters: dx ( int ) \u2013 The number of pixels to scroll horizontally. dy ( int ) \u2013 The number of pixels to scroll vertically.","title":"scroll"},{"location":"reference/displaysys/busdisplay/#displaysys.busdisplay.BusDisplay.set_vscroll","text":"set_vscroll ( tfa = 0 , bfa = 0 ) Set the vertical scroll definition and move the vertical scroll to the top. Parameters: tfa ( int , default: 0 ) \u2013 The top fixed area. bfa ( int , default: 0 ) \u2013 The bottom fixed area.","title":"set_vscroll"},{"location":"reference/displaysys/busdisplay/#displaysys.busdisplay.BusDisplay.show","text":"show ( * args , ** kwargs ) Show the display. Base class method does nothing. May be overridden by subclasses.","title":"show"},{"location":"reference/displaysys/busdisplay/#displaysys.busdisplay.BusDisplay.sleep_mode","text":"sleep_mode ( value ) Enable or disable display sleep mode. Parameters: value ( bool ) \u2013 If True, enable sleep mode. If False, disable sleep mode.","title":"sleep_mode"},{"location":"reference/displaysys/busdisplay/#displaysys.busdisplay.BusDisplay.soft_reset","text":"soft_reset () Soft reset display.","title":"soft_reset"},{"location":"reference/displaysys/busdisplay/#displaysys.busdisplay.BusDisplay.translate_point","text":"translate_point ( point ) Translate a point from real coordinates to scrolled coordinates. Useful for touch events. Parameters: point ( tuple ) \u2013 The x and y coordinates to translate. Returns: tuple \u2013 The translated x and y coordinates.","title":"translate_point"},{"location":"reference/displaysys/busdisplay/#displaysys.busdisplay.BusDisplay.vscrdef","text":"vscrdef ( tfa , vsa , bfa ) Set Vertical Scrolling Definition. To scroll a 135x240 display these values should be 40, 240, 40. There are 40 lines above the display that are not shown followed by 240 lines that are shown followed by 40 more lines that are not shown. You could write to these areas off display and scroll them into view by changing the TFA, VSA and BFA values. Parameters: tfa ( int ) \u2013 Top Fixed Area. vsa ( int ) \u2013 Vertical Scrolling Area. bfa ( int ) \u2013 Bottom Fixed Area.","title":"vscrdef"},{"location":"reference/displaysys/busdisplay/#displaysys.busdisplay.BusDisplay.vscsad","text":"vscsad ( vssa = None ) Set the vertical scroll start address. Parameters: vssa ( ( int , None) , default: None ) \u2013 The vertical scroll start address. Returns: int ( int ) \u2013 The vertical scroll start address.","title":"vscsad"},{"location":"reference/displaysys/fbdisplay/","text":"displaysys.fbdisplay Classes \u00b6 FBDisplay \u00b6 A class to interface with CircuitPython FrameBuffer objects. Parameters: buffer ( FrameBuffer ) \u2013 The CircuitPython FrameBuffer object. width ( int , default: None ) \u2013 The width of the display. Defaults to None. height ( int , default: None ) \u2013 The height of the display. Defaults to None. reverse_bytes_in_word ( bool , default: False ) \u2013 Whether to reverse the bytes in a word. Defaults to False. Attributes: color_depth ( int ) \u2013 The color depth of the display Attributes \u00b6 bfa property \u00b6 bfa The bottom fixed area set by set_vscroll or vscrdef. Returns: int \u2013 The bottom fixed area. bfa_area property \u00b6 bfa_area The bottom fixed area as an Area object. Returns: tuple \u2013 The bottom fixed area. brightness property writable \u00b6 brightness The brightness of the display. height property \u00b6 height The height of the display in pixels. power property writable \u00b6 power The power state of the display. requires_byteswap property \u00b6 requires_byteswap Whether the display requires byte swapping. rotation property writable \u00b6 rotation The rotation of the display. tfa property \u00b6 tfa The top fixed area set by set_vscroll or vscrdef. Returns: int \u2013 The top fixed area. tfa_area property \u00b6 tfa_area The top fixed area as an Area object. Returns: tuple \u2013 The top fixed area. touch_device property writable \u00b6 touch_device The touch device. vsa property \u00b6 vsa The vertical scroll area set by set_vscroll or vscrdef. Returns: int \u2013 The vertical scroll area. vsa_area property \u00b6 vsa_area The vertical scroll area as an Area object. Returns: tuple \u2013 The vertical scroll area. vscroll property writable \u00b6 vscroll The vertical scroll position relative to the top fixed area. Returns: int \u2013 The vertical scroll position. width property \u00b6 width The width of the display in pixels. Functions \u00b6 blit_rect \u00b6 blit_rect ( buf , x , y , w , h ) Blits a buffer to the display at the given coordinates. Parameters: buf ( memoryview ) \u2013 The buffer to blit. x ( int ) \u2013 The x-coordinate of the buffer. y ( int ) \u2013 The y-coordinate of the buffer. w ( int ) \u2013 The width of the buffer. h ( int ) \u2013 The height of the buffer. Returns: tuple \u2013 A tuple containing the x, y, w, h values. blit_transparent \u00b6 blit_transparent ( buf , x , y , w , h , key ) Blit a buffer with transparency. Parameters: buf ( memoryview ) \u2013 The buffer to blit. x ( int ) \u2013 The x coordinate to blit to. y ( int ) \u2013 The y coordinate to blit to. w ( int ) \u2013 The width to blit. h ( int ) \u2013 The height to blit. key ( int ) \u2013 The color key to use for transparency. Returns: tuple \u2013 The x, y, w, h coordinates of the blitted area. deinit \u00b6 deinit () Deinitialize the display. disable_auto_byteswap \u00b6 disable_auto_byteswap ( value ) Disable byte swapping in the display driver. If self.requires_byteswap and the guest application is capable of byte swapping color data check to see if byte swapping can be disabled. If so, disable it. Usage # If byte swapping is required and the display driver is capable of having byte swapping disabled, # disable it and set a flag so we can swap the color bytes as they are created. if display_drv.requires_byteswap: needs_swap = display_drv.disable_auto_byteswap(True) else: needs_swap = False Parameters: value ( bool ) \u2013 Whether to disable byte swapping. Returns: bool \u2013 Whether byte swapping was disabled successfully. fill \u00b6 fill ( color ) Fill the display with a color. Parameters: color ( int ) \u2013 The color to fill the display with. fill_rect \u00b6 fill_rect ( x , y , w , h , c ) Fills a rectangle with the given color. Parameters: x ( int ) \u2013 The x-coordinate of the top-left corner of the rectangle. y ( int ) \u2013 The y-coordinate of the top-left corner of the rectangle. w ( int ) \u2013 The width of the rectangle. h ( int ) \u2013 The height of the rectangle. c ( int ) \u2013 The color to fill the rectangle with. Returns: tuple \u2013 A tuple containing the x, y, w, h values hard_reset \u00b6 hard_reset () Perform a hardware reset of the display. Should be overridden by the subclass. init \u00b6 init () Initializes the display instance. Called by init and rotation setter. invert_colors \u00b6 invert_colors ( value ) Invert the colors of the display. Should be overridden by the subclass. Parameters: value ( bool ) \u2013 True to invert the colors, False to restore the colors. pixel \u00b6 pixel ( x , y , c ) Sets the color of the pixel at the given coordinates. Parameters: x ( int ) \u2013 The x-coordinate of the pixel. y ( int ) \u2013 The y-coordinate of the pixel. c ( int ) \u2013 The color of the pixel. Returns: tuple \u2013 A tuple containing the x, y values. reset \u00b6 reset () Perform a reset of the display. Should be overridden by the subclass. scroll \u00b6 scroll ( dx , dy ) Scroll the display. Parameters: dx ( int ) \u2013 The number of pixels to scroll horizontally. dy ( int ) \u2013 The number of pixels to scroll vertically. set_vscroll \u00b6 set_vscroll ( tfa = 0 , bfa = 0 ) Set the vertical scroll definition and move the vertical scroll to the top. Parameters: tfa ( int , default: 0 ) \u2013 The top fixed area. bfa ( int , default: 0 ) \u2013 The bottom fixed area. show \u00b6 show () Refreshes the display. sleep_mode \u00b6 sleep_mode ( value ) Set the sleep mode of the display. Should be overridden by the subclass. Parameters: value ( bool ) \u2013 True to enter sleep mode, False to exit sleep mode. soft_reset \u00b6 soft_reset () Perform a software reset of the display. Should be overridden by the subclass. translate_point \u00b6 translate_point ( point ) Translate a point from real coordinates to scrolled coordinates. Useful for touch events. Parameters: point ( tuple ) \u2013 The x and y coordinates to translate. Returns: tuple \u2013 The translated x and y coordinates. vscrdef \u00b6 vscrdef ( tfa , vsa , bfa ) Set the vertical scroll definition. Should be overridden by the subclass and called as super().vscrdef(tfa, vsa, bfa). Parameters: tfa ( int ) \u2013 The top fixed area. vsa ( int ) \u2013 The vertical scroll area. bfa ( int ) \u2013 The bottom fixed area. vscsad \u00b6 vscsad ( vssa = None ) Set or get the vertical scroll start address. Should be overridden by the subclass and called as super().vscsad(y). Parameters: vssa ( int , default: None ) \u2013 The vertical scroll start address. Returns: int \u2013 The vertical scroll start address.","title":"fbdisplay"},{"location":"reference/displaysys/fbdisplay/#displaysys.fbdisplay-classes","text":"","title":"Classes"},{"location":"reference/displaysys/fbdisplay/#displaysys.fbdisplay.FBDisplay","text":"A class to interface with CircuitPython FrameBuffer objects. Parameters: buffer ( FrameBuffer ) \u2013 The CircuitPython FrameBuffer object. width ( int , default: None ) \u2013 The width of the display. Defaults to None. height ( int , default: None ) \u2013 The height of the display. Defaults to None. reverse_bytes_in_word ( bool , default: False ) \u2013 Whether to reverse the bytes in a word. Defaults to False. Attributes: color_depth ( int ) \u2013 The color depth of the display","title":"FBDisplay"},{"location":"reference/displaysys/fbdisplay/#displaysys.fbdisplay.FBDisplay-attributes","text":"","title":"Attributes"},{"location":"reference/displaysys/fbdisplay/#displaysys.fbdisplay.FBDisplay.bfa","text":"bfa The bottom fixed area set by set_vscroll or vscrdef. Returns: int \u2013 The bottom fixed area.","title":"bfa"},{"location":"reference/displaysys/fbdisplay/#displaysys.fbdisplay.FBDisplay.bfa_area","text":"bfa_area The bottom fixed area as an Area object. Returns: tuple \u2013 The bottom fixed area.","title":"bfa_area"},{"location":"reference/displaysys/fbdisplay/#displaysys.fbdisplay.FBDisplay.brightness","text":"brightness The brightness of the display.","title":"brightness"},{"location":"reference/displaysys/fbdisplay/#displaysys.fbdisplay.FBDisplay.height","text":"height The height of the display in pixels.","title":"height"},{"location":"reference/displaysys/fbdisplay/#displaysys.fbdisplay.FBDisplay.power","text":"power The power state of the display.","title":"power"},{"location":"reference/displaysys/fbdisplay/#displaysys.fbdisplay.FBDisplay.requires_byteswap","text":"requires_byteswap Whether the display requires byte swapping.","title":"requires_byteswap"},{"location":"reference/displaysys/fbdisplay/#displaysys.fbdisplay.FBDisplay.rotation","text":"rotation The rotation of the display.","title":"rotation"},{"location":"reference/displaysys/fbdisplay/#displaysys.fbdisplay.FBDisplay.tfa","text":"tfa The top fixed area set by set_vscroll or vscrdef. Returns: int \u2013 The top fixed area.","title":"tfa"},{"location":"reference/displaysys/fbdisplay/#displaysys.fbdisplay.FBDisplay.tfa_area","text":"tfa_area The top fixed area as an Area object. Returns: tuple \u2013 The top fixed area.","title":"tfa_area"},{"location":"reference/displaysys/fbdisplay/#displaysys.fbdisplay.FBDisplay.touch_device","text":"touch_device The touch device.","title":"touch_device"},{"location":"reference/displaysys/fbdisplay/#displaysys.fbdisplay.FBDisplay.vsa","text":"vsa The vertical scroll area set by set_vscroll or vscrdef. Returns: int \u2013 The vertical scroll area.","title":"vsa"},{"location":"reference/displaysys/fbdisplay/#displaysys.fbdisplay.FBDisplay.vsa_area","text":"vsa_area The vertical scroll area as an Area object. Returns: tuple \u2013 The vertical scroll area.","title":"vsa_area"},{"location":"reference/displaysys/fbdisplay/#displaysys.fbdisplay.FBDisplay.vscroll","text":"vscroll The vertical scroll position relative to the top fixed area. Returns: int \u2013 The vertical scroll position.","title":"vscroll"},{"location":"reference/displaysys/fbdisplay/#displaysys.fbdisplay.FBDisplay.width","text":"width The width of the display in pixels.","title":"width"},{"location":"reference/displaysys/fbdisplay/#displaysys.fbdisplay.FBDisplay-functions","text":"","title":"Functions"},{"location":"reference/displaysys/fbdisplay/#displaysys.fbdisplay.FBDisplay.blit_rect","text":"blit_rect ( buf , x , y , w , h ) Blits a buffer to the display at the given coordinates. Parameters: buf ( memoryview ) \u2013 The buffer to blit. x ( int ) \u2013 The x-coordinate of the buffer. y ( int ) \u2013 The y-coordinate of the buffer. w ( int ) \u2013 The width of the buffer. h ( int ) \u2013 The height of the buffer. Returns: tuple \u2013 A tuple containing the x, y, w, h values.","title":"blit_rect"},{"location":"reference/displaysys/fbdisplay/#displaysys.fbdisplay.FBDisplay.blit_transparent","text":"blit_transparent ( buf , x , y , w , h , key ) Blit a buffer with transparency. Parameters: buf ( memoryview ) \u2013 The buffer to blit. x ( int ) \u2013 The x coordinate to blit to. y ( int ) \u2013 The y coordinate to blit to. w ( int ) \u2013 The width to blit. h ( int ) \u2013 The height to blit. key ( int ) \u2013 The color key to use for transparency. Returns: tuple \u2013 The x, y, w, h coordinates of the blitted area.","title":"blit_transparent"},{"location":"reference/displaysys/fbdisplay/#displaysys.fbdisplay.FBDisplay.deinit","text":"deinit () Deinitialize the display.","title":"deinit"},{"location":"reference/displaysys/fbdisplay/#displaysys.fbdisplay.FBDisplay.disable_auto_byteswap","text":"disable_auto_byteswap ( value ) Disable byte swapping in the display driver. If self.requires_byteswap and the guest application is capable of byte swapping color data check to see if byte swapping can be disabled. If so, disable it. Usage # If byte swapping is required and the display driver is capable of having byte swapping disabled, # disable it and set a flag so we can swap the color bytes as they are created. if display_drv.requires_byteswap: needs_swap = display_drv.disable_auto_byteswap(True) else: needs_swap = False Parameters: value ( bool ) \u2013 Whether to disable byte swapping. Returns: bool \u2013 Whether byte swapping was disabled successfully.","title":"disable_auto_byteswap"},{"location":"reference/displaysys/fbdisplay/#displaysys.fbdisplay.FBDisplay.fill","text":"fill ( color ) Fill the display with a color. Parameters: color ( int ) \u2013 The color to fill the display with.","title":"fill"},{"location":"reference/displaysys/fbdisplay/#displaysys.fbdisplay.FBDisplay.fill_rect","text":"fill_rect ( x , y , w , h , c ) Fills a rectangle with the given color. Parameters: x ( int ) \u2013 The x-coordinate of the top-left corner of the rectangle. y ( int ) \u2013 The y-coordinate of the top-left corner of the rectangle. w ( int ) \u2013 The width of the rectangle. h ( int ) \u2013 The height of the rectangle. c ( int ) \u2013 The color to fill the rectangle with. Returns: tuple \u2013 A tuple containing the x, y, w, h values","title":"fill_rect"},{"location":"reference/displaysys/fbdisplay/#displaysys.fbdisplay.FBDisplay.hard_reset","text":"hard_reset () Perform a hardware reset of the display. Should be overridden by the subclass.","title":"hard_reset"},{"location":"reference/displaysys/fbdisplay/#displaysys.fbdisplay.FBDisplay.init","text":"init () Initializes the display instance. Called by init and rotation setter.","title":"init"},{"location":"reference/displaysys/fbdisplay/#displaysys.fbdisplay.FBDisplay.invert_colors","text":"invert_colors ( value ) Invert the colors of the display. Should be overridden by the subclass. Parameters: value ( bool ) \u2013 True to invert the colors, False to restore the colors.","title":"invert_colors"},{"location":"reference/displaysys/fbdisplay/#displaysys.fbdisplay.FBDisplay.pixel","text":"pixel ( x , y , c ) Sets the color of the pixel at the given coordinates. Parameters: x ( int ) \u2013 The x-coordinate of the pixel. y ( int ) \u2013 The y-coordinate of the pixel. c ( int ) \u2013 The color of the pixel. Returns: tuple \u2013 A tuple containing the x, y values.","title":"pixel"},{"location":"reference/displaysys/fbdisplay/#displaysys.fbdisplay.FBDisplay.reset","text":"reset () Perform a reset of the display. Should be overridden by the subclass.","title":"reset"},{"location":"reference/displaysys/fbdisplay/#displaysys.fbdisplay.FBDisplay.scroll","text":"scroll ( dx , dy ) Scroll the display. Parameters: dx ( int ) \u2013 The number of pixels to scroll horizontally. dy ( int ) \u2013 The number of pixels to scroll vertically.","title":"scroll"},{"location":"reference/displaysys/fbdisplay/#displaysys.fbdisplay.FBDisplay.set_vscroll","text":"set_vscroll ( tfa = 0 , bfa = 0 ) Set the vertical scroll definition and move the vertical scroll to the top. Parameters: tfa ( int , default: 0 ) \u2013 The top fixed area. bfa ( int , default: 0 ) \u2013 The bottom fixed area.","title":"set_vscroll"},{"location":"reference/displaysys/fbdisplay/#displaysys.fbdisplay.FBDisplay.show","text":"show () Refreshes the display.","title":"show"},{"location":"reference/displaysys/fbdisplay/#displaysys.fbdisplay.FBDisplay.sleep_mode","text":"sleep_mode ( value ) Set the sleep mode of the display. Should be overridden by the subclass. Parameters: value ( bool ) \u2013 True to enter sleep mode, False to exit sleep mode.","title":"sleep_mode"},{"location":"reference/displaysys/fbdisplay/#displaysys.fbdisplay.FBDisplay.soft_reset","text":"soft_reset () Perform a software reset of the display. Should be overridden by the subclass.","title":"soft_reset"},{"location":"reference/displaysys/fbdisplay/#displaysys.fbdisplay.FBDisplay.translate_point","text":"translate_point ( point ) Translate a point from real coordinates to scrolled coordinates. Useful for touch events. Parameters: point ( tuple ) \u2013 The x and y coordinates to translate. Returns: tuple \u2013 The translated x and y coordinates.","title":"translate_point"},{"location":"reference/displaysys/fbdisplay/#displaysys.fbdisplay.FBDisplay.vscrdef","text":"vscrdef ( tfa , vsa , bfa ) Set the vertical scroll definition. Should be overridden by the subclass and called as super().vscrdef(tfa, vsa, bfa). Parameters: tfa ( int ) \u2013 The top fixed area. vsa ( int ) \u2013 The vertical scroll area. bfa ( int ) \u2013 The bottom fixed area.","title":"vscrdef"},{"location":"reference/displaysys/fbdisplay/#displaysys.fbdisplay.FBDisplay.vscsad","text":"vscsad ( vssa = None ) Set or get the vertical scroll start address. Should be overridden by the subclass and called as super().vscsad(y). Parameters: vssa ( int , default: None ) \u2013 The vertical scroll start address. Returns: int \u2013 The vertical scroll start address.","title":"vscsad"},{"location":"reference/displaysys/jndisplay/","text":"displaysys.jndisplay Classes \u00b6 JNDisplay \u00b6 A class to emulate a display on Jupyter Notebook. Parameters: width ( int ) \u2013 The width of the display. height ( int ) \u2013 The height of the display. Attributes: color_depth ( int ) \u2013 The color depth of the display Attributes \u00b6 bfa property \u00b6 bfa The bottom fixed area set by set_vscroll or vscrdef. Returns: int \u2013 The bottom fixed area. bfa_area property \u00b6 bfa_area The bottom fixed area as an Area object. Returns: tuple \u2013 The bottom fixed area. brightness property writable \u00b6 brightness The brightness of the display. height property \u00b6 height The height of the display in pixels. power property writable \u00b6 power The power state of the display. requires_byteswap property \u00b6 requires_byteswap Whether the display requires byte swapping. rotation property writable \u00b6 rotation The rotation of the display. tfa property \u00b6 tfa The top fixed area set by set_vscroll or vscrdef. Returns: int \u2013 The top fixed area. tfa_area property \u00b6 tfa_area The top fixed area as an Area object. Returns: tuple \u2013 The top fixed area. touch_device property writable \u00b6 touch_device The touch device. vsa property \u00b6 vsa The vertical scroll area set by set_vscroll or vscrdef. Returns: int \u2013 The vertical scroll area. vsa_area property \u00b6 vsa_area The vertical scroll area as an Area object. Returns: tuple \u2013 The vertical scroll area. vscroll property writable \u00b6 vscroll The vertical scroll position relative to the top fixed area. Returns: int \u2013 The vertical scroll position. width property \u00b6 width The width of the display in pixels. Functions \u00b6 blit_rect \u00b6 blit_rect ( buf , x , y , w , h ) Blits a buffer to the display at the given coordinates. Parameters: buf ( bytearray ) \u2013 The buffer to blit to the display. x ( int ) \u2013 The x-coordinate of the top-left corner of the buffer. y ( int ) \u2013 The y-coordinate of the top-left corner of the buffer. w ( int ) \u2013 The width of the buffer. h ( int ) \u2013 The height of the buffer. Returns: tuple \u2013 A tuple containing the x, y, w, h values. blit_transparent \u00b6 blit_transparent ( buf , x , y , w , h , key ) Blit a buffer with transparency. Parameters: buf ( memoryview ) \u2013 The buffer to blit. x ( int ) \u2013 The x coordinate to blit to. y ( int ) \u2013 The y coordinate to blit to. w ( int ) \u2013 The width to blit. h ( int ) \u2013 The height to blit. key ( int ) \u2013 The color key to use for transparency. Returns: tuple \u2013 The x, y, w, h coordinates of the blitted area. deinit \u00b6 deinit () Deinitialize the display. disable_auto_byteswap \u00b6 disable_auto_byteswap ( value ) Disable byte swapping in the display driver. If self.requires_byteswap and the guest application is capable of byte swapping color data check to see if byte swapping can be disabled. If so, disable it. Usage # If byte swapping is required and the display driver is capable of having byte swapping disabled, # disable it and set a flag so we can swap the color bytes as they are created. if display_drv.requires_byteswap: needs_swap = display_drv.disable_auto_byteswap(True) else: needs_swap = False Parameters: value ( bool ) \u2013 Whether to disable byte swapping. Returns: bool \u2013 Whether byte swapping was disabled successfully. fill \u00b6 fill ( color ) Fill the display with a color. Parameters: color ( int ) \u2013 The color to fill the display with. fill_rect \u00b6 fill_rect ( x , y , w , h , c ) Fills a rectangle with the given color. Parameters: x ( int ) \u2013 The x-coordinate of the top-left corner of the rectangle. y ( int ) \u2013 The y-coordinate of the top-left corner of the rectangle. w ( int ) \u2013 The width of the rectangle. h ( int ) \u2013 The height of the rectangle. c ( int ) \u2013 The color to fill the rectangle with. Returns: tuple \u2013 A tuple containing the x, y, w, h values hard_reset \u00b6 hard_reset () Perform a hardware reset of the display. Should be overridden by the subclass. init \u00b6 init () Initializes the display instance. Called by init and rotation setter. invert_colors \u00b6 invert_colors ( value ) Invert the colors of the display. Should be overridden by the subclass. Parameters: value ( bool ) \u2013 True to invert the colors, False to restore the colors. pixel \u00b6 pixel ( x , y , c ) Sets a pixel to the given color. Parameters: x ( int ) \u2013 The x-coordinate of the pixel. y ( int ) \u2013 The y-coordinate of the pixel. c ( int ) \u2013 The color to set the pixel to. Returns: tuple \u2013 A tuple containing the x, y, w and h values. reset \u00b6 reset () Perform a reset of the display. Should be overridden by the subclass. scroll \u00b6 scroll ( dx , dy ) Scroll the display. Parameters: dx ( int ) \u2013 The number of pixels to scroll horizontally. dy ( int ) \u2013 The number of pixels to scroll vertically. set_vscroll \u00b6 set_vscroll ( tfa = 0 , bfa = 0 ) Set the vertical scroll definition and move the vertical scroll to the top. Parameters: tfa ( int , default: 0 ) \u2013 The top fixed area. bfa ( int , default: 0 ) \u2013 The bottom fixed area. show \u00b6 show () Updates the display with the current buffer. sleep_mode \u00b6 sleep_mode ( value ) Set the sleep mode of the display. Should be overridden by the subclass. Parameters: value ( bool ) \u2013 True to enter sleep mode, False to exit sleep mode. soft_reset \u00b6 soft_reset () Perform a software reset of the display. Should be overridden by the subclass. translate_point \u00b6 translate_point ( point ) Translate a point from real coordinates to scrolled coordinates. Useful for touch events. Parameters: point ( tuple ) \u2013 The x and y coordinates to translate. Returns: tuple \u2013 The translated x and y coordinates. vscrdef \u00b6 vscrdef ( tfa , vsa , bfa ) Set the vertical scroll definition. Should be overridden by the subclass and called as super().vscrdef(tfa, vsa, bfa). Parameters: tfa ( int ) \u2013 The top fixed area. vsa ( int ) \u2013 The vertical scroll area. bfa ( int ) \u2013 The bottom fixed area. vscsad \u00b6 vscsad ( vssa = None ) Set or get the vertical scroll start address. Should be overridden by the subclass and called as super().vscsad(y). Parameters: vssa ( int , default: None ) \u2013 The vertical scroll start address. Returns: int \u2013 The vertical scroll start address. Functions \u00b6","title":"jndisplay"},{"location":"reference/displaysys/jndisplay/#displaysys.jndisplay-classes","text":"","title":"Classes"},{"location":"reference/displaysys/jndisplay/#displaysys.jndisplay.JNDisplay","text":"A class to emulate a display on Jupyter Notebook. Parameters: width ( int ) \u2013 The width of the display. height ( int ) \u2013 The height of the display. Attributes: color_depth ( int ) \u2013 The color depth of the display","title":"JNDisplay"},{"location":"reference/displaysys/jndisplay/#displaysys.jndisplay.JNDisplay-attributes","text":"","title":"Attributes"},{"location":"reference/displaysys/jndisplay/#displaysys.jndisplay.JNDisplay.bfa","text":"bfa The bottom fixed area set by set_vscroll or vscrdef. Returns: int \u2013 The bottom fixed area.","title":"bfa"},{"location":"reference/displaysys/jndisplay/#displaysys.jndisplay.JNDisplay.bfa_area","text":"bfa_area The bottom fixed area as an Area object. Returns: tuple \u2013 The bottom fixed area.","title":"bfa_area"},{"location":"reference/displaysys/jndisplay/#displaysys.jndisplay.JNDisplay.brightness","text":"brightness The brightness of the display.","title":"brightness"},{"location":"reference/displaysys/jndisplay/#displaysys.jndisplay.JNDisplay.height","text":"height The height of the display in pixels.","title":"height"},{"location":"reference/displaysys/jndisplay/#displaysys.jndisplay.JNDisplay.power","text":"power The power state of the display.","title":"power"},{"location":"reference/displaysys/jndisplay/#displaysys.jndisplay.JNDisplay.requires_byteswap","text":"requires_byteswap Whether the display requires byte swapping.","title":"requires_byteswap"},{"location":"reference/displaysys/jndisplay/#displaysys.jndisplay.JNDisplay.rotation","text":"rotation The rotation of the display.","title":"rotation"},{"location":"reference/displaysys/jndisplay/#displaysys.jndisplay.JNDisplay.tfa","text":"tfa The top fixed area set by set_vscroll or vscrdef. Returns: int \u2013 The top fixed area.","title":"tfa"},{"location":"reference/displaysys/jndisplay/#displaysys.jndisplay.JNDisplay.tfa_area","text":"tfa_area The top fixed area as an Area object. Returns: tuple \u2013 The top fixed area.","title":"tfa_area"},{"location":"reference/displaysys/jndisplay/#displaysys.jndisplay.JNDisplay.touch_device","text":"touch_device The touch device.","title":"touch_device"},{"location":"reference/displaysys/jndisplay/#displaysys.jndisplay.JNDisplay.vsa","text":"vsa The vertical scroll area set by set_vscroll or vscrdef. Returns: int \u2013 The vertical scroll area.","title":"vsa"},{"location":"reference/displaysys/jndisplay/#displaysys.jndisplay.JNDisplay.vsa_area","text":"vsa_area The vertical scroll area as an Area object. Returns: tuple \u2013 The vertical scroll area.","title":"vsa_area"},{"location":"reference/displaysys/jndisplay/#displaysys.jndisplay.JNDisplay.vscroll","text":"vscroll The vertical scroll position relative to the top fixed area. Returns: int \u2013 The vertical scroll position.","title":"vscroll"},{"location":"reference/displaysys/jndisplay/#displaysys.jndisplay.JNDisplay.width","text":"width The width of the display in pixels.","title":"width"},{"location":"reference/displaysys/jndisplay/#displaysys.jndisplay.JNDisplay-functions","text":"","title":"Functions"},{"location":"reference/displaysys/jndisplay/#displaysys.jndisplay.JNDisplay.blit_rect","text":"blit_rect ( buf , x , y , w , h ) Blits a buffer to the display at the given coordinates. Parameters: buf ( bytearray ) \u2013 The buffer to blit to the display. x ( int ) \u2013 The x-coordinate of the top-left corner of the buffer. y ( int ) \u2013 The y-coordinate of the top-left corner of the buffer. w ( int ) \u2013 The width of the buffer. h ( int ) \u2013 The height of the buffer. Returns: tuple \u2013 A tuple containing the x, y, w, h values.","title":"blit_rect"},{"location":"reference/displaysys/jndisplay/#displaysys.jndisplay.JNDisplay.blit_transparent","text":"blit_transparent ( buf , x , y , w , h , key ) Blit a buffer with transparency. Parameters: buf ( memoryview ) \u2013 The buffer to blit. x ( int ) \u2013 The x coordinate to blit to. y ( int ) \u2013 The y coordinate to blit to. w ( int ) \u2013 The width to blit. h ( int ) \u2013 The height to blit. key ( int ) \u2013 The color key to use for transparency. Returns: tuple \u2013 The x, y, w, h coordinates of the blitted area.","title":"blit_transparent"},{"location":"reference/displaysys/jndisplay/#displaysys.jndisplay.JNDisplay.deinit","text":"deinit () Deinitialize the display.","title":"deinit"},{"location":"reference/displaysys/jndisplay/#displaysys.jndisplay.JNDisplay.disable_auto_byteswap","text":"disable_auto_byteswap ( value ) Disable byte swapping in the display driver. If self.requires_byteswap and the guest application is capable of byte swapping color data check to see if byte swapping can be disabled. If so, disable it. Usage # If byte swapping is required and the display driver is capable of having byte swapping disabled, # disable it and set a flag so we can swap the color bytes as they are created. if display_drv.requires_byteswap: needs_swap = display_drv.disable_auto_byteswap(True) else: needs_swap = False Parameters: value ( bool ) \u2013 Whether to disable byte swapping. Returns: bool \u2013 Whether byte swapping was disabled successfully.","title":"disable_auto_byteswap"},{"location":"reference/displaysys/jndisplay/#displaysys.jndisplay.JNDisplay.fill","text":"fill ( color ) Fill the display with a color. Parameters: color ( int ) \u2013 The color to fill the display with.","title":"fill"},{"location":"reference/displaysys/jndisplay/#displaysys.jndisplay.JNDisplay.fill_rect","text":"fill_rect ( x , y , w , h , c ) Fills a rectangle with the given color. Parameters: x ( int ) \u2013 The x-coordinate of the top-left corner of the rectangle. y ( int ) \u2013 The y-coordinate of the top-left corner of the rectangle. w ( int ) \u2013 The width of the rectangle. h ( int ) \u2013 The height of the rectangle. c ( int ) \u2013 The color to fill the rectangle with. Returns: tuple \u2013 A tuple containing the x, y, w, h values","title":"fill_rect"},{"location":"reference/displaysys/jndisplay/#displaysys.jndisplay.JNDisplay.hard_reset","text":"hard_reset () Perform a hardware reset of the display. Should be overridden by the subclass.","title":"hard_reset"},{"location":"reference/displaysys/jndisplay/#displaysys.jndisplay.JNDisplay.init","text":"init () Initializes the display instance. Called by init and rotation setter.","title":"init"},{"location":"reference/displaysys/jndisplay/#displaysys.jndisplay.JNDisplay.invert_colors","text":"invert_colors ( value ) Invert the colors of the display. Should be overridden by the subclass. Parameters: value ( bool ) \u2013 True to invert the colors, False to restore the colors.","title":"invert_colors"},{"location":"reference/displaysys/jndisplay/#displaysys.jndisplay.JNDisplay.pixel","text":"pixel ( x , y , c ) Sets a pixel to the given color. Parameters: x ( int ) \u2013 The x-coordinate of the pixel. y ( int ) \u2013 The y-coordinate of the pixel. c ( int ) \u2013 The color to set the pixel to. Returns: tuple \u2013 A tuple containing the x, y, w and h values.","title":"pixel"},{"location":"reference/displaysys/jndisplay/#displaysys.jndisplay.JNDisplay.reset","text":"reset () Perform a reset of the display. Should be overridden by the subclass.","title":"reset"},{"location":"reference/displaysys/jndisplay/#displaysys.jndisplay.JNDisplay.scroll","text":"scroll ( dx , dy ) Scroll the display. Parameters: dx ( int ) \u2013 The number of pixels to scroll horizontally. dy ( int ) \u2013 The number of pixels to scroll vertically.","title":"scroll"},{"location":"reference/displaysys/jndisplay/#displaysys.jndisplay.JNDisplay.set_vscroll","text":"set_vscroll ( tfa = 0 , bfa = 0 ) Set the vertical scroll definition and move the vertical scroll to the top. Parameters: tfa ( int , default: 0 ) \u2013 The top fixed area. bfa ( int , default: 0 ) \u2013 The bottom fixed area.","title":"set_vscroll"},{"location":"reference/displaysys/jndisplay/#displaysys.jndisplay.JNDisplay.show","text":"show () Updates the display with the current buffer.","title":"show"},{"location":"reference/displaysys/jndisplay/#displaysys.jndisplay.JNDisplay.sleep_mode","text":"sleep_mode ( value ) Set the sleep mode of the display. Should be overridden by the subclass. Parameters: value ( bool ) \u2013 True to enter sleep mode, False to exit sleep mode.","title":"sleep_mode"},{"location":"reference/displaysys/jndisplay/#displaysys.jndisplay.JNDisplay.soft_reset","text":"soft_reset () Perform a software reset of the display. Should be overridden by the subclass.","title":"soft_reset"},{"location":"reference/displaysys/jndisplay/#displaysys.jndisplay.JNDisplay.translate_point","text":"translate_point ( point ) Translate a point from real coordinates to scrolled coordinates. Useful for touch events. Parameters: point ( tuple ) \u2013 The x and y coordinates to translate. Returns: tuple \u2013 The translated x and y coordinates.","title":"translate_point"},{"location":"reference/displaysys/jndisplay/#displaysys.jndisplay.JNDisplay.vscrdef","text":"vscrdef ( tfa , vsa , bfa ) Set the vertical scroll definition. Should be overridden by the subclass and called as super().vscrdef(tfa, vsa, bfa). Parameters: tfa ( int ) \u2013 The top fixed area. vsa ( int ) \u2013 The vertical scroll area. bfa ( int ) \u2013 The bottom fixed area.","title":"vscrdef"},{"location":"reference/displaysys/jndisplay/#displaysys.jndisplay.JNDisplay.vscsad","text":"vscsad ( vssa = None ) Set or get the vertical scroll start address. Should be overridden by the subclass and called as super().vscsad(y). Parameters: vssa ( int , default: None ) \u2013 The vertical scroll start address. Returns: int \u2013 The vertical scroll start address.","title":"vscsad"},{"location":"reference/displaysys/jndisplay/#displaysys.jndisplay-functions","text":"","title":"Functions"},{"location":"reference/displaysys/pgdisplay/","text":"displaysys.pgdisplay Classes \u00b6 PGDisplay \u00b6 A class to emulate an LCD using pygame. Provides scrolling and rotation functions similar to an LCD. The .texture object functions as the LCD's internal memory. Parameters: width ( int , default: 320 ) \u2013 The width of the display. Defaults to 320. height ( int , default: 240 ) \u2013 The height of the display. Defaults to 240. rotation ( int , default: 0 ) \u2013 The rotation of the display. Defaults to 0. color_depth ( int , default: 16 ) \u2013 The color depth of the display. Defaults to 16. title ( str , default: 'displaysys' ) \u2013 The title of the display window. Defaults to \"displaysys\". scale ( float , default: 1.0 ) \u2013 The scale of the display. Defaults to 1.0. window_flags ( int , default: SHOWN ) \u2013 The flags for creating the display window. Defaults to pg.SHOWN Attributes: color_depth ( int ) \u2013 The color depth of the display. touch_scale ( float ) \u2013 The touch scale of the display. Attributes \u00b6 bfa property \u00b6 bfa The bottom fixed area set by set_vscroll or vscrdef. Returns: int \u2013 The bottom fixed area. bfa_area property \u00b6 bfa_area The bottom fixed area as an Area object. Returns: tuple \u2013 The bottom fixed area. brightness property writable \u00b6 brightness The brightness of the display. height property \u00b6 height The height of the display in pixels. power property writable \u00b6 power The power state of the display. requires_byteswap property \u00b6 requires_byteswap Whether the display requires byte swapping. rotation property writable \u00b6 rotation The rotation of the display. tfa property \u00b6 tfa The top fixed area set by set_vscroll or vscrdef. Returns: int \u2013 The top fixed area. tfa_area property \u00b6 tfa_area The top fixed area as an Area object. Returns: tuple \u2013 The top fixed area. touch_device property writable \u00b6 touch_device The touch device. vsa property \u00b6 vsa The vertical scroll area set by set_vscroll or vscrdef. Returns: int \u2013 The vertical scroll area. vsa_area property \u00b6 vsa_area The vertical scroll area as an Area object. Returns: tuple \u2013 The vertical scroll area. vscroll property writable \u00b6 vscroll The vertical scroll position relative to the top fixed area. Returns: int \u2013 The vertical scroll position. width property \u00b6 width The width of the display in pixels. Functions \u00b6 blit_rect \u00b6 blit_rect ( buffer , x , y , w , h ) Blits a buffer to the display. Parameters: buffer ( memoryview ) \u2013 The buffer to blit. x ( int ) \u2013 The x-coordinate of the buffer. y ( int ) \u2013 The y-coordinate of the buffer. w ( int ) \u2013 The width to blit. h ( int ) \u2013 The height to blit. Returns: tuple \u2013 A tuple containing the x, y, w, h values. blit_transparent \u00b6 blit_transparent ( buf , x , y , w , h , key ) Blit a buffer with transparency. Parameters: buf ( memoryview ) \u2013 The buffer to blit. x ( int ) \u2013 The x coordinate to blit to. y ( int ) \u2013 The y coordinate to blit to. w ( int ) \u2013 The width to blit. h ( int ) \u2013 The height to blit. key ( int ) \u2013 The color key to use for transparency. Returns: tuple \u2013 The x, y, w, h coordinates of the blitted area. deinit \u00b6 deinit () Deinitializes the pygame instance. disable_auto_byteswap \u00b6 disable_auto_byteswap ( value ) Disable byte swapping in the display driver. If self.requires_byteswap and the guest application is capable of byte swapping color data check to see if byte swapping can be disabled. If so, disable it. Usage # If byte swapping is required and the display driver is capable of having byte swapping disabled, # disable it and set a flag so we can swap the color bytes as they are created. if display_drv.requires_byteswap: needs_swap = display_drv.disable_auto_byteswap(True) else: needs_swap = False Parameters: value ( bool ) \u2013 Whether to disable byte swapping. Returns: bool \u2013 Whether byte swapping was disabled successfully. fill \u00b6 fill ( color ) Fill the display with a color. Parameters: color ( int ) \u2013 The color to fill the display with. fill_rect \u00b6 fill_rect ( x , y , w , h , c ) Fill a rectangle with a color. Renders to the texture instead of directly to the window to facilitate scrolling and scaling. Parameters: x ( int ) \u2013 The x-coordinate of the rectangle. y ( int ) \u2013 The y-coordinate of the rectangle. w ( int ) \u2013 The width of the rectangle. h ( int ) \u2013 The height of the rectangle. c ( int ) \u2013 The color of the rectangle. Returns: tuple \u2013 A tuple containing the x, y, w, h values. hard_reset \u00b6 hard_reset () Perform a hardware reset of the display. Should be overridden by the subclass. init \u00b6 init () Initializes the display instance. Called by init and rotation setter. invert_colors \u00b6 invert_colors ( value ) Invert the colors of the display. Should be overridden by the subclass. Parameters: value ( bool ) \u2013 True to invert the colors, False to restore the colors. pixel \u00b6 pixel ( x , y , c ) Set a pixel on the display. Parameters: x ( int ) \u2013 The x-coordinate of the pixel. y ( int ) \u2013 The y-coordinate of the pixel. c ( int ) \u2013 The color of the pixel. Returns: tuple \u2013 A tuple containing the x, y, w & h values. render \u00b6 render ( renderRect = None ) Render the display. Automatically called after blitting or filling the display. Parameters: renderRect ( Optional [ Rect ] , default: None ) \u2013 The rectangle to render. Defaults to None. reset \u00b6 reset () Perform a reset of the display. Should be overridden by the subclass. scroll \u00b6 scroll ( dx , dy ) Scroll the display. Parameters: dx ( int ) \u2013 The number of pixels to scroll horizontally. dy ( int ) \u2013 The number of pixels to scroll vertically. set_vscroll \u00b6 set_vscroll ( tfa = 0 , bfa = 0 ) Set the vertical scroll definition and move the vertical scroll to the top. Parameters: tfa ( int , default: 0 ) \u2013 The top fixed area. bfa ( int , default: 0 ) \u2013 The bottom fixed area. show \u00b6 show ( param = None ) Show the display. sleep_mode \u00b6 sleep_mode ( value ) Set the sleep mode of the display. Should be overridden by the subclass. Parameters: value ( bool ) \u2013 True to enter sleep mode, False to exit sleep mode. soft_reset \u00b6 soft_reset () Perform a software reset of the display. Should be overridden by the subclass. translate_point \u00b6 translate_point ( point ) Translate a point from real coordinates to scrolled coordinates. Useful for touch events. Parameters: point ( tuple ) \u2013 The x and y coordinates to translate. Returns: tuple \u2013 The translated x and y coordinates. vscrdef \u00b6 vscrdef ( tfa , vsa , bfa ) Set the vertical scroll definition. Parameters: tfa ( int ) \u2013 The top fixed area. vsa ( int ) \u2013 The vertical scroll area. bfa ( int ) \u2013 The bottom fixed area. vscsad \u00b6 vscsad ( vssa = None ) Set the vertical scroll start address. Parameters: vssa ( Optional [ int ] , default: None ) \u2013 The vertical scroll start address. Defaults to None. Returns: int ( int ) \u2013 The vertical scroll start address. Functions \u00b6 poll \u00b6 poll () Polls for an event and returns the event type and data. Returns: Optional [ Event ] \u2013 Optional[pg.event.Event | False]: The event type and data.","title":"pgdisplay"},{"location":"reference/displaysys/pgdisplay/#displaysys.pgdisplay-classes","text":"","title":"Classes"},{"location":"reference/displaysys/pgdisplay/#displaysys.pgdisplay.PGDisplay","text":"A class to emulate an LCD using pygame. Provides scrolling and rotation functions similar to an LCD. The .texture object functions as the LCD's internal memory. Parameters: width ( int , default: 320 ) \u2013 The width of the display. Defaults to 320. height ( int , default: 240 ) \u2013 The height of the display. Defaults to 240. rotation ( int , default: 0 ) \u2013 The rotation of the display. Defaults to 0. color_depth ( int , default: 16 ) \u2013 The color depth of the display. Defaults to 16. title ( str , default: 'displaysys' ) \u2013 The title of the display window. Defaults to \"displaysys\". scale ( float , default: 1.0 ) \u2013 The scale of the display. Defaults to 1.0. window_flags ( int , default: SHOWN ) \u2013 The flags for creating the display window. Defaults to pg.SHOWN Attributes: color_depth ( int ) \u2013 The color depth of the display. touch_scale ( float ) \u2013 The touch scale of the display.","title":"PGDisplay"},{"location":"reference/displaysys/pgdisplay/#displaysys.pgdisplay.PGDisplay-attributes","text":"","title":"Attributes"},{"location":"reference/displaysys/pgdisplay/#displaysys.pgdisplay.PGDisplay.bfa","text":"bfa The bottom fixed area set by set_vscroll or vscrdef. Returns: int \u2013 The bottom fixed area.","title":"bfa"},{"location":"reference/displaysys/pgdisplay/#displaysys.pgdisplay.PGDisplay.bfa_area","text":"bfa_area The bottom fixed area as an Area object. Returns: tuple \u2013 The bottom fixed area.","title":"bfa_area"},{"location":"reference/displaysys/pgdisplay/#displaysys.pgdisplay.PGDisplay.brightness","text":"brightness The brightness of the display.","title":"brightness"},{"location":"reference/displaysys/pgdisplay/#displaysys.pgdisplay.PGDisplay.height","text":"height The height of the display in pixels.","title":"height"},{"location":"reference/displaysys/pgdisplay/#displaysys.pgdisplay.PGDisplay.power","text":"power The power state of the display.","title":"power"},{"location":"reference/displaysys/pgdisplay/#displaysys.pgdisplay.PGDisplay.requires_byteswap","text":"requires_byteswap Whether the display requires byte swapping.","title":"requires_byteswap"},{"location":"reference/displaysys/pgdisplay/#displaysys.pgdisplay.PGDisplay.rotation","text":"rotation The rotation of the display.","title":"rotation"},{"location":"reference/displaysys/pgdisplay/#displaysys.pgdisplay.PGDisplay.tfa","text":"tfa The top fixed area set by set_vscroll or vscrdef. Returns: int \u2013 The top fixed area.","title":"tfa"},{"location":"reference/displaysys/pgdisplay/#displaysys.pgdisplay.PGDisplay.tfa_area","text":"tfa_area The top fixed area as an Area object. Returns: tuple \u2013 The top fixed area.","title":"tfa_area"},{"location":"reference/displaysys/pgdisplay/#displaysys.pgdisplay.PGDisplay.touch_device","text":"touch_device The touch device.","title":"touch_device"},{"location":"reference/displaysys/pgdisplay/#displaysys.pgdisplay.PGDisplay.vsa","text":"vsa The vertical scroll area set by set_vscroll or vscrdef. Returns: int \u2013 The vertical scroll area.","title":"vsa"},{"location":"reference/displaysys/pgdisplay/#displaysys.pgdisplay.PGDisplay.vsa_area","text":"vsa_area The vertical scroll area as an Area object. Returns: tuple \u2013 The vertical scroll area.","title":"vsa_area"},{"location":"reference/displaysys/pgdisplay/#displaysys.pgdisplay.PGDisplay.vscroll","text":"vscroll The vertical scroll position relative to the top fixed area. Returns: int \u2013 The vertical scroll position.","title":"vscroll"},{"location":"reference/displaysys/pgdisplay/#displaysys.pgdisplay.PGDisplay.width","text":"width The width of the display in pixels.","title":"width"},{"location":"reference/displaysys/pgdisplay/#displaysys.pgdisplay.PGDisplay-functions","text":"","title":"Functions"},{"location":"reference/displaysys/pgdisplay/#displaysys.pgdisplay.PGDisplay.blit_rect","text":"blit_rect ( buffer , x , y , w , h ) Blits a buffer to the display. Parameters: buffer ( memoryview ) \u2013 The buffer to blit. x ( int ) \u2013 The x-coordinate of the buffer. y ( int ) \u2013 The y-coordinate of the buffer. w ( int ) \u2013 The width to blit. h ( int ) \u2013 The height to blit. Returns: tuple \u2013 A tuple containing the x, y, w, h values.","title":"blit_rect"},{"location":"reference/displaysys/pgdisplay/#displaysys.pgdisplay.PGDisplay.blit_transparent","text":"blit_transparent ( buf , x , y , w , h , key ) Blit a buffer with transparency. Parameters: buf ( memoryview ) \u2013 The buffer to blit. x ( int ) \u2013 The x coordinate to blit to. y ( int ) \u2013 The y coordinate to blit to. w ( int ) \u2013 The width to blit. h ( int ) \u2013 The height to blit. key ( int ) \u2013 The color key to use for transparency. Returns: tuple \u2013 The x, y, w, h coordinates of the blitted area.","title":"blit_transparent"},{"location":"reference/displaysys/pgdisplay/#displaysys.pgdisplay.PGDisplay.deinit","text":"deinit () Deinitializes the pygame instance.","title":"deinit"},{"location":"reference/displaysys/pgdisplay/#displaysys.pgdisplay.PGDisplay.disable_auto_byteswap","text":"disable_auto_byteswap ( value ) Disable byte swapping in the display driver. If self.requires_byteswap and the guest application is capable of byte swapping color data check to see if byte swapping can be disabled. If so, disable it. Usage # If byte swapping is required and the display driver is capable of having byte swapping disabled, # disable it and set a flag so we can swap the color bytes as they are created. if display_drv.requires_byteswap: needs_swap = display_drv.disable_auto_byteswap(True) else: needs_swap = False Parameters: value ( bool ) \u2013 Whether to disable byte swapping. Returns: bool \u2013 Whether byte swapping was disabled successfully.","title":"disable_auto_byteswap"},{"location":"reference/displaysys/pgdisplay/#displaysys.pgdisplay.PGDisplay.fill","text":"fill ( color ) Fill the display with a color. Parameters: color ( int ) \u2013 The color to fill the display with.","title":"fill"},{"location":"reference/displaysys/pgdisplay/#displaysys.pgdisplay.PGDisplay.fill_rect","text":"fill_rect ( x , y , w , h , c ) Fill a rectangle with a color. Renders to the texture instead of directly to the window to facilitate scrolling and scaling. Parameters: x ( int ) \u2013 The x-coordinate of the rectangle. y ( int ) \u2013 The y-coordinate of the rectangle. w ( int ) \u2013 The width of the rectangle. h ( int ) \u2013 The height of the rectangle. c ( int ) \u2013 The color of the rectangle. Returns: tuple \u2013 A tuple containing the x, y, w, h values.","title":"fill_rect"},{"location":"reference/displaysys/pgdisplay/#displaysys.pgdisplay.PGDisplay.hard_reset","text":"hard_reset () Perform a hardware reset of the display. Should be overridden by the subclass.","title":"hard_reset"},{"location":"reference/displaysys/pgdisplay/#displaysys.pgdisplay.PGDisplay.init","text":"init () Initializes the display instance. Called by init and rotation setter.","title":"init"},{"location":"reference/displaysys/pgdisplay/#displaysys.pgdisplay.PGDisplay.invert_colors","text":"invert_colors ( value ) Invert the colors of the display. Should be overridden by the subclass. Parameters: value ( bool ) \u2013 True to invert the colors, False to restore the colors.","title":"invert_colors"},{"location":"reference/displaysys/pgdisplay/#displaysys.pgdisplay.PGDisplay.pixel","text":"pixel ( x , y , c ) Set a pixel on the display. Parameters: x ( int ) \u2013 The x-coordinate of the pixel. y ( int ) \u2013 The y-coordinate of the pixel. c ( int ) \u2013 The color of the pixel. Returns: tuple \u2013 A tuple containing the x, y, w & h values.","title":"pixel"},{"location":"reference/displaysys/pgdisplay/#displaysys.pgdisplay.PGDisplay.render","text":"render ( renderRect = None ) Render the display. Automatically called after blitting or filling the display. Parameters: renderRect ( Optional [ Rect ] , default: None ) \u2013 The rectangle to render. Defaults to None.","title":"render"},{"location":"reference/displaysys/pgdisplay/#displaysys.pgdisplay.PGDisplay.reset","text":"reset () Perform a reset of the display. Should be overridden by the subclass.","title":"reset"},{"location":"reference/displaysys/pgdisplay/#displaysys.pgdisplay.PGDisplay.scroll","text":"scroll ( dx , dy ) Scroll the display. Parameters: dx ( int ) \u2013 The number of pixels to scroll horizontally. dy ( int ) \u2013 The number of pixels to scroll vertically.","title":"scroll"},{"location":"reference/displaysys/pgdisplay/#displaysys.pgdisplay.PGDisplay.set_vscroll","text":"set_vscroll ( tfa = 0 , bfa = 0 ) Set the vertical scroll definition and move the vertical scroll to the top. Parameters: tfa ( int , default: 0 ) \u2013 The top fixed area. bfa ( int , default: 0 ) \u2013 The bottom fixed area.","title":"set_vscroll"},{"location":"reference/displaysys/pgdisplay/#displaysys.pgdisplay.PGDisplay.show","text":"show ( param = None ) Show the display.","title":"show"},{"location":"reference/displaysys/pgdisplay/#displaysys.pgdisplay.PGDisplay.sleep_mode","text":"sleep_mode ( value ) Set the sleep mode of the display. Should be overridden by the subclass. Parameters: value ( bool ) \u2013 True to enter sleep mode, False to exit sleep mode.","title":"sleep_mode"},{"location":"reference/displaysys/pgdisplay/#displaysys.pgdisplay.PGDisplay.soft_reset","text":"soft_reset () Perform a software reset of the display. Should be overridden by the subclass.","title":"soft_reset"},{"location":"reference/displaysys/pgdisplay/#displaysys.pgdisplay.PGDisplay.translate_point","text":"translate_point ( point ) Translate a point from real coordinates to scrolled coordinates. Useful for touch events. Parameters: point ( tuple ) \u2013 The x and y coordinates to translate. Returns: tuple \u2013 The translated x and y coordinates.","title":"translate_point"},{"location":"reference/displaysys/pgdisplay/#displaysys.pgdisplay.PGDisplay.vscrdef","text":"vscrdef ( tfa , vsa , bfa ) Set the vertical scroll definition. Parameters: tfa ( int ) \u2013 The top fixed area. vsa ( int ) \u2013 The vertical scroll area. bfa ( int ) \u2013 The bottom fixed area.","title":"vscrdef"},{"location":"reference/displaysys/pgdisplay/#displaysys.pgdisplay.PGDisplay.vscsad","text":"vscsad ( vssa = None ) Set the vertical scroll start address. Parameters: vssa ( Optional [ int ] , default: None ) \u2013 The vertical scroll start address. Defaults to None. Returns: int ( int ) \u2013 The vertical scroll start address.","title":"vscsad"},{"location":"reference/displaysys/pgdisplay/#displaysys.pgdisplay-functions","text":"","title":"Functions"},{"location":"reference/displaysys/pgdisplay/#displaysys.pgdisplay.poll","text":"poll () Polls for an event and returns the event type and data. Returns: Optional [ Event ] \u2013 Optional[pg.event.Event | False]: The event type and data.","title":"poll"},{"location":"reference/displaysys/psdisplay/","text":"displaysys.psdisplay Classes \u00b6 PSDevices \u00b6 A class to emulate a display on PyScript. Parameters: id ( str ) \u2013 The id of the canvas element. Functions \u00b6 get_mouse_pos \u00b6 get_mouse_pos () Returns the current mouse position. Returns: tuple | None \u2013 tuple or None: The x, y coordinates of the mouse position. PSDisplay \u00b6 A class to emulate a display on PyScript. Parameters: id ( str ) \u2013 The id of the canvas element. width ( int , default: None ) \u2013 The width of the display. Defaults to None. height ( int , default: None ) \u2013 The height of the display. Defaults to None. Attributes \u00b6 bfa property \u00b6 bfa The bottom fixed area set by set_vscroll or vscrdef. Returns: int \u2013 The bottom fixed area. bfa_area property \u00b6 bfa_area The bottom fixed area as an Area object. Returns: tuple \u2013 The bottom fixed area. brightness property writable \u00b6 brightness The brightness of the display. height property \u00b6 height The height of the display in pixels. power property writable \u00b6 power The power state of the display. requires_byteswap property \u00b6 requires_byteswap Whether the display requires byte swapping. rotation property writable \u00b6 rotation The rotation of the display. tfa property \u00b6 tfa The top fixed area set by set_vscroll or vscrdef. Returns: int \u2013 The top fixed area. tfa_area property \u00b6 tfa_area The top fixed area as an Area object. Returns: tuple \u2013 The top fixed area. touch_device property writable \u00b6 touch_device The touch device. vsa property \u00b6 vsa The vertical scroll area set by set_vscroll or vscrdef. Returns: int \u2013 The vertical scroll area. vsa_area property \u00b6 vsa_area The vertical scroll area as an Area object. Returns: tuple \u2013 The vertical scroll area. vscroll property writable \u00b6 vscroll The vertical scroll position relative to the top fixed area. Returns: int \u2013 The vertical scroll position. width property \u00b6 width The width of the display in pixels. Functions \u00b6 blit_rect \u00b6 blit_rect ( buf , x , y , w , h ) Blits a buffer to the display. Parameters: buf ( bytearray ) \u2013 The buffer to blit. x ( int ) \u2013 The x-coordinate of the top-left corner of the buffer. y ( int ) \u2013 The y-coordinate of the top-left corner of the buffer. w ( int ) \u2013 The width of the buffer. h ( int ) \u2013 The height of the buffer. Returns: tuple \u2013 A tuple containing the x, y, w, h values blit_transparent \u00b6 blit_transparent ( buf , x , y , w , h , key ) Blit a buffer with transparency. Parameters: buf ( memoryview ) \u2013 The buffer to blit. x ( int ) \u2013 The x coordinate to blit to. y ( int ) \u2013 The y coordinate to blit to. w ( int ) \u2013 The width to blit. h ( int ) \u2013 The height to blit. key ( int ) \u2013 The color key to use for transparency. Returns: tuple \u2013 The x, y, w, h coordinates of the blitted area. deinit \u00b6 deinit () Deinitialize the display. disable_auto_byteswap \u00b6 disable_auto_byteswap ( value ) Disable byte swapping in the display driver. If self.requires_byteswap and the guest application is capable of byte swapping color data check to see if byte swapping can be disabled. If so, disable it. Usage # If byte swapping is required and the display driver is capable of having byte swapping disabled, # disable it and set a flag so we can swap the color bytes as they are created. if display_drv.requires_byteswap: needs_swap = display_drv.disable_auto_byteswap(True) else: needs_swap = False Parameters: value ( bool ) \u2013 Whether to disable byte swapping. Returns: bool \u2013 Whether byte swapping was disabled successfully. fill \u00b6 fill ( color ) Fill the display with a color. Parameters: color ( int ) \u2013 The color to fill the display with. fill_rect \u00b6 fill_rect ( x , y , w , h , c ) Fills a rectangle with the given color. Parameters: x ( int ) \u2013 The x-coordinate of the top-left corner of the rectangle. y ( int ) \u2013 The y-coordinate of the top-left corner of the rectangle. w ( int ) \u2013 The width of the rectangle. h ( int ) \u2013 The height of the rectangle. c ( int ) \u2013 The color to fill the rectangle with. Returns: tuple \u2013 A tuple containing the x, y, w, h values hard_reset \u00b6 hard_reset () Perform a hardware reset of the display. Should be overridden by the subclass. init \u00b6 init () Initializes the display instance. Called by init and rotation setter. invert_colors \u00b6 invert_colors ( value ) Invert the colors of the display. Should be overridden by the subclass. Parameters: value ( bool ) \u2013 True to invert the colors, False to restore the colors. pixel \u00b6 pixel ( x , y , c ) Sets a pixel to the given color. Parameters: x ( int ) \u2013 The x-coordinate of the pixel. y ( int ) \u2013 The y-coordinate of the pixel. c ( int ) \u2013 The color to set the pixel to. Returns: tuple \u2013 A tuple containing the x, y, w & h values. reset \u00b6 reset () Perform a reset of the display. Should be overridden by the subclass. scroll \u00b6 scroll ( dx , dy ) Scroll the display. Parameters: dx ( int ) \u2013 The number of pixels to scroll horizontally. dy ( int ) \u2013 The number of pixels to scroll vertically. set_vscroll \u00b6 set_vscroll ( tfa = 0 , bfa = 0 ) Set the vertical scroll definition and move the vertical scroll to the top. Parameters: tfa ( int , default: 0 ) \u2013 The top fixed area. bfa ( int , default: 0 ) \u2013 The bottom fixed area. show \u00b6 show ( * args , ** kwargs ) Show the display. Base class method does nothing. May be overridden by subclasses. sleep_mode \u00b6 sleep_mode ( value ) Set the sleep mode of the display. Should be overridden by the subclass. Parameters: value ( bool ) \u2013 True to enter sleep mode, False to exit sleep mode. soft_reset \u00b6 soft_reset () Perform a software reset of the display. Should be overridden by the subclass. translate_point \u00b6 translate_point ( point ) Translate a point from real coordinates to scrolled coordinates. Useful for touch events. Parameters: point ( tuple ) \u2013 The x and y coordinates to translate. Returns: tuple \u2013 The translated x and y coordinates. vscrdef \u00b6 vscrdef ( tfa , vsa , bfa ) Set the vertical scroll definition. Should be overridden by the subclass and called as super().vscrdef(tfa, vsa, bfa). Parameters: tfa ( int ) \u2013 The top fixed area. vsa ( int ) \u2013 The vertical scroll area. bfa ( int ) \u2013 The bottom fixed area. vscsad \u00b6 vscsad ( vssa = None ) Set or get the vertical scroll start address. Should be overridden by the subclass and called as super().vscsad(y). Parameters: vssa ( int , default: None ) \u2013 The vertical scroll start address. Returns: int \u2013 The vertical scroll start address. Functions \u00b6","title":"psdisplay"},{"location":"reference/displaysys/psdisplay/#displaysys.psdisplay-classes","text":"","title":"Classes"},{"location":"reference/displaysys/psdisplay/#displaysys.psdisplay.PSDevices","text":"A class to emulate a display on PyScript. Parameters: id ( str ) \u2013 The id of the canvas element.","title":"PSDevices"},{"location":"reference/displaysys/psdisplay/#displaysys.psdisplay.PSDevices-functions","text":"","title":"Functions"},{"location":"reference/displaysys/psdisplay/#displaysys.psdisplay.PSDevices.get_mouse_pos","text":"get_mouse_pos () Returns the current mouse position. Returns: tuple | None \u2013 tuple or None: The x, y coordinates of the mouse position.","title":"get_mouse_pos"},{"location":"reference/displaysys/psdisplay/#displaysys.psdisplay.PSDisplay","text":"A class to emulate a display on PyScript. Parameters: id ( str ) \u2013 The id of the canvas element. width ( int , default: None ) \u2013 The width of the display. Defaults to None. height ( int , default: None ) \u2013 The height of the display. Defaults to None.","title":"PSDisplay"},{"location":"reference/displaysys/psdisplay/#displaysys.psdisplay.PSDisplay-attributes","text":"","title":"Attributes"},{"location":"reference/displaysys/psdisplay/#displaysys.psdisplay.PSDisplay.bfa","text":"bfa The bottom fixed area set by set_vscroll or vscrdef. Returns: int \u2013 The bottom fixed area.","title":"bfa"},{"location":"reference/displaysys/psdisplay/#displaysys.psdisplay.PSDisplay.bfa_area","text":"bfa_area The bottom fixed area as an Area object. Returns: tuple \u2013 The bottom fixed area.","title":"bfa_area"},{"location":"reference/displaysys/psdisplay/#displaysys.psdisplay.PSDisplay.brightness","text":"brightness The brightness of the display.","title":"brightness"},{"location":"reference/displaysys/psdisplay/#displaysys.psdisplay.PSDisplay.height","text":"height The height of the display in pixels.","title":"height"},{"location":"reference/displaysys/psdisplay/#displaysys.psdisplay.PSDisplay.power","text":"power The power state of the display.","title":"power"},{"location":"reference/displaysys/psdisplay/#displaysys.psdisplay.PSDisplay.requires_byteswap","text":"requires_byteswap Whether the display requires byte swapping.","title":"requires_byteswap"},{"location":"reference/displaysys/psdisplay/#displaysys.psdisplay.PSDisplay.rotation","text":"rotation The rotation of the display.","title":"rotation"},{"location":"reference/displaysys/psdisplay/#displaysys.psdisplay.PSDisplay.tfa","text":"tfa The top fixed area set by set_vscroll or vscrdef. Returns: int \u2013 The top fixed area.","title":"tfa"},{"location":"reference/displaysys/psdisplay/#displaysys.psdisplay.PSDisplay.tfa_area","text":"tfa_area The top fixed area as an Area object. Returns: tuple \u2013 The top fixed area.","title":"tfa_area"},{"location":"reference/displaysys/psdisplay/#displaysys.psdisplay.PSDisplay.touch_device","text":"touch_device The touch device.","title":"touch_device"},{"location":"reference/displaysys/psdisplay/#displaysys.psdisplay.PSDisplay.vsa","text":"vsa The vertical scroll area set by set_vscroll or vscrdef. Returns: int \u2013 The vertical scroll area.","title":"vsa"},{"location":"reference/displaysys/psdisplay/#displaysys.psdisplay.PSDisplay.vsa_area","text":"vsa_area The vertical scroll area as an Area object. Returns: tuple \u2013 The vertical scroll area.","title":"vsa_area"},{"location":"reference/displaysys/psdisplay/#displaysys.psdisplay.PSDisplay.vscroll","text":"vscroll The vertical scroll position relative to the top fixed area. Returns: int \u2013 The vertical scroll position.","title":"vscroll"},{"location":"reference/displaysys/psdisplay/#displaysys.psdisplay.PSDisplay.width","text":"width The width of the display in pixels.","title":"width"},{"location":"reference/displaysys/psdisplay/#displaysys.psdisplay.PSDisplay-functions","text":"","title":"Functions"},{"location":"reference/displaysys/psdisplay/#displaysys.psdisplay.PSDisplay.blit_rect","text":"blit_rect ( buf , x , y , w , h ) Blits a buffer to the display. Parameters: buf ( bytearray ) \u2013 The buffer to blit. x ( int ) \u2013 The x-coordinate of the top-left corner of the buffer. y ( int ) \u2013 The y-coordinate of the top-left corner of the buffer. w ( int ) \u2013 The width of the buffer. h ( int ) \u2013 The height of the buffer. Returns: tuple \u2013 A tuple containing the x, y, w, h values","title":"blit_rect"},{"location":"reference/displaysys/psdisplay/#displaysys.psdisplay.PSDisplay.blit_transparent","text":"blit_transparent ( buf , x , y , w , h , key ) Blit a buffer with transparency. Parameters: buf ( memoryview ) \u2013 The buffer to blit. x ( int ) \u2013 The x coordinate to blit to. y ( int ) \u2013 The y coordinate to blit to. w ( int ) \u2013 The width to blit. h ( int ) \u2013 The height to blit. key ( int ) \u2013 The color key to use for transparency. Returns: tuple \u2013 The x, y, w, h coordinates of the blitted area.","title":"blit_transparent"},{"location":"reference/displaysys/psdisplay/#displaysys.psdisplay.PSDisplay.deinit","text":"deinit () Deinitialize the display.","title":"deinit"},{"location":"reference/displaysys/psdisplay/#displaysys.psdisplay.PSDisplay.disable_auto_byteswap","text":"disable_auto_byteswap ( value ) Disable byte swapping in the display driver. If self.requires_byteswap and the guest application is capable of byte swapping color data check to see if byte swapping can be disabled. If so, disable it. Usage # If byte swapping is required and the display driver is capable of having byte swapping disabled, # disable it and set a flag so we can swap the color bytes as they are created. if display_drv.requires_byteswap: needs_swap = display_drv.disable_auto_byteswap(True) else: needs_swap = False Parameters: value ( bool ) \u2013 Whether to disable byte swapping. Returns: bool \u2013 Whether byte swapping was disabled successfully.","title":"disable_auto_byteswap"},{"location":"reference/displaysys/psdisplay/#displaysys.psdisplay.PSDisplay.fill","text":"fill ( color ) Fill the display with a color. Parameters: color ( int ) \u2013 The color to fill the display with.","title":"fill"},{"location":"reference/displaysys/psdisplay/#displaysys.psdisplay.PSDisplay.fill_rect","text":"fill_rect ( x , y , w , h , c ) Fills a rectangle with the given color. Parameters: x ( int ) \u2013 The x-coordinate of the top-left corner of the rectangle. y ( int ) \u2013 The y-coordinate of the top-left corner of the rectangle. w ( int ) \u2013 The width of the rectangle. h ( int ) \u2013 The height of the rectangle. c ( int ) \u2013 The color to fill the rectangle with. Returns: tuple \u2013 A tuple containing the x, y, w, h values","title":"fill_rect"},{"location":"reference/displaysys/psdisplay/#displaysys.psdisplay.PSDisplay.hard_reset","text":"hard_reset () Perform a hardware reset of the display. Should be overridden by the subclass.","title":"hard_reset"},{"location":"reference/displaysys/psdisplay/#displaysys.psdisplay.PSDisplay.init","text":"init () Initializes the display instance. Called by init and rotation setter.","title":"init"},{"location":"reference/displaysys/psdisplay/#displaysys.psdisplay.PSDisplay.invert_colors","text":"invert_colors ( value ) Invert the colors of the display. Should be overridden by the subclass. Parameters: value ( bool ) \u2013 True to invert the colors, False to restore the colors.","title":"invert_colors"},{"location":"reference/displaysys/psdisplay/#displaysys.psdisplay.PSDisplay.pixel","text":"pixel ( x , y , c ) Sets a pixel to the given color. Parameters: x ( int ) \u2013 The x-coordinate of the pixel. y ( int ) \u2013 The y-coordinate of the pixel. c ( int ) \u2013 The color to set the pixel to. Returns: tuple \u2013 A tuple containing the x, y, w & h values.","title":"pixel"},{"location":"reference/displaysys/psdisplay/#displaysys.psdisplay.PSDisplay.reset","text":"reset () Perform a reset of the display. Should be overridden by the subclass.","title":"reset"},{"location":"reference/displaysys/psdisplay/#displaysys.psdisplay.PSDisplay.scroll","text":"scroll ( dx , dy ) Scroll the display. Parameters: dx ( int ) \u2013 The number of pixels to scroll horizontally. dy ( int ) \u2013 The number of pixels to scroll vertically.","title":"scroll"},{"location":"reference/displaysys/psdisplay/#displaysys.psdisplay.PSDisplay.set_vscroll","text":"set_vscroll ( tfa = 0 , bfa = 0 ) Set the vertical scroll definition and move the vertical scroll to the top. Parameters: tfa ( int , default: 0 ) \u2013 The top fixed area. bfa ( int , default: 0 ) \u2013 The bottom fixed area.","title":"set_vscroll"},{"location":"reference/displaysys/psdisplay/#displaysys.psdisplay.PSDisplay.show","text":"show ( * args , ** kwargs ) Show the display. Base class method does nothing. May be overridden by subclasses.","title":"show"},{"location":"reference/displaysys/psdisplay/#displaysys.psdisplay.PSDisplay.sleep_mode","text":"sleep_mode ( value ) Set the sleep mode of the display. Should be overridden by the subclass. Parameters: value ( bool ) \u2013 True to enter sleep mode, False to exit sleep mode.","title":"sleep_mode"},{"location":"reference/displaysys/psdisplay/#displaysys.psdisplay.PSDisplay.soft_reset","text":"soft_reset () Perform a software reset of the display. Should be overridden by the subclass.","title":"soft_reset"},{"location":"reference/displaysys/psdisplay/#displaysys.psdisplay.PSDisplay.translate_point","text":"translate_point ( point ) Translate a point from real coordinates to scrolled coordinates. Useful for touch events. Parameters: point ( tuple ) \u2013 The x and y coordinates to translate. Returns: tuple \u2013 The translated x and y coordinates.","title":"translate_point"},{"location":"reference/displaysys/psdisplay/#displaysys.psdisplay.PSDisplay.vscrdef","text":"vscrdef ( tfa , vsa , bfa ) Set the vertical scroll definition. Should be overridden by the subclass and called as super().vscrdef(tfa, vsa, bfa). Parameters: tfa ( int ) \u2013 The top fixed area. vsa ( int ) \u2013 The vertical scroll area. bfa ( int ) \u2013 The bottom fixed area.","title":"vscrdef"},{"location":"reference/displaysys/psdisplay/#displaysys.psdisplay.PSDisplay.vscsad","text":"vscsad ( vssa = None ) Set or get the vertical scroll start address. Should be overridden by the subclass and called as super().vscsad(y). Parameters: vssa ( int , default: None ) \u2013 The vertical scroll start address. Returns: int \u2013 The vertical scroll start address.","title":"vscsad"},{"location":"reference/displaysys/psdisplay/#displaysys.psdisplay-functions","text":"","title":"Functions"},{"location":"reference/displaysys/sdldisplay/","text":"displaysys.sdldisplay Classes \u00b6 SDLDisplay \u00b6 A class to emulate an LCD using SDL2. Provides scrolling and rotation functions similar to an LCD. The .texture object functions as the LCD's internal memory. Parameters: width ( int , default: 320 ) \u2013 The width of the display. Defaults to 320. height ( int , default: 240 ) \u2013 The height of the display. Defaults to 240. rotation ( int , default: 0 ) \u2013 The rotation of the display. Defaults to 0. color_depth ( int , default: 16 ) \u2013 The color depth of the display. Defaults to 16. title ( str , default: 'SDL2 Display' ) \u2013 The title of the display window. Defaults to \"SDL2 Display\". scale ( float , default: 1.0 ) \u2013 The scale of the display. Defaults to 1.0. window_flags ( int , default: SDL_WINDOW_SHOWN ) \u2013 The flags for creating the display window. Defaults to SDL_WINDOW_SHOWN. render_flags ( int , default: SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC ) \u2013 The flags for creating the renderer. Defaults to SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC. x ( int , default: SDL_WINDOWPOS_CENTERED ) \u2013 The x-coordinate of the display window's position. Defaults to SDL_WINDOWPOS_CENTERED. y ( int , default: SDL_WINDOWPOS_CENTERED ) \u2013 The y-coordinate of the display window's position. Defaults to SDL_WINDOWPOS_CENTERED. Attributes \u00b6 bfa property \u00b6 bfa The bottom fixed area set by set_vscroll or vscrdef. Returns: int \u2013 The bottom fixed area. bfa_area property \u00b6 bfa_area The bottom fixed area as an Area object. Returns: tuple \u2013 The bottom fixed area. brightness property writable \u00b6 brightness The brightness of the display. height property \u00b6 height The height of the display in pixels. power property writable \u00b6 power The power state of the display. requires_byteswap property \u00b6 requires_byteswap Whether the display requires byte swapping. rotation property writable \u00b6 rotation The rotation of the display. tfa property \u00b6 tfa The top fixed area set by set_vscroll or vscrdef. Returns: int \u2013 The top fixed area. tfa_area property \u00b6 tfa_area The top fixed area as an Area object. Returns: tuple \u2013 The top fixed area. touch_device property writable \u00b6 touch_device The touch device. vsa property \u00b6 vsa The vertical scroll area set by set_vscroll or vscrdef. Returns: int \u2013 The vertical scroll area. vsa_area property \u00b6 vsa_area The vertical scroll area as an Area object. Returns: tuple \u2013 The vertical scroll area. vscroll property writable \u00b6 vscroll The vertical scroll position relative to the top fixed area. Returns: int \u2013 The vertical scroll position. width property \u00b6 width The width of the display in pixels. Functions \u00b6 blit_rect \u00b6 blit_rect ( buffer , x , y , w , h ) Blits a buffer to the display. Parameters: buffer ( memoryview ) \u2013 The buffer to blit. x ( int ) \u2013 The x-coordinate of the buffer. y ( int ) \u2013 The y-coordinate of the buffer. w ( int ) \u2013 The width to blit. h ( int ) \u2013 The height to blit. Returns: tuple \u2013 A tuple containing the x, y, w, h values. blit_transparent \u00b6 blit_transparent ( buf , x , y , w , h , key ) Blit a buffer with transparency. Parameters: buf ( memoryview ) \u2013 The buffer to blit. x ( int ) \u2013 The x coordinate to blit to. y ( int ) \u2013 The y coordinate to blit to. w ( int ) \u2013 The width to blit. h ( int ) \u2013 The height to blit. key ( int ) \u2013 The color key to use for transparency. Returns: tuple \u2013 The x, y, w, h coordinates of the blitted area. deinit \u00b6 deinit () Deinitializes the sdl2lcd instance. disable_auto_byteswap \u00b6 disable_auto_byteswap ( value ) Disable byte swapping in the display driver. If self.requires_byteswap and the guest application is capable of byte swapping color data check to see if byte swapping can be disabled. If so, disable it. Usage # If byte swapping is required and the display driver is capable of having byte swapping disabled, # disable it and set a flag so we can swap the color bytes as they are created. if display_drv.requires_byteswap: needs_swap = display_drv.disable_auto_byteswap(True) else: needs_swap = False Parameters: value ( bool ) \u2013 Whether to disable byte swapping. Returns: bool \u2013 Whether byte swapping was disabled successfully. fill \u00b6 fill ( color ) Fill the display with a color. Parameters: color ( int ) \u2013 The color to fill the display with. fill_rect \u00b6 fill_rect ( x , y , w , h , c ) Fill a rectangle with a color. Renders to the texture instead of directly to the window to facilitate scrolling and scaling. Parameters: x ( int ) \u2013 The x-coordinate of the rectangle. y ( int ) \u2013 The y-coordinate of the rectangle. w ( int ) \u2013 The width of the rectangle. h ( int ) \u2013 The height of the rectangle. c ( int ) \u2013 The color of the rectangle. Returns: tuple \u2013 A tuple containing the x, y, w, h values hard_reset \u00b6 hard_reset () Perform a hardware reset of the display. Should be overridden by the subclass. init \u00b6 init () Initializes the display instance. Called by init and rotation setter. invert_colors \u00b6 invert_colors ( value ) Invert the colors of the display. Should be overridden by the subclass. Parameters: value ( bool ) \u2013 True to invert the colors, False to restore the colors. pixel \u00b6 pixel ( x , y , c ) Set a pixel on the display. Parameters: x ( int ) \u2013 The x-coordinate of the pixel. y ( int ) \u2013 The y-coordinate of the pixel. c ( int ) \u2013 The color of the pixel. Returns: tuple \u2013 A tuple containing the x, y values. render \u00b6 render ( renderRect = None ) Render the display. Automatically called after blitting or filling the display. Parameters: renderRect ( Optional [ SDL_Rect ] , default: None ) \u2013 The rectangle to render. Defaults to None. reset \u00b6 reset () Perform a reset of the display. Should be overridden by the subclass. scroll \u00b6 scroll ( dx , dy ) Scroll the display. Parameters: dx ( int ) \u2013 The number of pixels to scroll horizontally. dy ( int ) \u2013 The number of pixels to scroll vertically. set_vscroll \u00b6 set_vscroll ( tfa = 0 , bfa = 0 ) Set the vertical scroll definition and move the vertical scroll to the top. Parameters: tfa ( int , default: 0 ) \u2013 The top fixed area. bfa ( int , default: 0 ) \u2013 The bottom fixed area. show \u00b6 show () Show the display. sleep_mode \u00b6 sleep_mode ( value ) Set the sleep mode of the display. Should be overridden by the subclass. Parameters: value ( bool ) \u2013 True to enter sleep mode, False to exit sleep mode. soft_reset \u00b6 soft_reset () Perform a software reset of the display. Should be overridden by the subclass. translate_point \u00b6 translate_point ( point ) Translate a point from real coordinates to scrolled coordinates. Useful for touch events. Parameters: point ( tuple ) \u2013 The x and y coordinates to translate. Returns: tuple \u2013 The translated x and y coordinates. vscrdef \u00b6 vscrdef ( tfa , vsa , bfa ) Set the vertical scroll definition. Parameters: tfa ( int ) \u2013 The top fixed area. vsa ( int ) \u2013 The vertical scroll area. bfa ( int ) \u2013 The bottom fixed area. vscsad \u00b6 vscsad ( vssa = None ) Set or get the vertical scroll start address. Parameters: vssa ( int , default: None ) \u2013 The vertical scroll start address. Defaults to None. Returns: int ( int ) \u2013 The vertical scroll start address. Functions \u00b6 poll \u00b6 poll () Polls for an event and returns the event type and data. Returns: Optional [ events ] \u2013 Optional[events]: The event type and data.","title":"sdldisplay"},{"location":"reference/displaysys/sdldisplay/#displaysys.sdldisplay-classes","text":"","title":"Classes"},{"location":"reference/displaysys/sdldisplay/#displaysys.sdldisplay.SDLDisplay","text":"A class to emulate an LCD using SDL2. Provides scrolling and rotation functions similar to an LCD. The .texture object functions as the LCD's internal memory. Parameters: width ( int , default: 320 ) \u2013 The width of the display. Defaults to 320. height ( int , default: 240 ) \u2013 The height of the display. Defaults to 240. rotation ( int , default: 0 ) \u2013 The rotation of the display. Defaults to 0. color_depth ( int , default: 16 ) \u2013 The color depth of the display. Defaults to 16. title ( str , default: 'SDL2 Display' ) \u2013 The title of the display window. Defaults to \"SDL2 Display\". scale ( float , default: 1.0 ) \u2013 The scale of the display. Defaults to 1.0. window_flags ( int , default: SDL_WINDOW_SHOWN ) \u2013 The flags for creating the display window. Defaults to SDL_WINDOW_SHOWN. render_flags ( int , default: SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC ) \u2013 The flags for creating the renderer. Defaults to SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC. x ( int , default: SDL_WINDOWPOS_CENTERED ) \u2013 The x-coordinate of the display window's position. Defaults to SDL_WINDOWPOS_CENTERED. y ( int , default: SDL_WINDOWPOS_CENTERED ) \u2013 The y-coordinate of the display window's position. Defaults to SDL_WINDOWPOS_CENTERED.","title":"SDLDisplay"},{"location":"reference/displaysys/sdldisplay/#displaysys.sdldisplay.SDLDisplay-attributes","text":"","title":"Attributes"},{"location":"reference/displaysys/sdldisplay/#displaysys.sdldisplay.SDLDisplay.bfa","text":"bfa The bottom fixed area set by set_vscroll or vscrdef. Returns: int \u2013 The bottom fixed area.","title":"bfa"},{"location":"reference/displaysys/sdldisplay/#displaysys.sdldisplay.SDLDisplay.bfa_area","text":"bfa_area The bottom fixed area as an Area object. Returns: tuple \u2013 The bottom fixed area.","title":"bfa_area"},{"location":"reference/displaysys/sdldisplay/#displaysys.sdldisplay.SDLDisplay.brightness","text":"brightness The brightness of the display.","title":"brightness"},{"location":"reference/displaysys/sdldisplay/#displaysys.sdldisplay.SDLDisplay.height","text":"height The height of the display in pixels.","title":"height"},{"location":"reference/displaysys/sdldisplay/#displaysys.sdldisplay.SDLDisplay.power","text":"power The power state of the display.","title":"power"},{"location":"reference/displaysys/sdldisplay/#displaysys.sdldisplay.SDLDisplay.requires_byteswap","text":"requires_byteswap Whether the display requires byte swapping.","title":"requires_byteswap"},{"location":"reference/displaysys/sdldisplay/#displaysys.sdldisplay.SDLDisplay.rotation","text":"rotation The rotation of the display.","title":"rotation"},{"location":"reference/displaysys/sdldisplay/#displaysys.sdldisplay.SDLDisplay.tfa","text":"tfa The top fixed area set by set_vscroll or vscrdef. Returns: int \u2013 The top fixed area.","title":"tfa"},{"location":"reference/displaysys/sdldisplay/#displaysys.sdldisplay.SDLDisplay.tfa_area","text":"tfa_area The top fixed area as an Area object. Returns: tuple \u2013 The top fixed area.","title":"tfa_area"},{"location":"reference/displaysys/sdldisplay/#displaysys.sdldisplay.SDLDisplay.touch_device","text":"touch_device The touch device.","title":"touch_device"},{"location":"reference/displaysys/sdldisplay/#displaysys.sdldisplay.SDLDisplay.vsa","text":"vsa The vertical scroll area set by set_vscroll or vscrdef. Returns: int \u2013 The vertical scroll area.","title":"vsa"},{"location":"reference/displaysys/sdldisplay/#displaysys.sdldisplay.SDLDisplay.vsa_area","text":"vsa_area The vertical scroll area as an Area object. Returns: tuple \u2013 The vertical scroll area.","title":"vsa_area"},{"location":"reference/displaysys/sdldisplay/#displaysys.sdldisplay.SDLDisplay.vscroll","text":"vscroll The vertical scroll position relative to the top fixed area. Returns: int \u2013 The vertical scroll position.","title":"vscroll"},{"location":"reference/displaysys/sdldisplay/#displaysys.sdldisplay.SDLDisplay.width","text":"width The width of the display in pixels.","title":"width"},{"location":"reference/displaysys/sdldisplay/#displaysys.sdldisplay.SDLDisplay-functions","text":"","title":"Functions"},{"location":"reference/displaysys/sdldisplay/#displaysys.sdldisplay.SDLDisplay.blit_rect","text":"blit_rect ( buffer , x , y , w , h ) Blits a buffer to the display. Parameters: buffer ( memoryview ) \u2013 The buffer to blit. x ( int ) \u2013 The x-coordinate of the buffer. y ( int ) \u2013 The y-coordinate of the buffer. w ( int ) \u2013 The width to blit. h ( int ) \u2013 The height to blit. Returns: tuple \u2013 A tuple containing the x, y, w, h values.","title":"blit_rect"},{"location":"reference/displaysys/sdldisplay/#displaysys.sdldisplay.SDLDisplay.blit_transparent","text":"blit_transparent ( buf , x , y , w , h , key ) Blit a buffer with transparency. Parameters: buf ( memoryview ) \u2013 The buffer to blit. x ( int ) \u2013 The x coordinate to blit to. y ( int ) \u2013 The y coordinate to blit to. w ( int ) \u2013 The width to blit. h ( int ) \u2013 The height to blit. key ( int ) \u2013 The color key to use for transparency. Returns: tuple \u2013 The x, y, w, h coordinates of the blitted area.","title":"blit_transparent"},{"location":"reference/displaysys/sdldisplay/#displaysys.sdldisplay.SDLDisplay.deinit","text":"deinit () Deinitializes the sdl2lcd instance.","title":"deinit"},{"location":"reference/displaysys/sdldisplay/#displaysys.sdldisplay.SDLDisplay.disable_auto_byteswap","text":"disable_auto_byteswap ( value ) Disable byte swapping in the display driver. If self.requires_byteswap and the guest application is capable of byte swapping color data check to see if byte swapping can be disabled. If so, disable it. Usage # If byte swapping is required and the display driver is capable of having byte swapping disabled, # disable it and set a flag so we can swap the color bytes as they are created. if display_drv.requires_byteswap: needs_swap = display_drv.disable_auto_byteswap(True) else: needs_swap = False Parameters: value ( bool ) \u2013 Whether to disable byte swapping. Returns: bool \u2013 Whether byte swapping was disabled successfully.","title":"disable_auto_byteswap"},{"location":"reference/displaysys/sdldisplay/#displaysys.sdldisplay.SDLDisplay.fill","text":"fill ( color ) Fill the display with a color. Parameters: color ( int ) \u2013 The color to fill the display with.","title":"fill"},{"location":"reference/displaysys/sdldisplay/#displaysys.sdldisplay.SDLDisplay.fill_rect","text":"fill_rect ( x , y , w , h , c ) Fill a rectangle with a color. Renders to the texture instead of directly to the window to facilitate scrolling and scaling. Parameters: x ( int ) \u2013 The x-coordinate of the rectangle. y ( int ) \u2013 The y-coordinate of the rectangle. w ( int ) \u2013 The width of the rectangle. h ( int ) \u2013 The height of the rectangle. c ( int ) \u2013 The color of the rectangle. Returns: tuple \u2013 A tuple containing the x, y, w, h values","title":"fill_rect"},{"location":"reference/displaysys/sdldisplay/#displaysys.sdldisplay.SDLDisplay.hard_reset","text":"hard_reset () Perform a hardware reset of the display. Should be overridden by the subclass.","title":"hard_reset"},{"location":"reference/displaysys/sdldisplay/#displaysys.sdldisplay.SDLDisplay.init","text":"init () Initializes the display instance. Called by init and rotation setter.","title":"init"},{"location":"reference/displaysys/sdldisplay/#displaysys.sdldisplay.SDLDisplay.invert_colors","text":"invert_colors ( value ) Invert the colors of the display. Should be overridden by the subclass. Parameters: value ( bool ) \u2013 True to invert the colors, False to restore the colors.","title":"invert_colors"},{"location":"reference/displaysys/sdldisplay/#displaysys.sdldisplay.SDLDisplay.pixel","text":"pixel ( x , y , c ) Set a pixel on the display. Parameters: x ( int ) \u2013 The x-coordinate of the pixel. y ( int ) \u2013 The y-coordinate of the pixel. c ( int ) \u2013 The color of the pixel. Returns: tuple \u2013 A tuple containing the x, y values.","title":"pixel"},{"location":"reference/displaysys/sdldisplay/#displaysys.sdldisplay.SDLDisplay.render","text":"render ( renderRect = None ) Render the display. Automatically called after blitting or filling the display. Parameters: renderRect ( Optional [ SDL_Rect ] , default: None ) \u2013 The rectangle to render. Defaults to None.","title":"render"},{"location":"reference/displaysys/sdldisplay/#displaysys.sdldisplay.SDLDisplay.reset","text":"reset () Perform a reset of the display. Should be overridden by the subclass.","title":"reset"},{"location":"reference/displaysys/sdldisplay/#displaysys.sdldisplay.SDLDisplay.scroll","text":"scroll ( dx , dy ) Scroll the display. Parameters: dx ( int ) \u2013 The number of pixels to scroll horizontally. dy ( int ) \u2013 The number of pixels to scroll vertically.","title":"scroll"},{"location":"reference/displaysys/sdldisplay/#displaysys.sdldisplay.SDLDisplay.set_vscroll","text":"set_vscroll ( tfa = 0 , bfa = 0 ) Set the vertical scroll definition and move the vertical scroll to the top. Parameters: tfa ( int , default: 0 ) \u2013 The top fixed area. bfa ( int , default: 0 ) \u2013 The bottom fixed area.","title":"set_vscroll"},{"location":"reference/displaysys/sdldisplay/#displaysys.sdldisplay.SDLDisplay.show","text":"show () Show the display.","title":"show"},{"location":"reference/displaysys/sdldisplay/#displaysys.sdldisplay.SDLDisplay.sleep_mode","text":"sleep_mode ( value ) Set the sleep mode of the display. Should be overridden by the subclass. Parameters: value ( bool ) \u2013 True to enter sleep mode, False to exit sleep mode.","title":"sleep_mode"},{"location":"reference/displaysys/sdldisplay/#displaysys.sdldisplay.SDLDisplay.soft_reset","text":"soft_reset () Perform a software reset of the display. Should be overridden by the subclass.","title":"soft_reset"},{"location":"reference/displaysys/sdldisplay/#displaysys.sdldisplay.SDLDisplay.translate_point","text":"translate_point ( point ) Translate a point from real coordinates to scrolled coordinates. Useful for touch events. Parameters: point ( tuple ) \u2013 The x and y coordinates to translate. Returns: tuple \u2013 The translated x and y coordinates.","title":"translate_point"},{"location":"reference/displaysys/sdldisplay/#displaysys.sdldisplay.SDLDisplay.vscrdef","text":"vscrdef ( tfa , vsa , bfa ) Set the vertical scroll definition. Parameters: tfa ( int ) \u2013 The top fixed area. vsa ( int ) \u2013 The vertical scroll area. bfa ( int ) \u2013 The bottom fixed area.","title":"vscrdef"},{"location":"reference/displaysys/sdldisplay/#displaysys.sdldisplay.SDLDisplay.vscsad","text":"vscsad ( vssa = None ) Set or get the vertical scroll start address. Parameters: vssa ( int , default: None ) \u2013 The vertical scroll start address. Defaults to None. Returns: int ( int ) \u2013 The vertical scroll start address.","title":"vscsad"},{"location":"reference/displaysys/sdldisplay/#displaysys.sdldisplay-functions","text":"","title":"Functions"},{"location":"reference/displaysys/sdldisplay/#displaysys.sdldisplay.poll","text":"poll () Polls for an event and returns the event type and data. Returns: Optional [ events ] \u2013 Optional[events]: The event type and data.","title":"poll"},{"location":"reference/displaysys/sdldisplay/_sdl2_lib/","text":"This module provides the SDL2 library implementation for MicroPython and CPython. The module checks the implementation name and imports the appropriate module based on whether the current Python implementation is MicroPython or CPython. Functions \u00b6 SDL_DEFINE_PIXELFORMAT \u00b6 SDL_DEFINE_PIXELFORMAT ( type , order , layout , bits , bytes ) Define a pixel format. SDL_Event \u00b6 SDL_Event ( event = None ) Convert event to an SDL_Event object using ctypes. The size of the largest SDL_Event struct is 56 bytes.","title":"_sdl2_lib"},{"location":"reference/displaysys/sdldisplay/_sdl2_lib/#displaysys.sdldisplay._sdl2_lib-functions","text":"","title":"Functions"},{"location":"reference/displaysys/sdldisplay/_sdl2_lib/#displaysys.sdldisplay._sdl2_lib.SDL_DEFINE_PIXELFORMAT","text":"SDL_DEFINE_PIXELFORMAT ( type , order , layout , bits , bytes ) Define a pixel format.","title":"SDL_DEFINE_PIXELFORMAT"},{"location":"reference/displaysys/sdldisplay/_sdl2_lib/#displaysys.sdldisplay._sdl2_lib.SDL_Event","text":"SDL_Event ( event = None ) Convert event to an SDL_Event object using ctypes. The size of the largest SDL_Event struct is 56 bytes.","title":"SDL_Event"},{"location":"reference/eventsys/","text":"eventsys \u00b6 An Event System including event types and device types for *Python. Classes \u00b6 events \u00b6 A container for event types and classes. Similar to a C enum and struct. Functions \u00b6 custom_type \u00b6 custom_type ( types = {}, classes = {}) Create new event types and classes for the events class. For example, to recreate the events for the keypad device: import eventsys types = [(\"KEYDOWN\", 0x300), (\"KEYUP\", 0x301)] classes = {\"Key\": \"type name key mod scancode window\"} eventsys.custom_type(types, classes) # Optionally update the filter events.filter += [events.KEYDOWN, events.KEYUP] Parameters: types ( dict [ str , int ] , default: {} ) \u2013 Dictionary of event types and values. classes ( dict [ str , str ] , default: {} ) \u2013 Dictionary of event classes and fields.","title":"eventsys"},{"location":"reference/eventsys/#eventsys--eventsys","text":"An Event System including event types and device types for *Python.","title":"eventsys"},{"location":"reference/eventsys/#eventsys-classes","text":"","title":"Classes"},{"location":"reference/eventsys/#eventsys.events","text":"A container for event types and classes. Similar to a C enum and struct.","title":"events"},{"location":"reference/eventsys/#eventsys-functions","text":"","title":"Functions"},{"location":"reference/eventsys/#eventsys.custom_type","text":"custom_type ( types = {}, classes = {}) Create new event types and classes for the events class. For example, to recreate the events for the keypad device: import eventsys types = [(\"KEYDOWN\", 0x300), (\"KEYUP\", 0x301)] classes = {\"Key\": \"type name key mod scancode window\"} eventsys.custom_type(types, classes) # Optionally update the filter events.filter += [events.KEYDOWN, events.KEYUP] Parameters: types ( dict [ str , int ] , default: {} ) \u2013 Dictionary of event types and values. classes ( dict [ str , str ] , default: {} ) \u2013 Dictionary of event classes and fields.","title":"custom_type"},{"location":"reference/eventsys/devices/","text":"eventsys.devices \u00b6 Device classes for eventsys's Event System. May also be used with other applications. Devices are objects that poll for events and return them. They can be subscribed to and unsubscribed from to receive events. Devices can be created with Broker.create_device() or by calling the constructor of the device class directly. Devices can be subscribed to with .subscribe() and unsubscribed from with .unsubscribe(). Devices can be polled for events with .poll(). Devices can be registered with a broker device with .register_device() and unregistered with .unregister_device(). Devices can be chained together by setting the .broker property of a device to another device. Devices can be created with the following types: - types.BROKER: A device that polls multiple devices. - types.QUEUE: A device that returns multiple types of events. - types.TOUCH: A device that returns MOUSEBUTTONDOWN when touched, MOUSEMOTION when moved and MOUSEBUTTONUP when released. - types.ENCODER: A device that returns MOUSEWHEEL events when turned, MOUSEBUTTONDOWN when pressed. - types.KEYPAD: A device that returns KEYDOWN and KEYUP events when keys are pressed or released. - types.JOYSTICK: A device that returns joystick events (not implemented). Classes \u00b6 Broker \u00b6 The Broker class is a device that polls multiple devices for events and forwards them to subscribers. Attributes: type ( Devices ) \u2013 The type of the device (set to types.BROKER ). responses ( list ) \u2013 The list of event types that the device can respond to. events ( events ) \u2013 The events class for convenience. Applications can use Broker.events.KEYDOWN, etc. Attributes \u00b6 broker property writable \u00b6 broker The broker that manages this device. quit_func property writable \u00b6 quit_func The function to call when the window close button is clicked. user_data property writable \u00b6 user_data User data that can be set and retrieved by applications. Functions \u00b6 create_device \u00b6 create_device ( type = types . QUEUE , ** kwargs ) Create a device object. Parameters: type ( int , default: QUEUE ) \u2013 The type of device to create. Defaults to types.QUEUE. **kwargs ( Any , default: {} ) \u2013 Arbitrary keyword arguments for the class constructor. Returns: Device ( Device ) \u2013 The created device object. Raises: ValueError \u2013 If the device type is invalid. poll \u00b6 poll ( * args ) Poll the device for events. Parameters: *args ( Any , default: () ) \u2013 Additional arguments that can be passed to the read callback functions. Returns: Event ( events ) \u2013 The event that was polled or None if no event was polled. quit \u00b6 quit () Call the quit function. register_device \u00b6 register_device ( dev ) Register a device to be polled. Parameters: dev ( Device ) \u2013 The device object to register. subscribe \u00b6 subscribe ( callback , event_types = None , device_types = None ) Subscribes a callback function to receive events. Parameters: callback ( function ) \u2013 The callback function to subscribe. event_types ( list , default: None ) \u2013 The list of event types to subscribe to. Defaults to None. device_types ( list , default: None ) \u2013 The list of device types to subscribe to. Defaults to None. Raises: ValueError \u2013 If the callback is not callable. ValueError \u2013 If both device_types and event_types are provided. ValueError \u2013 If neither device_types nor event_types are provided. unregister_device \u00b6 unregister_device ( dev ) Unregister a device. Parameters: dev ( Device ) \u2013 The device object to unregister. unsubscribe \u00b6 unsubscribe ( callback , event_types = None , device_types = None ) Unsubscribes a callback function from receiving events. Parameters: callback ( function ) \u2013 The callback function to unsubscribe. event_types ( list , default: None ) \u2013 The list of event types to unsubscribe from. Defaults to None. device_types ( list , default: None ) \u2013 The list of device types to unsubscribe from. Defaults to None. Raises: ValueError \u2013 If both device_types and event_types are provided. ValueError \u2013 If neither device_types nor event_types are provided. Device \u00b6 Base class for devices. Must be subclassed. Should not be instantiated directly. Attributes: type ( Devices ) \u2013 The type of the device. responses ( list ) \u2013 The list of event types that the device can respond to. Attributes \u00b6 broker property writable \u00b6 broker The broker that manages this device. user_data property writable \u00b6 user_data User data that can be set and retrieved by applications. Functions \u00b6 __init__ \u00b6 __init__ ( read = None , data = None , read2 = None , data2 = None ) Create a new device object. Parameters: read ( callable , default: None ) \u2013 A function that returns an event or None. Defaults to None. data ( Any , default: None ) \u2013 Data to pass to the read function. Defaults to None. read2 ( callable , default: None ) \u2013 A function that returns a value or None. Defaults to None. data2 ( Any , default: None ) \u2013 Data to pass to the read2 function. Defaults to None. poll \u00b6 poll ( * args ) Poll the device for events. Parameters: *args ( Any , default: () ) \u2013 Additional arguments that can be passed to the read callback functions. Returns: Event ( events ) \u2013 The event that was polled or None if no event was polled. subscribe \u00b6 subscribe ( callback , event_types = None ) Subscribe to events from the device. Parameters: callback ( function ) \u2013 The function to call when an event is received. event_types ( list [ int ] | None , default: None ) \u2013 A list of event types to subscribe to. Raises: ValueError \u2013 If callback is not callable. ValueError \u2013 If any event type in event_types is not a response from this device. Example def callback(event): print(event) device.subscribe(callback, [events.MOUSEBUTTONDOWN, events.MOUSEBUTTONUP]) This will call callback when the receives a MOUSEBUTTONDOWN or MOUSEBUTTONUP event. unsubscribe \u00b6 unsubscribe ( callback , event_types = None ) Unsubscribes a callback function from one or more event types. Parameters: callback ( function ) \u2013 The callback function to unsubscribe. event_types ( list , default: None ) \u2013 A list of event types to unsubscribe from. EncoderDevice \u00b6 A class representing an encoder device. Attributes: type ( str ) \u2013 The type of the device (ENCODER). responses ( tuple ) \u2013 The events that the device can respond to (MOUSEWHEEL, MOUSEBUTTONDOWN, MOUSEBUTTONUP). Attributes \u00b6 broker property writable \u00b6 broker The broker that manages this device. user_data property writable \u00b6 user_data User data that can be set and retrieved by applications. Functions \u00b6 __init__ \u00b6 __init__ ( * args , ** kwargs ) Initializes a new instance of the EncoderDevice class. Parameters: *args ( Any , default: () ) \u2013 Variable length argument list. **kwargs ( Any , default: {} ) \u2013 Arbitrary keyword arguments. Notes self._data is the mouse button number to report for the switch. Default is 2 (middle mouse button). If the mouse button number is even, the wheel will report vertical (y) movement. If the mouse button number is odd, the wheel will report horizontal (x) movement. This corresponds to a typical mouse wheel being button 2 and the wheel moving vertically. It also corresponds to scrolling horizontally on a touchpad with two-finger scrolling and using the right button. poll \u00b6 poll ( * args ) Poll the device for events. Parameters: *args ( Any , default: () ) \u2013 Additional arguments that can be passed to the read callback functions. Returns: Event ( events ) \u2013 The event that was polled or None if no event was polled. subscribe \u00b6 subscribe ( callback , event_types = None ) Subscribe to events from the device. Parameters: callback ( function ) \u2013 The function to call when an event is received. event_types ( list [ int ] | None , default: None ) \u2013 A list of event types to subscribe to. Raises: ValueError \u2013 If callback is not callable. ValueError \u2013 If any event type in event_types is not a response from this device. Example def callback(event): print(event) device.subscribe(callback, [events.MOUSEBUTTONDOWN, events.MOUSEBUTTONUP]) This will call callback when the receives a MOUSEBUTTONDOWN or MOUSEBUTTONUP event. unsubscribe \u00b6 unsubscribe ( callback , event_types = None ) Unsubscribes a callback function from one or more event types. Parameters: callback ( function ) \u2013 The callback function to unsubscribe. event_types ( list , default: None ) \u2013 A list of event types to unsubscribe from. JoystickDevice \u00b6 Represents a joystick device. Attributes: type ( Devices ) \u2013 The type of the device, set to types.JOYSTICK . responses ( tuple ) \u2013 A tuple of event types that this device can respond to. Methods: Name Description __init__ Initializes the JoystickDevice instance. _poll Polls the device for events. Raises: NotImplementedError \u2013 If the _poll method is not implemented. Attributes \u00b6 broker property writable \u00b6 broker The broker that manages this device. user_data property writable \u00b6 user_data User data that can be set and retrieved by applications. Functions \u00b6 poll \u00b6 poll ( * args ) Poll the device for events. Parameters: *args ( Any , default: () ) \u2013 Additional arguments that can be passed to the read callback functions. Returns: Event ( events ) \u2013 The event that was polled or None if no event was polled. subscribe \u00b6 subscribe ( callback , event_types = None ) Subscribe to events from the device. Parameters: callback ( function ) \u2013 The function to call when an event is received. event_types ( list [ int ] | None , default: None ) \u2013 A list of event types to subscribe to. Raises: ValueError \u2013 If callback is not callable. ValueError \u2013 If any event type in event_types is not a response from this device. Example def callback(event): print(event) device.subscribe(callback, [events.MOUSEBUTTONDOWN, events.MOUSEBUTTONUP]) This will call callback when the receives a MOUSEBUTTONDOWN or MOUSEBUTTONUP event. unsubscribe \u00b6 unsubscribe ( callback , event_types = None ) Unsubscribes a callback function from one or more event types. Parameters: callback ( function ) \u2013 The callback function to unsubscribe. event_types ( list , default: None ) \u2013 A list of event types to unsubscribe from. KeypadDevice \u00b6 Represents a keypad device. Attributes: type ( Devices ) \u2013 The type of the device (set to types.KEYPAD ). responses ( tuple ) \u2013 The types of events that the device can respond to (set to (events.KEYDOWN, events.KEYUP) ). Methods: Name Description __init__ Initializes the KeypadDevice object. _poll Polls the keypad for key events. Attributes \u00b6 broker property writable \u00b6 broker The broker that manages this device. user_data property writable \u00b6 user_data User data that can be set and retrieved by applications. Functions \u00b6 poll \u00b6 poll ( * args ) Poll the device for events. Parameters: *args ( Any , default: () ) \u2013 Additional arguments that can be passed to the read callback functions. Returns: Event ( events ) \u2013 The event that was polled or None if no event was polled. subscribe \u00b6 subscribe ( callback , event_types = None ) Subscribe to events from the device. Parameters: callback ( function ) \u2013 The function to call when an event is received. event_types ( list [ int ] | None , default: None ) \u2013 A list of event types to subscribe to. Raises: ValueError \u2013 If callback is not callable. ValueError \u2013 If any event type in event_types is not a response from this device. Example def callback(event): print(event) device.subscribe(callback, [events.MOUSEBUTTONDOWN, events.MOUSEBUTTONUP]) This will call callback when the receives a MOUSEBUTTONDOWN or MOUSEBUTTONUP event. unsubscribe \u00b6 unsubscribe ( callback , event_types = None ) Unsubscribes a callback function from one or more event types. Parameters: callback ( function ) \u2013 The callback function to unsubscribe. event_types ( list , default: None ) \u2013 A list of event types to unsubscribe from. QueueDevice \u00b6 Represents a queue device. Attributes: type ( str ) \u2013 The type of the device. responses ( list ) \u2013 The list of events that the device can respond to. Attributes \u00b6 broker property writable \u00b6 broker The broker that manages this device. user_data property writable \u00b6 user_data User data that can be set and retrieved by applications. Functions \u00b6 peek \u00b6 peek () Peek at the next event in the queue without removing it. Returns: bool ( bool ) \u2013 True if there is an event in the queue that matches the filter in self._data, otherwise False. Note: self._data defaults to events.filter but may be set to a different list. poll \u00b6 poll ( * args ) Poll the device for events. Parameters: *args ( Any , default: () ) \u2013 Additional arguments that can be passed to the read callback functions. Returns: Event ( events ) \u2013 The event that was polled or None if no event was polled. subscribe \u00b6 subscribe ( callback , event_types = None ) Subscribe to events from the device. Parameters: callback ( function ) \u2013 The function to call when an event is received. event_types ( list [ int ] | None , default: None ) \u2013 A list of event types to subscribe to. Raises: ValueError \u2013 If callback is not callable. ValueError \u2013 If any event type in event_types is not a response from this device. Example def callback(event): print(event) device.subscribe(callback, [events.MOUSEBUTTONDOWN, events.MOUSEBUTTONUP]) This will call callback when the receives a MOUSEBUTTONDOWN or MOUSEBUTTONUP event. unsubscribe \u00b6 unsubscribe ( callback , event_types = None ) Unsubscribes a callback function from one or more event types. Parameters: callback ( function ) \u2013 The callback function to unsubscribe. event_types ( list , default: None ) \u2013 A list of event types to unsubscribe from. TouchDevice \u00b6 Represents a touch input device. This class handles touch input events and provides methods to read touch data from the underlying touch driver. It supports reporting mouse button 1 events such as mouse motion, mouse button down, and mouse button up. Attributes: type ( str ) \u2013 The type of the device (set to types.TOUCH). responses ( tuple ) \u2013 The supported event types for the device. Parameters: *args ( Any , default: () ) \u2013 Variable length argument list. **kwargs ( Any , default: {} ) \u2013 Arbitrary keyword arguments. Attributes \u00b6 broker property writable \u00b6 broker The broker that manages this device. rotation property writable \u00b6 rotation Get the rotation value of the touch device. Returns: rotation ( int ) \u2013 The rotation value in degrees. rotation_table property writable \u00b6 rotation_table Get the rotation table of the touch device. Returns: list \u2013 The rotation table. user_data property writable \u00b6 user_data User data that can be set and retrieved by applications. Functions \u00b6 poll \u00b6 poll ( * args ) Poll the device for events. Parameters: *args ( Any , default: () ) \u2013 Additional arguments that can be passed to the read callback functions. Returns: Event ( events ) \u2013 The event that was polled or None if no event was polled. subscribe \u00b6 subscribe ( callback , event_types = None ) Subscribe to events from the device. Parameters: callback ( function ) \u2013 The function to call when an event is received. event_types ( list [ int ] | None , default: None ) \u2013 A list of event types to subscribe to. Raises: ValueError \u2013 If callback is not callable. ValueError \u2013 If any event type in event_types is not a response from this device. Example def callback(event): print(event) device.subscribe(callback, [events.MOUSEBUTTONDOWN, events.MOUSEBUTTONUP]) This will call callback when the receives a MOUSEBUTTONDOWN or MOUSEBUTTONUP event. unsubscribe \u00b6 unsubscribe ( callback , event_types = None ) Unsubscribes a callback function from one or more event types. Parameters: callback ( function ) \u2013 The callback function to unsubscribe. event_types ( list , default: None ) \u2013 A list of event types to unsubscribe from. types \u00b6 Device types for the Event System. Functions \u00b6 custom_type \u00b6 custom_type ( type_name , responses ) Create a new device type with a list of responses. Parameters: type_name ( str ) \u2013 The name of the device type. responses ( list [ int ] ) \u2013 A list of event types that the device can return. Returns: Device \u2013 The newly created device type. Raises: ValueError \u2013 If type_name is not a string, responses is not a list, or any response is not an integer. ValueError \u2013 If a device type with the same name already exists in the types class. ValueError \u2013 If a device class with the same name already exists. Example To create the KEYPAD device type and KeypadDevice class: import eventsys.device as device from eventsys import events KeypadDevice = device.new_type(\"KEYPAD\", [events.KEYDOWN, events.KEYUP])","title":"devices"},{"location":"reference/eventsys/devices/#eventsys.devices--eventsysdevices","text":"Device classes for eventsys's Event System. May also be used with other applications. Devices are objects that poll for events and return them. They can be subscribed to and unsubscribed from to receive events. Devices can be created with Broker.create_device() or by calling the constructor of the device class directly. Devices can be subscribed to with .subscribe() and unsubscribed from with .unsubscribe(). Devices can be polled for events with .poll(). Devices can be registered with a broker device with .register_device() and unregistered with .unregister_device(). Devices can be chained together by setting the .broker property of a device to another device. Devices can be created with the following types: - types.BROKER: A device that polls multiple devices. - types.QUEUE: A device that returns multiple types of events. - types.TOUCH: A device that returns MOUSEBUTTONDOWN when touched, MOUSEMOTION when moved and MOUSEBUTTONUP when released. - types.ENCODER: A device that returns MOUSEWHEEL events when turned, MOUSEBUTTONDOWN when pressed. - types.KEYPAD: A device that returns KEYDOWN and KEYUP events when keys are pressed or released. - types.JOYSTICK: A device that returns joystick events (not implemented).","title":"eventsys.devices"},{"location":"reference/eventsys/devices/#eventsys.devices-classes","text":"","title":"Classes"},{"location":"reference/eventsys/devices/#eventsys.devices.Broker","text":"The Broker class is a device that polls multiple devices for events and forwards them to subscribers. Attributes: type ( Devices ) \u2013 The type of the device (set to types.BROKER ). responses ( list ) \u2013 The list of event types that the device can respond to. events ( events ) \u2013 The events class for convenience. Applications can use Broker.events.KEYDOWN, etc.","title":"Broker"},{"location":"reference/eventsys/devices/#eventsys.devices.Broker-attributes","text":"","title":"Attributes"},{"location":"reference/eventsys/devices/#eventsys.devices.Broker.broker","text":"broker The broker that manages this device.","title":"broker"},{"location":"reference/eventsys/devices/#eventsys.devices.Broker.quit_func","text":"quit_func The function to call when the window close button is clicked.","title":"quit_func"},{"location":"reference/eventsys/devices/#eventsys.devices.Broker.user_data","text":"user_data User data that can be set and retrieved by applications.","title":"user_data"},{"location":"reference/eventsys/devices/#eventsys.devices.Broker-functions","text":"","title":"Functions"},{"location":"reference/eventsys/devices/#eventsys.devices.Broker.create_device","text":"create_device ( type = types . QUEUE , ** kwargs ) Create a device object. Parameters: type ( int , default: QUEUE ) \u2013 The type of device to create. Defaults to types.QUEUE. **kwargs ( Any , default: {} ) \u2013 Arbitrary keyword arguments for the class constructor. Returns: Device ( Device ) \u2013 The created device object. Raises: ValueError \u2013 If the device type is invalid.","title":"create_device"},{"location":"reference/eventsys/devices/#eventsys.devices.Broker.poll","text":"poll ( * args ) Poll the device for events. Parameters: *args ( Any , default: () ) \u2013 Additional arguments that can be passed to the read callback functions. Returns: Event ( events ) \u2013 The event that was polled or None if no event was polled.","title":"poll"},{"location":"reference/eventsys/devices/#eventsys.devices.Broker.quit","text":"quit () Call the quit function.","title":"quit"},{"location":"reference/eventsys/devices/#eventsys.devices.Broker.register_device","text":"register_device ( dev ) Register a device to be polled. Parameters: dev ( Device ) \u2013 The device object to register.","title":"register_device"},{"location":"reference/eventsys/devices/#eventsys.devices.Broker.subscribe","text":"subscribe ( callback , event_types = None , device_types = None ) Subscribes a callback function to receive events. Parameters: callback ( function ) \u2013 The callback function to subscribe. event_types ( list , default: None ) \u2013 The list of event types to subscribe to. Defaults to None. device_types ( list , default: None ) \u2013 The list of device types to subscribe to. Defaults to None. Raises: ValueError \u2013 If the callback is not callable. ValueError \u2013 If both device_types and event_types are provided. ValueError \u2013 If neither device_types nor event_types are provided.","title":"subscribe"},{"location":"reference/eventsys/devices/#eventsys.devices.Broker.unregister_device","text":"unregister_device ( dev ) Unregister a device. Parameters: dev ( Device ) \u2013 The device object to unregister.","title":"unregister_device"},{"location":"reference/eventsys/devices/#eventsys.devices.Broker.unsubscribe","text":"unsubscribe ( callback , event_types = None , device_types = None ) Unsubscribes a callback function from receiving events. Parameters: callback ( function ) \u2013 The callback function to unsubscribe. event_types ( list , default: None ) \u2013 The list of event types to unsubscribe from. Defaults to None. device_types ( list , default: None ) \u2013 The list of device types to unsubscribe from. Defaults to None. Raises: ValueError \u2013 If both device_types and event_types are provided. ValueError \u2013 If neither device_types nor event_types are provided.","title":"unsubscribe"},{"location":"reference/eventsys/devices/#eventsys.devices.Device","text":"Base class for devices. Must be subclassed. Should not be instantiated directly. Attributes: type ( Devices ) \u2013 The type of the device. responses ( list ) \u2013 The list of event types that the device can respond to.","title":"Device"},{"location":"reference/eventsys/devices/#eventsys.devices.Device-attributes","text":"","title":"Attributes"},{"location":"reference/eventsys/devices/#eventsys.devices.Device.broker","text":"broker The broker that manages this device.","title":"broker"},{"location":"reference/eventsys/devices/#eventsys.devices.Device.user_data","text":"user_data User data that can be set and retrieved by applications.","title":"user_data"},{"location":"reference/eventsys/devices/#eventsys.devices.Device-functions","text":"","title":"Functions"},{"location":"reference/eventsys/devices/#eventsys.devices.Device.__init__","text":"__init__ ( read = None , data = None , read2 = None , data2 = None ) Create a new device object. Parameters: read ( callable , default: None ) \u2013 A function that returns an event or None. Defaults to None. data ( Any , default: None ) \u2013 Data to pass to the read function. Defaults to None. read2 ( callable , default: None ) \u2013 A function that returns a value or None. Defaults to None. data2 ( Any , default: None ) \u2013 Data to pass to the read2 function. Defaults to None.","title":"__init__"},{"location":"reference/eventsys/devices/#eventsys.devices.Device.poll","text":"poll ( * args ) Poll the device for events. Parameters: *args ( Any , default: () ) \u2013 Additional arguments that can be passed to the read callback functions. Returns: Event ( events ) \u2013 The event that was polled or None if no event was polled.","title":"poll"},{"location":"reference/eventsys/devices/#eventsys.devices.Device.subscribe","text":"subscribe ( callback , event_types = None ) Subscribe to events from the device. Parameters: callback ( function ) \u2013 The function to call when an event is received. event_types ( list [ int ] | None , default: None ) \u2013 A list of event types to subscribe to. Raises: ValueError \u2013 If callback is not callable. ValueError \u2013 If any event type in event_types is not a response from this device. Example def callback(event): print(event) device.subscribe(callback, [events.MOUSEBUTTONDOWN, events.MOUSEBUTTONUP]) This will call callback when the receives a MOUSEBUTTONDOWN or MOUSEBUTTONUP event.","title":"subscribe"},{"location":"reference/eventsys/devices/#eventsys.devices.Device.unsubscribe","text":"unsubscribe ( callback , event_types = None ) Unsubscribes a callback function from one or more event types. Parameters: callback ( function ) \u2013 The callback function to unsubscribe. event_types ( list , default: None ) \u2013 A list of event types to unsubscribe from.","title":"unsubscribe"},{"location":"reference/eventsys/devices/#eventsys.devices.EncoderDevice","text":"A class representing an encoder device. Attributes: type ( str ) \u2013 The type of the device (ENCODER). responses ( tuple ) \u2013 The events that the device can respond to (MOUSEWHEEL, MOUSEBUTTONDOWN, MOUSEBUTTONUP).","title":"EncoderDevice"},{"location":"reference/eventsys/devices/#eventsys.devices.EncoderDevice-attributes","text":"","title":"Attributes"},{"location":"reference/eventsys/devices/#eventsys.devices.EncoderDevice.broker","text":"broker The broker that manages this device.","title":"broker"},{"location":"reference/eventsys/devices/#eventsys.devices.EncoderDevice.user_data","text":"user_data User data that can be set and retrieved by applications.","title":"user_data"},{"location":"reference/eventsys/devices/#eventsys.devices.EncoderDevice-functions","text":"","title":"Functions"},{"location":"reference/eventsys/devices/#eventsys.devices.EncoderDevice.__init__","text":"__init__ ( * args , ** kwargs ) Initializes a new instance of the EncoderDevice class. Parameters: *args ( Any , default: () ) \u2013 Variable length argument list. **kwargs ( Any , default: {} ) \u2013 Arbitrary keyword arguments. Notes self._data is the mouse button number to report for the switch. Default is 2 (middle mouse button). If the mouse button number is even, the wheel will report vertical (y) movement. If the mouse button number is odd, the wheel will report horizontal (x) movement. This corresponds to a typical mouse wheel being button 2 and the wheel moving vertically. It also corresponds to scrolling horizontally on a touchpad with two-finger scrolling and using the right button.","title":"__init__"},{"location":"reference/eventsys/devices/#eventsys.devices.EncoderDevice.poll","text":"poll ( * args ) Poll the device for events. Parameters: *args ( Any , default: () ) \u2013 Additional arguments that can be passed to the read callback functions. Returns: Event ( events ) \u2013 The event that was polled or None if no event was polled.","title":"poll"},{"location":"reference/eventsys/devices/#eventsys.devices.EncoderDevice.subscribe","text":"subscribe ( callback , event_types = None ) Subscribe to events from the device. Parameters: callback ( function ) \u2013 The function to call when an event is received. event_types ( list [ int ] | None , default: None ) \u2013 A list of event types to subscribe to. Raises: ValueError \u2013 If callback is not callable. ValueError \u2013 If any event type in event_types is not a response from this device. Example def callback(event): print(event) device.subscribe(callback, [events.MOUSEBUTTONDOWN, events.MOUSEBUTTONUP]) This will call callback when the receives a MOUSEBUTTONDOWN or MOUSEBUTTONUP event.","title":"subscribe"},{"location":"reference/eventsys/devices/#eventsys.devices.EncoderDevice.unsubscribe","text":"unsubscribe ( callback , event_types = None ) Unsubscribes a callback function from one or more event types. Parameters: callback ( function ) \u2013 The callback function to unsubscribe. event_types ( list , default: None ) \u2013 A list of event types to unsubscribe from.","title":"unsubscribe"},{"location":"reference/eventsys/devices/#eventsys.devices.JoystickDevice","text":"Represents a joystick device. Attributes: type ( Devices ) \u2013 The type of the device, set to types.JOYSTICK . responses ( tuple ) \u2013 A tuple of event types that this device can respond to. Methods: Name Description __init__ Initializes the JoystickDevice instance. _poll Polls the device for events. Raises: NotImplementedError \u2013 If the _poll method is not implemented.","title":"JoystickDevice"},{"location":"reference/eventsys/devices/#eventsys.devices.JoystickDevice-attributes","text":"","title":"Attributes"},{"location":"reference/eventsys/devices/#eventsys.devices.JoystickDevice.broker","text":"broker The broker that manages this device.","title":"broker"},{"location":"reference/eventsys/devices/#eventsys.devices.JoystickDevice.user_data","text":"user_data User data that can be set and retrieved by applications.","title":"user_data"},{"location":"reference/eventsys/devices/#eventsys.devices.JoystickDevice-functions","text":"","title":"Functions"},{"location":"reference/eventsys/devices/#eventsys.devices.JoystickDevice.poll","text":"poll ( * args ) Poll the device for events. Parameters: *args ( Any , default: () ) \u2013 Additional arguments that can be passed to the read callback functions. Returns: Event ( events ) \u2013 The event that was polled or None if no event was polled.","title":"poll"},{"location":"reference/eventsys/devices/#eventsys.devices.JoystickDevice.subscribe","text":"subscribe ( callback , event_types = None ) Subscribe to events from the device. Parameters: callback ( function ) \u2013 The function to call when an event is received. event_types ( list [ int ] | None , default: None ) \u2013 A list of event types to subscribe to. Raises: ValueError \u2013 If callback is not callable. ValueError \u2013 If any event type in event_types is not a response from this device. Example def callback(event): print(event) device.subscribe(callback, [events.MOUSEBUTTONDOWN, events.MOUSEBUTTONUP]) This will call callback when the receives a MOUSEBUTTONDOWN or MOUSEBUTTONUP event.","title":"subscribe"},{"location":"reference/eventsys/devices/#eventsys.devices.JoystickDevice.unsubscribe","text":"unsubscribe ( callback , event_types = None ) Unsubscribes a callback function from one or more event types. Parameters: callback ( function ) \u2013 The callback function to unsubscribe. event_types ( list , default: None ) \u2013 A list of event types to unsubscribe from.","title":"unsubscribe"},{"location":"reference/eventsys/devices/#eventsys.devices.KeypadDevice","text":"Represents a keypad device. Attributes: type ( Devices ) \u2013 The type of the device (set to types.KEYPAD ). responses ( tuple ) \u2013 The types of events that the device can respond to (set to (events.KEYDOWN, events.KEYUP) ). Methods: Name Description __init__ Initializes the KeypadDevice object. _poll Polls the keypad for key events.","title":"KeypadDevice"},{"location":"reference/eventsys/devices/#eventsys.devices.KeypadDevice-attributes","text":"","title":"Attributes"},{"location":"reference/eventsys/devices/#eventsys.devices.KeypadDevice.broker","text":"broker The broker that manages this device.","title":"broker"},{"location":"reference/eventsys/devices/#eventsys.devices.KeypadDevice.user_data","text":"user_data User data that can be set and retrieved by applications.","title":"user_data"},{"location":"reference/eventsys/devices/#eventsys.devices.KeypadDevice-functions","text":"","title":"Functions"},{"location":"reference/eventsys/devices/#eventsys.devices.KeypadDevice.poll","text":"poll ( * args ) Poll the device for events. Parameters: *args ( Any , default: () ) \u2013 Additional arguments that can be passed to the read callback functions. Returns: Event ( events ) \u2013 The event that was polled or None if no event was polled.","title":"poll"},{"location":"reference/eventsys/devices/#eventsys.devices.KeypadDevice.subscribe","text":"subscribe ( callback , event_types = None ) Subscribe to events from the device. Parameters: callback ( function ) \u2013 The function to call when an event is received. event_types ( list [ int ] | None , default: None ) \u2013 A list of event types to subscribe to. Raises: ValueError \u2013 If callback is not callable. ValueError \u2013 If any event type in event_types is not a response from this device. Example def callback(event): print(event) device.subscribe(callback, [events.MOUSEBUTTONDOWN, events.MOUSEBUTTONUP]) This will call callback when the receives a MOUSEBUTTONDOWN or MOUSEBUTTONUP event.","title":"subscribe"},{"location":"reference/eventsys/devices/#eventsys.devices.KeypadDevice.unsubscribe","text":"unsubscribe ( callback , event_types = None ) Unsubscribes a callback function from one or more event types. Parameters: callback ( function ) \u2013 The callback function to unsubscribe. event_types ( list , default: None ) \u2013 A list of event types to unsubscribe from.","title":"unsubscribe"},{"location":"reference/eventsys/devices/#eventsys.devices.QueueDevice","text":"Represents a queue device. Attributes: type ( str ) \u2013 The type of the device. responses ( list ) \u2013 The list of events that the device can respond to.","title":"QueueDevice"},{"location":"reference/eventsys/devices/#eventsys.devices.QueueDevice-attributes","text":"","title":"Attributes"},{"location":"reference/eventsys/devices/#eventsys.devices.QueueDevice.broker","text":"broker The broker that manages this device.","title":"broker"},{"location":"reference/eventsys/devices/#eventsys.devices.QueueDevice.user_data","text":"user_data User data that can be set and retrieved by applications.","title":"user_data"},{"location":"reference/eventsys/devices/#eventsys.devices.QueueDevice-functions","text":"","title":"Functions"},{"location":"reference/eventsys/devices/#eventsys.devices.QueueDevice.peek","text":"peek () Peek at the next event in the queue without removing it. Returns: bool ( bool ) \u2013 True if there is an event in the queue that matches the filter in self._data, otherwise False. Note: self._data defaults to events.filter but may be set to a different list.","title":"peek"},{"location":"reference/eventsys/devices/#eventsys.devices.QueueDevice.poll","text":"poll ( * args ) Poll the device for events. Parameters: *args ( Any , default: () ) \u2013 Additional arguments that can be passed to the read callback functions. Returns: Event ( events ) \u2013 The event that was polled or None if no event was polled.","title":"poll"},{"location":"reference/eventsys/devices/#eventsys.devices.QueueDevice.subscribe","text":"subscribe ( callback , event_types = None ) Subscribe to events from the device. Parameters: callback ( function ) \u2013 The function to call when an event is received. event_types ( list [ int ] | None , default: None ) \u2013 A list of event types to subscribe to. Raises: ValueError \u2013 If callback is not callable. ValueError \u2013 If any event type in event_types is not a response from this device. Example def callback(event): print(event) device.subscribe(callback, [events.MOUSEBUTTONDOWN, events.MOUSEBUTTONUP]) This will call callback when the receives a MOUSEBUTTONDOWN or MOUSEBUTTONUP event.","title":"subscribe"},{"location":"reference/eventsys/devices/#eventsys.devices.QueueDevice.unsubscribe","text":"unsubscribe ( callback , event_types = None ) Unsubscribes a callback function from one or more event types. Parameters: callback ( function ) \u2013 The callback function to unsubscribe. event_types ( list , default: None ) \u2013 A list of event types to unsubscribe from.","title":"unsubscribe"},{"location":"reference/eventsys/devices/#eventsys.devices.TouchDevice","text":"Represents a touch input device. This class handles touch input events and provides methods to read touch data from the underlying touch driver. It supports reporting mouse button 1 events such as mouse motion, mouse button down, and mouse button up. Attributes: type ( str ) \u2013 The type of the device (set to types.TOUCH). responses ( tuple ) \u2013 The supported event types for the device. Parameters: *args ( Any , default: () ) \u2013 Variable length argument list. **kwargs ( Any , default: {} ) \u2013 Arbitrary keyword arguments.","title":"TouchDevice"},{"location":"reference/eventsys/devices/#eventsys.devices.TouchDevice-attributes","text":"","title":"Attributes"},{"location":"reference/eventsys/devices/#eventsys.devices.TouchDevice.broker","text":"broker The broker that manages this device.","title":"broker"},{"location":"reference/eventsys/devices/#eventsys.devices.TouchDevice.rotation","text":"rotation Get the rotation value of the touch device. Returns: rotation ( int ) \u2013 The rotation value in degrees.","title":"rotation"},{"location":"reference/eventsys/devices/#eventsys.devices.TouchDevice.rotation_table","text":"rotation_table Get the rotation table of the touch device. Returns: list \u2013 The rotation table.","title":"rotation_table"},{"location":"reference/eventsys/devices/#eventsys.devices.TouchDevice.user_data","text":"user_data User data that can be set and retrieved by applications.","title":"user_data"},{"location":"reference/eventsys/devices/#eventsys.devices.TouchDevice-functions","text":"","title":"Functions"},{"location":"reference/eventsys/devices/#eventsys.devices.TouchDevice.poll","text":"poll ( * args ) Poll the device for events. Parameters: *args ( Any , default: () ) \u2013 Additional arguments that can be passed to the read callback functions. Returns: Event ( events ) \u2013 The event that was polled or None if no event was polled.","title":"poll"},{"location":"reference/eventsys/devices/#eventsys.devices.TouchDevice.subscribe","text":"subscribe ( callback , event_types = None ) Subscribe to events from the device. Parameters: callback ( function ) \u2013 The function to call when an event is received. event_types ( list [ int ] | None , default: None ) \u2013 A list of event types to subscribe to. Raises: ValueError \u2013 If callback is not callable. ValueError \u2013 If any event type in event_types is not a response from this device. Example def callback(event): print(event) device.subscribe(callback, [events.MOUSEBUTTONDOWN, events.MOUSEBUTTONUP]) This will call callback when the receives a MOUSEBUTTONDOWN or MOUSEBUTTONUP event.","title":"subscribe"},{"location":"reference/eventsys/devices/#eventsys.devices.TouchDevice.unsubscribe","text":"unsubscribe ( callback , event_types = None ) Unsubscribes a callback function from one or more event types. Parameters: callback ( function ) \u2013 The callback function to unsubscribe. event_types ( list , default: None ) \u2013 A list of event types to unsubscribe from.","title":"unsubscribe"},{"location":"reference/eventsys/devices/#eventsys.devices.types","text":"Device types for the Event System.","title":"types"},{"location":"reference/eventsys/devices/#eventsys.devices-functions","text":"","title":"Functions"},{"location":"reference/eventsys/devices/#eventsys.devices.custom_type","text":"custom_type ( type_name , responses ) Create a new device type with a list of responses. Parameters: type_name ( str ) \u2013 The name of the device type. responses ( list [ int ] ) \u2013 A list of event types that the device can return. Returns: Device \u2013 The newly created device type. Raises: ValueError \u2013 If type_name is not a string, responses is not a list, or any response is not an integer. ValueError \u2013 If a device type with the same name already exists in the types class. ValueError \u2013 If a device class with the same name already exists. Example To create the KEYPAD device type and KeypadDevice class: import eventsys.device as device from eventsys import events KeypadDevice = device.new_type(\"KEYPAD\", [events.KEYDOWN, events.KEYUP])","title":"custom_type"},{"location":"reference/eventsys/keys/","text":"eventsys.keys \u00b6 Classes \u00b6 Keys \u00b6 A container for key codes and names. Similar to a C enum and struct.","title":"keys"},{"location":"reference/eventsys/keys/#eventsys.keys--eventsyskeys","text":"","title":"eventsys.keys"},{"location":"reference/eventsys/keys/#eventsys.keys-classes","text":"","title":"Classes"},{"location":"reference/eventsys/keys/#eventsys.keys.Keys","text":"A container for key codes and names. Similar to a C enum and struct.","title":"Keys"},{"location":"reference/graphics/","text":"graphics \u00b6 Graphics library extending MicroPython's framebuf module. Classes \u00b6 Area \u00b6 Represents a rectangular area defined by its position and dimensions. Attributes: x ( int | float ) \u2013 The x-coordinate of the top-left corner of the area. y ( int | float ) \u2013 The y-coordinate of the top-left corner of the area. w ( int | float ) \u2013 The width of the area. h ( int | float ) \u2013 The height of the area. Methods: Name Description contains Checks if the specified point is contained within the area. contains_area Checks if the specified area is contained within the area. intersects Checks if the current Area object intersects with another Area object. touches_or_intersects Checks if the current Area object touches or intersects with another Area object. shift Returns a new Area shifted by the specified amount in the x and y directions. clip Clips the current Area object to the specified Area object. Special Methods eq (other): Checks if the current Area object is equal to another Area object. ne (other): Checks if the current Area object is not equal to another Area object. add (other): Computes the union of the current Area object and another Area object. iter (): Returns an iterator over the elements of the Area object. repr (): Returns a string representation of the Area object. str (): Returns a string representation of the Area object. Functions \u00b6 __add__ \u00b6 __add__ ( other ) Computes the union of the current Area object and another Area object. Parameters: other ( Area ) \u2013 The other Area object to compute the union with. Returns: Area \u2013 A new Area object representing the union of the two areas. __eq__ \u00b6 __eq__ ( other ) Checks if the current Area object is equal to another Area object. Parameters: other ( Area ) \u2013 The other Area object to compare with. Returns: bool \u2013 True if the two Area objects are equal, False otherwise. __init__ \u00b6 __init__ ( x , y = None , w = None , h = None ) Initializes a new instance of the Area class. Parameters: x ( int | float | tuple ) \u2013 The x-coordinate of the top-left corner of the area or a tuple containing the x, y, w, and h coordinates of the area. y ( int | float , default: None ) \u2013 The y-coordinate of the top-left corner of the area. w ( int | float , default: None ) \u2013 The width of the area. h ( int | float , default: None ) \u2013 The height of the area. __iter__ \u00b6 __iter__ () Returns an iterator over the elements of the Area object. Returns: iterator \u2013 An iterator over the elements of the Area object. __ne__ \u00b6 __ne__ ( other ) Checks if the current Area object is not equal to another Area object. Parameters: other ( Area ) \u2013 The other Area object to compare with. Returns: bool \u2013 True if the two Area objects are not equal, False otherwise. __repr__ \u00b6 __repr__ () Returns a string representation of the Area object. Returns: str \u2013 A string representation of the Area object. __str__ \u00b6 __str__ () Returns a string representation of the Area object. Returns: str \u2013 A string representation of the Area object. clip \u00b6 clip ( other ) Clips the current Area object to the specified Area object. Parameters: other ( Area ) \u2013 The other Area object to clip to. Returns: Area \u2013 A new Area object representing the clipped area. contains \u00b6 contains ( x , y = None ) Checks if the specified point is contained within the area. Parameters: x ( int | tuple ) \u2013 The x-coordinate of the point to check or a tuple containing the x and y coordinates of the point. y ( int , default: None ) \u2013 The y-coordinate of the point to check. Returns: bool \u2013 True if the point is contained within the area, False otherwise. contains_area \u00b6 contains_area ( other ) Checks if the specified area is contained within the area. Parameters: other ( Area ) \u2013 The other area to check. Returns: bool \u2013 True if the other area is contained within the area, False otherwise. inset \u00b6 inset ( d1 , d2 = None , d3 = None , d4 = None ) Returns a new Area inset by the specified amount(s). If only one argument is provided, it is used as the inset in all 4 directions. If two arguments are provided, the first is used as the inset in the x direction and the second as the inset in the y direction. If three arguments are provided, they are used as the insets in the left, top/bottom, and right directions, respectively. If four arguments are provided, they are used as the insets in the left, top, right, and bottom directions, respectively. Parameters: d1 ( int | float ) \u2013 The inset in the x direction or the inset in all 4 directions. d2 ( int | float , default: None ) \u2013 The inset in the y direction or the inset in the top/bottom direction. d3 ( int | float , default: None ) \u2013 The inset in the right direction. d4 ( int | float , default: None ) \u2013 The inset in the bottom direction. Returns: Area \u2013 A new Area object inset by the specified amount(s). intersects \u00b6 intersects ( other ) Checks if the current Area object intersects with another Area object. Parameters: other ( Area ) \u2013 The other Area object to check for overlap. Returns: bool \u2013 True if the two Area objects intersect, False otherwise. offset \u00b6 offset ( d1 , d2 = None , d3 = None , d4 = None ) Returns a new Area offset by the specified amount(s). If only one argument is provided, it is used as the offset in all 4 directions. If two arguments are provided, the first is used as the offset in the x direction and the second as the offset in the y direction. If three arguments are provided, they are used as the offsets in the left, top/bottom, and right directions, respectively. If four arguments are provided, they are used as the offsets in the left, top, right, and bottom directions, respectively. Parameters: d1 ( int | float ) \u2013 The offset in the x direction or the offset in all 4 directions. d2 ( int | float , default: None ) \u2013 The offset in the y direction or the offset in the top/bottom direction. d3 ( int | float , default: None ) \u2013 The offset in the right direction. d4 ( int | float , default: None ) \u2013 The offset in the bottom direction. Returns: Area \u2013 A new Area object offset by the specified amount(s). shift \u00b6 shift ( dx = 0 , dy = 0 ) Returns a new Area shifted by the specified amount in the x and y directions. Parameters: dx ( int | float , default: 0 ) \u2013 The amount to shift the area in the x direction. dy ( int | float , default: 0 ) \u2013 The amount to shift the area in the y direction. Returns: Area \u2013 A new Area object shift by the specified amount in the x and y directions. touches_or_intersects \u00b6 touches_or_intersects ( other ) Checks if the current Area object touches or intersects with another Area object. Parameters: other ( Area ) \u2013 The other Area object to check for overlap or touch. Returns: bool \u2013 True if the two Area objects touch or intersect, False otherwise. Draw \u00b6 A Draw class to draw shapes onto a specified canvas. Parameters: canvas ( Canvas ) \u2013 The canvas to draw on. Usage: # canvas is an instance of DisplayDriver, FrameBuffer, or other canvas-like object draw = Draw(canvas) draw.fill(0x0000) draw.rect(10, 10, 100, 100, 0xFFFF) Font \u00b6 A class to read binary fonts like those found at https://github.com/spacerace/romfont and draw text to a canvas. Parameters: font_data ( str | byterray , default: None ) \u2013 The path to the font .bin file or memoryview. Default is None. height ( int , default: None ) \u2013 The height of the font. Default is None. cached ( bool , default: True ) \u2013 If True, the font file will be read into memory on init. If False, the font file will be read from disk each time it is needed. Attributes \u00b6 height property \u00b6 height Return the height of the font in pixels. width property \u00b6 width Return the width of the font in pixels. Functions \u00b6 __enter__ \u00b6 __enter__ () Initialize/open the font file __exit__ \u00b6 __exit__ ( exception_type , exception_value , traceback ) cleanup on exit deinit \u00b6 deinit () Close the font file as cleanup. draw_char \u00b6 draw_char ( char , x , y , canvas , color , scale = 1 , inverted = False ) Draw one character at position (x,y). Parameters: char ( str ) \u2013 The character to draw. x ( int ) \u2013 The x position to draw the character. y ( int ) \u2013 The y position to draw the character. canvas ( Canvas ) \u2013 The DisplayDriver, FrameBuffer, or other canvas-like object to draw on. color ( int ) \u2013 The color to draw the character in. scale ( int , default: 1 ) \u2013 The scale factor to draw the character at. Default is 1. inverted ( bool , default: False ) \u2013 If True, draw the character inverted. Default is False. Returns: Area \u2013 The area that was drawn to. export \u00b6 export ( filename ) Export the font data in self._cache to a .py file that can be imported. The format is a single bytes object named _FONT. There are 256 lines, one for each character. The last line is FONT = memoryview(_FONT) . Parameters: filename ( str ) \u2013 The path to save the file to. text \u00b6 text ( canvas , string , x , y , color , scale = 1 , inverted = False ) Draw text to the canvas. Parameters: canvas ( Canvas ) \u2013 The DisplayDriver, FrameBuffer, or other canvas-like object to draw on. string ( str ) \u2013 The text to draw. x ( int ) \u2013 The x position to start drawing the text. y ( int ) \u2013 The y position to start drawing the text. color ( int ) \u2013 The color to draw the text in. scale ( int , default: 1 ) \u2013 The scale factor to draw the text at. Default is 1. inverted ( bool , default: False ) \u2013 If True, draw the text inverted. Default is False. Returns: Area \u2013 The area that was drawn to. text_width \u00b6 text_width ( text , scale = 1 ) Return the pixel width of the specified text message. Takes into account the scale factor, but not any newlines. Parameters: text ( str ) \u2013 The text to measure. scale ( int , default: 1 ) \u2013 The scale factor to measure the text at. Default is 1. FrameBuffer \u00b6 An extension of MicroPython's framebuf.FrameBuffer that adds some useful methods for drawing shapes and text. Each method returns a bounding box (x, y, w, h) of the drawn shape to indicate the area of the display that was modified. This can be used to update only the modified area of the display. Exposes attributes not exposed in the base class, such as color_depth, width, height, buffer, and format. Also adds a save method to save the framebuffer to a file, and a from_file method to load a framebuffer from a file. Inherits from frambuf.Framebuffer, which may be compiled into MicroPython or may be from _framebuf.py. Methods should return an Area object, but the MicroPython framebuf module returns None, so the methods inherited from framebuf.FrameBuffer are overridden to return an Area object. Parameters: buffer ( bytearray ) \u2013 Framebuffer buffer width ( int ) \u2013 Width in pixels height ( int ) \u2013 Height in pixels format ( int ) \u2013 Framebuffer format Attributes: buffer ( bytearray ) \u2013 Framebuffer buffer width ( int ) \u2013 Width in pixels height ( int ) \u2013 Height in pixels format ( int ) \u2013 Framebuffer format color_depth ( int ) \u2013 Color depth Functions \u00b6 arc \u00b6 arc ( * args , ** kwargs ) Arc drawing function. Will draw a single pixel wide arc with a radius r centered at x, y from a0 to a1. Parameters: x ( int ) \u2013 X-coordinate of the arc's center. y ( int ) \u2013 Y-coordinate of the arc's center. r ( int ) \u2013 Radius of the arc. a0 ( float ) \u2013 Starting angle in degrees. a1 ( float ) \u2013 Ending angle in degrees. c ( int ) \u2013 color. Returns: Area \u2013 The bounding box of the arc. blit \u00b6 blit ( buf , x , y , key =- 1 , palette = None ) Blit the given buffer at the given location. Parameters: buf ( FrameBuffer ) \u2013 FrameBuffer to blit x ( int ) \u2013 x coordinate y ( int ) \u2013 y coordinate key ( int , default: -1 ) \u2013 Color key (default: -1) palette ( list , default: None ) \u2013 Palette (default: None) Returns: Area \u2013 Bounding box of the blitted buffer blit_rect \u00b6 blit_rect ( buf , x , y , w , h ) Blit a rectangular area from a buffer to the canvas. Uses the canvas's blit_rect method if available, otherwise writes directly to the buffer. Parameters: buf ( memoryview ) \u2013 Buffer to blit. Must already be byte-swapped if necessary. x ( int ) \u2013 X-coordinate to blit to. y ( int ) \u2013 Y-coordinate to blit to. w ( int ) \u2013 Width of the area to blit. h ( int ) \u2013 Height of the area to blit. Returns: Area \u2013 The bounding box of the blitted area. blit_transparent \u00b6 blit_transparent ( * args , ** kwargs ) Blit a buffer with transparency. Parameters: buf ( memoryview ) \u2013 Buffer to blit. x ( int ) \u2013 X-coordinate to blit to. y ( int ) \u2013 Y-coordinate to blit to. w ( int ) \u2013 Width of the area to blit. h ( int ) \u2013 Height of the area to blit. key ( int ) \u2013 Key value for transparency. Returns: Area \u2013 The bounding box of the blitted area. circle \u00b6 circle ( * args , ** kwargs ) Circle drawing function. Will draw a single pixel wide circle centered at x0, y0 and the specified r. Parameters: x0 ( int ) \u2013 Center x coordinate y0 ( int ) \u2013 Center y coordinate r ( int ) \u2013 Radius c ( int ) \u2013 Color f ( bool ) \u2013 Fill the circle (default: False) Returns: Area \u2013 The bounding box of the circle. ellipse \u00b6 ellipse ( x , y , rx , ry , c , f = False , m = 15 ) Draw an ellipse at the given location, radii and color. Parameters: x ( int ) \u2013 Center x coordinate y ( int ) \u2013 Center y coordinate rx ( int ) \u2013 X radius ry ( int ) \u2013 Y radius c ( int ) \u2013 color f ( bool , default: False ) \u2013 Fill the ellipse (default: False) m ( int , default: 15 ) \u2013 Bitmask to determine which quadrants to draw (default: 0b1111) Returns: Area \u2013 Bounding box of the ellipse fill \u00b6 fill ( c ) Fill the buffer with the given color. Parameters: c ( int ) \u2013 color Returns: Area \u2013 Bounding box of the filled buffer fill_rect \u00b6 fill_rect ( x , y , w , h , c ) Fill the given rectangle with the given color. Parameters: x ( int ) \u2013 x coordinate y ( int ) \u2013 y coordinate w ( int ) \u2013 Width in pixels h ( int ) \u2013 Height in pixels c ( int ) \u2013 color Returns: Area \u2013 Bounding box of the filled rectangle from_file staticmethod \u00b6 from_file ( filename ) Load a framebuffer from a file. Parameters: filename ( str ) \u2013 Filename to load from gradient_rect \u00b6 gradient_rect ( * args , ** kwargs ) Fill a rectangle with a gradient. Parameters: x ( int ) \u2013 X-coordinate of the top-left corner of the rectangle. y ( int ) \u2013 Y-coordinate of the top-left corner of the rectangle. w ( int ) \u2013 Width of the rectangle. h ( int ) \u2013 Height of the rectangle. c1 ( int ) \u2013 565 encoded color for the top or left edge. c2 ( int ) \u2013 565 encoded color for the bottom or right edge. If None or the same as c1, fill_rect will be called instead. vertical ( bool ) \u2013 If True, the gradient will be vertical. If False, the gradient will be horizontal. Returns: Area \u2013 The bounding box of the filled area. hline \u00b6 hline ( x , y , w , c ) Draw a horizontal line at the given location, width and color. Parameters: x ( int ) \u2013 x coordinate y ( int ) \u2013 y coordinate w ( int ) \u2013 Width in pixels c ( int ) \u2013 color Returns: Area \u2013 Bounding box of the horizontal line line \u00b6 line ( x1 , y1 , x2 , y2 , c ) Draw a line between the given start and end points and color. Parameters: x1 ( int ) \u2013 Start x coordinate y1 ( int ) \u2013 Start y coordinate x2 ( int ) \u2013 End x coordinate y2 ( int ) \u2013 End y coordinate c ( int ) \u2013 color Returns: Area \u2013 Bounding box of the line pixel \u00b6 pixel ( x , y , c = None ) Draw a single pixel at the given location and color. Parameters: x ( int ) \u2013 x coordinate y ( int ) \u2013 y coordinate c ( int , default: None ) \u2013 color (default: None) Returns: Area \u2013 Bounding box of the pixel poly \u00b6 poly ( x , y , coords , c , f = False ) Draw a polygon at the given location, coordinates and color. Parameters: x ( int ) \u2013 x coordinate y ( int ) \u2013 y coordinate coords ( array ) \u2013 Array of x, y coordinate tuples c ( int ) \u2013 color f ( bool , default: False ) \u2013 Fill the polygon (default: False) Returns: Area \u2013 Bounding box of the polygon polygon \u00b6 polygon ( * args , ** kwargs ) Draw a polygon on the canvas. Parameters: points ( list ) \u2013 List of points to draw. x ( int ) \u2013 X-coordinate of the polygon's position. y ( int ) \u2013 Y-coordinate of the polygon's position. color ( int ) \u2013 color. angle ( float ) \u2013 Rotation angle in radians (default: 0). center_x ( int ) \u2013 X-coordinate of the rotation center (default: 0). center_y ( int ) \u2013 Y-coordinate of the rotation center (default: 0). Raises: ValueError \u2013 If the polygon has less than 3 points. Returns: Area \u2013 The bounding box of the polygon. rect \u00b6 rect ( x , y , w , h , c , f = False ) Draw a rectangle at the given location, size and color. Parameters: x ( int ) \u2013 Top left corner x coordinate y ( int ) \u2013 Top left corner y coordinate w ( int ) \u2013 Width in pixels h ( int ) \u2013 Height in pixels c ( int ) \u2013 color f ( bool , default: False ) \u2013 Fill the rectangle (default: False) Returns: Area \u2013 Bounding box of the rectangle round_rect \u00b6 round_rect ( * args , ** kwargs ) Rounded rectangle drawing function. Will draw a single pixel wide rounded rectangle starting at x0, y0 and extending w, h pixels with the specified radius. Parameters: x0 ( int ) \u2013 X-coordinate of the top-left corner of the rectangle. y0 ( int ) \u2013 Y-coordinate of the top-left corner of the rectangle. w ( int ) \u2013 Width of the rectangle. h ( int ) \u2013 Height of the rectangle. r ( int ) \u2013 Radius of the corners. c ( int ) \u2013 color. f ( bool ) \u2013 Fill the rectangle (default: False). Returns: Area \u2013 The bounding box of the rectangle. save \u00b6 save ( filename = None ) Save the framebuffer to a file. The file extension must match the format, otherwise the extension will be appended to the filename. Saves 1-bit formats as PBM, 2-bit formats as PGM with max value 3, 4-bit formats as PGM with max value 15, 8-bit formats as PGM with max value 255, and 16-bit formats as BMP. Parameters: filename ( str , default: None ) \u2013 Filename to save to scroll \u00b6 scroll ( xstep , ystep ) Shift the contents of the FrameBuffer by the given vector (xstep, ystep). This may leave a footprint of the previous colors in the FrameBuffer. Parameters: xstep ( int ) \u2013 The number of pixels to shift the FrameBuffer in the x direction. ystep ( int ) \u2013 The number of pixels to shift the FrameBuffer in the y direction. Raises: ValueError \u2013 If the FrameBuffer format depth is not a multiple of 8 text \u00b6 text ( s , x , y , c = 1 , scale = 1 , inverted = False , font_data = None , height = 8 , ) Draw text at the given location, using the given font and color. Parameters: s ( str ) \u2013 Text to draw x ( int ) \u2013 x coordinate y ( int ) \u2013 y coordinate c ( int , default: 1 ) \u2013 color scale ( int , default: 1 ) \u2013 Scale factor (default: 1) inverted ( bool , default: False ) \u2013 Invert the text (default: False) font_data ( str , default: None ) \u2013 Path to the font file (default: None) height ( int , default: 8 ) \u2013 Height of the font (default: 8) Returns: Area \u2013 Bounding box of the text text14 \u00b6 text14 ( * args , ** kwargs ) Place text on the canvas with a 14 pixel high font. Breaks on to next line. Does not break on line going off canvas. Args: canvas (Canvas): The DisplayDriver, FrameBuffer, or other canvas-like object to draw on. s (str): The text to draw. x (int): The x position to start drawing the text. y (int): The y position to start drawing the text. c (int): The color to draw the text in. Default is 1. scale (int): The scale factor to draw the text at. Default is 1. inverted (bool): If True, draw the text inverted. Default is False. font_data (str): The path to the font file to use. Default is None. Returns: Area: The area that was drawn to. text16 \u00b6 text16 ( * args , ** kwargs ) Place text on the canvas with a 16 pixel high font. Breaks on to next line. Does not break on line going off canvas. Args: canvas (Canvas): The DisplayDriver, FrameBuffer, or other canvas-like object to draw on. s (str): The text to draw. x (int): The x position to start drawing the text. y (int): The y position to start drawing the text. c (int): The color to draw the text in. Default is 1. scale (int): The scale factor to draw the text at. Default is 1. inverted (bool): If True, draw the text inverted. Default is False. font_data (str): The path to the font file to use. Default is None. Returns: Area: The area that was drawn to. text8 \u00b6 text8 ( * args , ** kwargs ) Place text on the canvas with an 8 pixel high font. Breaks on to next line. Does not break on line going off canvas. Args: canvas (Canvas): The DisplayDriver, FrameBuffer, or other canvas-like object to draw on. s (str): The text to draw. x (int): The x position to start drawing the text. y (int): The y position to start drawing the text. c (int): The color to draw the text in. Default is 1. scale (int): The scale factor to draw the text at. Default is 1. inverted (bool): If True, draw the text inverted. Default is False. font_data (str): The path to the font file to use. Default is None. Returns: Area: The area that was drawn to. triangle \u00b6 triangle ( * args , ** kwargs ) Triangle drawing function. Draws a single pixel wide triangle with vertices at (x0, y0), (x1, y1), and (x2, y2). Parameters: x0 ( int ) \u2013 X-coordinate of the first vertex. y0 ( int ) \u2013 Y-coordinate of the first vertex. x1 ( int ) \u2013 X-coordinate of the second vertex. y1 ( int ) \u2013 Y-coordinate of the second vertex. x2 ( int ) \u2013 X-coordinate of the third vertex. y2 ( int ) \u2013 Y-coordinate of the third vertex. c ( int ) \u2013 color. f ( bool ) \u2013 Fill the triangle (default: False). Returns: Area \u2013 The bounding box of the triangle. vline \u00b6 vline ( x , y , h , c ) Draw a vertical line at the given location, height and color. Parameters: x ( int ) \u2013 x coordinate y ( int ) \u2013 y coordinate h ( int ) \u2013 Height in pixels c ( int ) \u2013 color Returns: Area \u2013 Bounding box of the vertical line Functions \u00b6 arc \u00b6 arc ( canvas , x , y , r , a0 , a1 , c ) Arc drawing function. Will draw a single pixel wide arc with a radius r centered at x, y from a0 to a1. Parameters: x ( int ) \u2013 X-coordinate of the arc's center. y ( int ) \u2013 Y-coordinate of the arc's center. r ( int ) \u2013 Radius of the arc. a0 ( float ) \u2013 Starting angle in degrees. a1 ( float ) \u2013 Ending angle in degrees. c ( int ) \u2013 color. Returns: Area \u2013 The bounding box of the arc. blit \u00b6 blit ( canvas , source , x , y , key =- 1 , palette = None ) Blit a source to the canvas at the specified x, y location. Parameters: source ( FrameBuffer ) \u2013 Source FrameBuffer object. x ( int ) \u2013 X-coordinate to blit to. y ( int ) \u2013 Y-coordinate to blit to. key ( int , default: -1 ) \u2013 Key value for transparency (default: -1). palette ( Palette , default: None ) \u2013 Palette object for color translation (default: None). Returns: Area \u2013 The bounding box of the blitted area. blit_rect \u00b6 blit_rect ( canvas , buf , x , y , w , h ) Blit a rectangular area from a buffer to the canvas. Uses the canvas's blit_rect method if available, otherwise writes directly to the buffer. Parameters: buf ( memoryview ) \u2013 Buffer to blit. Must already be byte-swapped if necessary. x ( int ) \u2013 X-coordinate to blit to. y ( int ) \u2013 Y-coordinate to blit to. w ( int ) \u2013 Width of the area to blit. h ( int ) \u2013 Height of the area to blit. Returns: Area \u2013 The bounding box of the blitted area. blit_transparent \u00b6 blit_transparent ( canvas , buf , x , y , w , h , key ) Blit a buffer with transparency. Parameters: buf ( memoryview ) \u2013 Buffer to blit. x ( int ) \u2013 X-coordinate to blit to. y ( int ) \u2013 Y-coordinate to blit to. w ( int ) \u2013 Width of the area to blit. h ( int ) \u2013 Height of the area to blit. key ( int ) \u2013 Key value for transparency. Returns: Area \u2013 The bounding box of the blitted area. bmp_to_framebuffer \u00b6 bmp_to_framebuffer ( filename ) Convert a BMP file to a RGB565 FrameBuffer. First ensures planes is 1, bits per pixel is 16, and compression is 0. Parameters: filename ( str ) \u2013 Filename of the circle \u00b6 circle ( canvas , x0 , y0 , r , c , f = False ) Circle drawing function. Will draw a single pixel wide circle centered at x0, y0 and the specified r. Parameters: x0 ( int ) \u2013 Center x coordinate y0 ( int ) \u2013 Center y coordinate r ( int ) \u2013 Radius c ( int ) \u2013 Color f ( bool , default: False ) \u2013 Fill the circle (default: False) Returns: Area \u2013 The bounding box of the circle. ellipse \u00b6 ellipse ( canvas , x0 , y0 , r1 , r2 , c , f = False , m = 15 , w = None , h = None ) Midpoint ellipse algorithm Draw an ellipse at the given location. Radii r1 and r2 define the geometry; equal values cause a circle to be drawn. The c parameter defines the color. The optional f parameter can be set to True to fill the ellipse. Otherwise just a one pixel outline is drawn. The optional m parameter enables drawing to be restricted to certain quadrants of the ellipse. The LS four bits determine which quadrants are to be drawn, with bit 0 specifying Q1, b1 Q2, b2 Q3 and b3 Q4. Quadrants are numbered counterclockwise with Q1 being top right. Parameters: x0 ( int ) \u2013 Center x coordinate y0 ( int ) \u2013 Center y coordinate r1 ( int ) \u2013 x radius r2 ( int ) \u2013 y radius c ( int ) \u2013 color f ( bool , default: False ) \u2013 Fill the ellipse (default: False) m ( int , default: 15 ) \u2013 Bitmask to determine which quadrants to draw (default: 0b1111) w ( int , default: None ) \u2013 Width of the ellipse (default: None) h ( int , default: None ) \u2013 Height of the ellipse (default: None) Returns: Area \u2013 The bounding box of the ellipse. fill \u00b6 fill ( canvas , c ) Fill the entire canvas with a color. Uses the canvas's fill method if available, otherwise calls the fill_rect function. Parameters: c ( int ) \u2013 color. Returns: Area \u2013 The bounding box of the filled area. fill_rect \u00b6 fill_rect ( canvas , x , y , w , h , c ) Filled rectangle drawing function. Draws a filled rectangle starting at x, y and extending w, h pixels. Uses the canvas's fill_rect method if available, otherwise calls the pixel function for each pixel. Parameters: x ( int ) \u2013 X-coordinate of the top-left corner of the rectangle. y ( int ) \u2013 Y-coordinate of the top-left corner of the rectangle. w ( int ) \u2013 Width of the rectangle. h ( int ) \u2013 Height of the rectangle. c ( int ) \u2013 color Returns: Area \u2013 The bounding box of the filled area. gradient_rect \u00b6 gradient_rect ( canvas , x , y , w , h , c1 , c2 = None , vertical = True ) Fill a rectangle with a gradient. Parameters: x ( int ) \u2013 X-coordinate of the top-left corner of the rectangle. y ( int ) \u2013 Y-coordinate of the top-left corner of the rectangle. w ( int ) \u2013 Width of the rectangle. h ( int ) \u2013 Height of the rectangle. c1 ( int ) \u2013 565 encoded color for the top or left edge. c2 ( int , default: None ) \u2013 565 encoded color for the bottom or right edge. If None or the same as c1, fill_rect will be called instead. vertical ( bool , default: True ) \u2013 If True, the gradient will be vertical. If False, the gradient will be horizontal. Returns: Area \u2013 The bounding box of the filled area. hline \u00b6 hline ( canvas , x0 , y0 , w , c ) Horizontal line drawing function. Will draw a single pixel wide line. Parameters: x0 ( int ) \u2013 X-coordinate of the start of the line. y0 ( int ) \u2013 Y-coordinate of the start of the line. w ( int ) \u2013 Width of the line. c ( int ) \u2013 color. Returns: Area \u2013 The bounding box of the line. line \u00b6 line ( canvas , x0 , y0 , x1 , y1 , c ) Line drawing function. Will draw a single pixel wide line starting at x0, y0 and ending at x1, y1. Parameters: x0 ( int ) \u2013 X-coordinate of the start of the line. y0 ( int ) \u2013 Y-coordinate of the start of the line. x1 ( int ) \u2013 X-coordinate of the end of the line. y1 ( int ) \u2013 Y-coordinate of the end of the line. c ( int ) \u2013 color. Returns: Area \u2013 The bounding box of the line. pbm_to_framebuffer \u00b6 pbm_to_framebuffer ( filename ) Convert a PBM file to a MONO_HLSB FrameBuffer Parameters: filename ( str ) \u2013 Filename of the PBM file pgm_to_framebuffer \u00b6 pgm_to_framebuffer ( filename ) Convert a PGM file to a GS2_HMSB, GS4_HMSB or GS8 FrameBuffer Parameters: filename ( str ) \u2013 Filename of the PGM file pixel \u00b6 pixel ( canvas , x , y , c ) Draw a single pixel at the specified x, y location. Uses the canvas's pixel method if available, otherwise writes directly to the buffer. Parameters: x ( int ) \u2013 X-coordinate of the pixel. y ( int ) \u2013 Y-coordinate of the pixel. c ( int ) \u2013 color. Returns: Area \u2013 The bounding box of the pixel. poly \u00b6 poly ( canvas , x , y , coords , c , f = False ) Given a list of coordinates, draw an arbitrary (convex or concave) closed polygon at the given x, y location using the given color. The coords must be specified as an array of integers, e.g. array('h', [x0, y0, x1, y1, ... xn, yn]) or a list or tuple of points, e.g. [(x0, y0), (x1, y1), ... (xn, yn)]. The optional f parameter can be set to True to fill the polygon. Otherwise, just a one-pixel outline is drawn. Parameters: x ( int ) \u2013 X-coordinate of the polygon's position. y ( int ) \u2013 Y-coordinate of the polygon's position. coords ( list ) \u2013 List of coordinates. c ( int ) \u2013 color. f ( bool , default: False ) \u2013 Fill the polygon (default: False). Returns: Area \u2013 The bounding box of the polygon. polygon \u00b6 polygon ( canvas , points , x , y , color , angle = 0 , center_x = 0 , center_y = 0 , ) Draw a polygon on the canvas. Parameters: points ( list ) \u2013 List of points to draw. x ( int ) \u2013 X-coordinate of the polygon's position. y ( int ) \u2013 Y-coordinate of the polygon's position. color ( int ) \u2013 color. angle ( float , default: 0 ) \u2013 Rotation angle in radians (default: 0). center_x ( int , default: 0 ) \u2013 X-coordinate of the rotation center (default: 0). center_y ( int , default: 0 ) \u2013 Y-coordinate of the rotation center (default: 0). Raises: ValueError \u2013 If the polygon has less than 3 points. Returns: Area \u2013 The bounding box of the polygon. rect \u00b6 rect ( canvas , x0 , y0 , w , h , c , f = False ) Rectangle drawing function. Will draw a single pixel wide rectangle starting at x0, y0 and extending w, h pixels. Parameters: x0 ( int ) \u2013 X-coordinate of the top-left corner of the rectangle. y0 ( int ) \u2013 Y-coordinate of the top-left corner of the rectangle. w ( int ) \u2013 Width of the rectangle. h ( int ) \u2013 Height of the rectangle. c ( int ) \u2013 color. f ( bool , default: False ) \u2013 Fill the rectangle (default: False). Returns: Area \u2013 The bounding box of the rectangle. round_rect \u00b6 round_rect ( canvas , x0 , y0 , w , h , r , c , f = False ) Rounded rectangle drawing function. Will draw a single pixel wide rounded rectangle starting at x0, y0 and extending w, h pixels with the specified radius. Parameters: x0 ( int ) \u2013 X-coordinate of the top-left corner of the rectangle. y0 ( int ) \u2013 Y-coordinate of the top-left corner of the rectangle. w ( int ) \u2013 Width of the rectangle. h ( int ) \u2013 Height of the rectangle. r ( int ) \u2013 Radius of the corners. c ( int ) \u2013 color. f ( bool , default: False ) \u2013 Fill the rectangle (default: False). Returns: Area \u2013 The bounding box of the rectangle. text \u00b6 text ( * args , height = 8 , ** kwargs ) Selector to call the correct text function based on the height of the font. See text8, text14, and text16 for more information. Parameters: height ( int , default: 8 ) \u2013 The height of the font to use. Default is 8. text14 \u00b6 text14 ( canvas , s , x , y , c = 1 , scale = 1 , inverted = False , font_data = None , ) Place text on the canvas with a 14 pixel high font. Breaks on to next line. Does not break on line going off canvas. Args: canvas (Canvas): The DisplayDriver, FrameBuffer, or other canvas-like object to draw on. s (str): The text to draw. x (int): The x position to start drawing the text. y (int): The y position to start drawing the text. c (int): The color to draw the text in. Default is 1. scale (int): The scale factor to draw the text at. Default is 1. inverted (bool): If True, draw the text inverted. Default is False. font_data (str | byterray): The path to the font .bin file or memoryview. Default is None. Returns: Area: The area that was drawn to. text16 \u00b6 text16 ( canvas , s , x , y , c = 1 , scale = 1 , inverted = False , font_data = None , ) Place text on the canvas with a 16 pixel high font. Breaks on to next line. Does not break on line going off canvas. Args: canvas (Canvas): The DisplayDriver, FrameBuffer, or other canvas-like object to draw on. s (str): The text to draw. x (int): The x position to start drawing the text. y (int): The y position to start drawing the text. c (int): The color to draw the text in. Default is 1. scale (int): The scale factor to draw the text at. Default is 1. inverted (bool): If True, draw the text inverted. Default is False. font_data (str | byterray): The path to the font .bin file or memoryview. Default is None. Returns: Area: The area that was drawn to. text8 \u00b6 text8 ( canvas , s , x , y , c = 1 , scale = 1 , inverted = False , font_data = None , ) Place text on the canvas with an 8 pixel high font. Breaks on to next line. Does not break on line going off canvas. Args: canvas (Canvas): The DisplayDriver, FrameBuffer, or other canvas-like object to draw on. s (str): The text to draw. x (int): The x position to start drawing the text. y (int): The y position to start drawing the text. c (int): The color to draw the text in. Default is 1. scale (int): The scale factor to draw the text at. Default is 1. inverted (bool): If True, draw the text inverted. Default is False. font_data (str | byterray): The path to the font .bin file or memoryview. Default is None. Returns: Area: The area that was drawn to. triangle \u00b6 triangle ( canvas , x0 , y0 , x1 , y1 , x2 , y2 , c , f = False ) Triangle drawing function. Draws a single pixel wide triangle with vertices at (x0, y0), (x1, y1), and (x2, y2). Parameters: x0 ( int ) \u2013 X-coordinate of the first vertex. y0 ( int ) \u2013 Y-coordinate of the first vertex. x1 ( int ) \u2013 X-coordinate of the second vertex. y1 ( int ) \u2013 Y-coordinate of the second vertex. x2 ( int ) \u2013 X-coordinate of the third vertex. y2 ( int ) \u2013 Y-coordinate of the third vertex. c ( int ) \u2013 color. f ( bool , default: False ) \u2013 Fill the triangle (default: False). Returns: Area \u2013 The bounding box of the triangle. vline \u00b6 vline ( canvas , x0 , y0 , h , c ) Horizontal line drawing function. Will draw a single pixel wide line. Parameters: x0 ( int ) \u2013 X-coordinate of the start of the line. y0 ( int ) \u2013 Y-coordinate of the start of the line. h ( int ) \u2013 Height of the line. c ( int ) \u2013 color. Returns: Area \u2013 The bounding box of the line.","title":"graphics"},{"location":"reference/graphics/#graphics--graphics","text":"Graphics library extending MicroPython's framebuf module.","title":"graphics"},{"location":"reference/graphics/#graphics-classes","text":"","title":"Classes"},{"location":"reference/graphics/#graphics.Area","text":"Represents a rectangular area defined by its position and dimensions. Attributes: x ( int | float ) \u2013 The x-coordinate of the top-left corner of the area. y ( int | float ) \u2013 The y-coordinate of the top-left corner of the area. w ( int | float ) \u2013 The width of the area. h ( int | float ) \u2013 The height of the area. Methods: Name Description contains Checks if the specified point is contained within the area. contains_area Checks if the specified area is contained within the area. intersects Checks if the current Area object intersects with another Area object. touches_or_intersects Checks if the current Area object touches or intersects with another Area object. shift Returns a new Area shifted by the specified amount in the x and y directions. clip Clips the current Area object to the specified Area object. Special Methods eq (other): Checks if the current Area object is equal to another Area object. ne (other): Checks if the current Area object is not equal to another Area object. add (other): Computes the union of the current Area object and another Area object. iter (): Returns an iterator over the elements of the Area object. repr (): Returns a string representation of the Area object. str (): Returns a string representation of the Area object.","title":"Area"},{"location":"reference/graphics/#graphics.Area-functions","text":"","title":"Functions"},{"location":"reference/graphics/#graphics.Area.__add__","text":"__add__ ( other ) Computes the union of the current Area object and another Area object. Parameters: other ( Area ) \u2013 The other Area object to compute the union with. Returns: Area \u2013 A new Area object representing the union of the two areas.","title":"__add__"},{"location":"reference/graphics/#graphics.Area.__eq__","text":"__eq__ ( other ) Checks if the current Area object is equal to another Area object. Parameters: other ( Area ) \u2013 The other Area object to compare with. Returns: bool \u2013 True if the two Area objects are equal, False otherwise.","title":"__eq__"},{"location":"reference/graphics/#graphics.Area.__init__","text":"__init__ ( x , y = None , w = None , h = None ) Initializes a new instance of the Area class. Parameters: x ( int | float | tuple ) \u2013 The x-coordinate of the top-left corner of the area or a tuple containing the x, y, w, and h coordinates of the area. y ( int | float , default: None ) \u2013 The y-coordinate of the top-left corner of the area. w ( int | float , default: None ) \u2013 The width of the area. h ( int | float , default: None ) \u2013 The height of the area.","title":"__init__"},{"location":"reference/graphics/#graphics.Area.__iter__","text":"__iter__ () Returns an iterator over the elements of the Area object. Returns: iterator \u2013 An iterator over the elements of the Area object.","title":"__iter__"},{"location":"reference/graphics/#graphics.Area.__ne__","text":"__ne__ ( other ) Checks if the current Area object is not equal to another Area object. Parameters: other ( Area ) \u2013 The other Area object to compare with. Returns: bool \u2013 True if the two Area objects are not equal, False otherwise.","title":"__ne__"},{"location":"reference/graphics/#graphics.Area.__repr__","text":"__repr__ () Returns a string representation of the Area object. Returns: str \u2013 A string representation of the Area object.","title":"__repr__"},{"location":"reference/graphics/#graphics.Area.__str__","text":"__str__ () Returns a string representation of the Area object. Returns: str \u2013 A string representation of the Area object.","title":"__str__"},{"location":"reference/graphics/#graphics.Area.clip","text":"clip ( other ) Clips the current Area object to the specified Area object. Parameters: other ( Area ) \u2013 The other Area object to clip to. Returns: Area \u2013 A new Area object representing the clipped area.","title":"clip"},{"location":"reference/graphics/#graphics.Area.contains","text":"contains ( x , y = None ) Checks if the specified point is contained within the area. Parameters: x ( int | tuple ) \u2013 The x-coordinate of the point to check or a tuple containing the x and y coordinates of the point. y ( int , default: None ) \u2013 The y-coordinate of the point to check. Returns: bool \u2013 True if the point is contained within the area, False otherwise.","title":"contains"},{"location":"reference/graphics/#graphics.Area.contains_area","text":"contains_area ( other ) Checks if the specified area is contained within the area. Parameters: other ( Area ) \u2013 The other area to check. Returns: bool \u2013 True if the other area is contained within the area, False otherwise.","title":"contains_area"},{"location":"reference/graphics/#graphics.Area.inset","text":"inset ( d1 , d2 = None , d3 = None , d4 = None ) Returns a new Area inset by the specified amount(s). If only one argument is provided, it is used as the inset in all 4 directions. If two arguments are provided, the first is used as the inset in the x direction and the second as the inset in the y direction. If three arguments are provided, they are used as the insets in the left, top/bottom, and right directions, respectively. If four arguments are provided, they are used as the insets in the left, top, right, and bottom directions, respectively. Parameters: d1 ( int | float ) \u2013 The inset in the x direction or the inset in all 4 directions. d2 ( int | float , default: None ) \u2013 The inset in the y direction or the inset in the top/bottom direction. d3 ( int | float , default: None ) \u2013 The inset in the right direction. d4 ( int | float , default: None ) \u2013 The inset in the bottom direction. Returns: Area \u2013 A new Area object inset by the specified amount(s).","title":"inset"},{"location":"reference/graphics/#graphics.Area.intersects","text":"intersects ( other ) Checks if the current Area object intersects with another Area object. Parameters: other ( Area ) \u2013 The other Area object to check for overlap. Returns: bool \u2013 True if the two Area objects intersect, False otherwise.","title":"intersects"},{"location":"reference/graphics/#graphics.Area.offset","text":"offset ( d1 , d2 = None , d3 = None , d4 = None ) Returns a new Area offset by the specified amount(s). If only one argument is provided, it is used as the offset in all 4 directions. If two arguments are provided, the first is used as the offset in the x direction and the second as the offset in the y direction. If three arguments are provided, they are used as the offsets in the left, top/bottom, and right directions, respectively. If four arguments are provided, they are used as the offsets in the left, top, right, and bottom directions, respectively. Parameters: d1 ( int | float ) \u2013 The offset in the x direction or the offset in all 4 directions. d2 ( int | float , default: None ) \u2013 The offset in the y direction or the offset in the top/bottom direction. d3 ( int | float , default: None ) \u2013 The offset in the right direction. d4 ( int | float , default: None ) \u2013 The offset in the bottom direction. Returns: Area \u2013 A new Area object offset by the specified amount(s).","title":"offset"},{"location":"reference/graphics/#graphics.Area.shift","text":"shift ( dx = 0 , dy = 0 ) Returns a new Area shifted by the specified amount in the x and y directions. Parameters: dx ( int | float , default: 0 ) \u2013 The amount to shift the area in the x direction. dy ( int | float , default: 0 ) \u2013 The amount to shift the area in the y direction. Returns: Area \u2013 A new Area object shift by the specified amount in the x and y directions.","title":"shift"},{"location":"reference/graphics/#graphics.Area.touches_or_intersects","text":"touches_or_intersects ( other ) Checks if the current Area object touches or intersects with another Area object. Parameters: other ( Area ) \u2013 The other Area object to check for overlap or touch. Returns: bool \u2013 True if the two Area objects touch or intersect, False otherwise.","title":"touches_or_intersects"},{"location":"reference/graphics/#graphics.Draw","text":"A Draw class to draw shapes onto a specified canvas. Parameters: canvas ( Canvas ) \u2013 The canvas to draw on. Usage: # canvas is an instance of DisplayDriver, FrameBuffer, or other canvas-like object draw = Draw(canvas) draw.fill(0x0000) draw.rect(10, 10, 100, 100, 0xFFFF)","title":"Draw"},{"location":"reference/graphics/#graphics.Font","text":"A class to read binary fonts like those found at https://github.com/spacerace/romfont and draw text to a canvas. Parameters: font_data ( str | byterray , default: None ) \u2013 The path to the font .bin file or memoryview. Default is None. height ( int , default: None ) \u2013 The height of the font. Default is None. cached ( bool , default: True ) \u2013 If True, the font file will be read into memory on init. If False, the font file will be read from disk each time it is needed.","title":"Font"},{"location":"reference/graphics/#graphics.Font-attributes","text":"","title":"Attributes"},{"location":"reference/graphics/#graphics.Font.height","text":"height Return the height of the font in pixels.","title":"height"},{"location":"reference/graphics/#graphics.Font.width","text":"width Return the width of the font in pixels.","title":"width"},{"location":"reference/graphics/#graphics.Font-functions","text":"","title":"Functions"},{"location":"reference/graphics/#graphics.Font.__enter__","text":"__enter__ () Initialize/open the font file","title":"__enter__"},{"location":"reference/graphics/#graphics.Font.__exit__","text":"__exit__ ( exception_type , exception_value , traceback ) cleanup on exit","title":"__exit__"},{"location":"reference/graphics/#graphics.Font.deinit","text":"deinit () Close the font file as cleanup.","title":"deinit"},{"location":"reference/graphics/#graphics.Font.draw_char","text":"draw_char ( char , x , y , canvas , color , scale = 1 , inverted = False ) Draw one character at position (x,y). Parameters: char ( str ) \u2013 The character to draw. x ( int ) \u2013 The x position to draw the character. y ( int ) \u2013 The y position to draw the character. canvas ( Canvas ) \u2013 The DisplayDriver, FrameBuffer, or other canvas-like object to draw on. color ( int ) \u2013 The color to draw the character in. scale ( int , default: 1 ) \u2013 The scale factor to draw the character at. Default is 1. inverted ( bool , default: False ) \u2013 If True, draw the character inverted. Default is False. Returns: Area \u2013 The area that was drawn to.","title":"draw_char"},{"location":"reference/graphics/#graphics.Font.export","text":"export ( filename ) Export the font data in self._cache to a .py file that can be imported. The format is a single bytes object named _FONT. There are 256 lines, one for each character. The last line is FONT = memoryview(_FONT) . Parameters: filename ( str ) \u2013 The path to save the file to.","title":"export"},{"location":"reference/graphics/#graphics.Font.text","text":"text ( canvas , string , x , y , color , scale = 1 , inverted = False ) Draw text to the canvas. Parameters: canvas ( Canvas ) \u2013 The DisplayDriver, FrameBuffer, or other canvas-like object to draw on. string ( str ) \u2013 The text to draw. x ( int ) \u2013 The x position to start drawing the text. y ( int ) \u2013 The y position to start drawing the text. color ( int ) \u2013 The color to draw the text in. scale ( int , default: 1 ) \u2013 The scale factor to draw the text at. Default is 1. inverted ( bool , default: False ) \u2013 If True, draw the text inverted. Default is False. Returns: Area \u2013 The area that was drawn to.","title":"text"},{"location":"reference/graphics/#graphics.Font.text_width","text":"text_width ( text , scale = 1 ) Return the pixel width of the specified text message. Takes into account the scale factor, but not any newlines. Parameters: text ( str ) \u2013 The text to measure. scale ( int , default: 1 ) \u2013 The scale factor to measure the text at. Default is 1.","title":"text_width"},{"location":"reference/graphics/#graphics.FrameBuffer","text":"An extension of MicroPython's framebuf.FrameBuffer that adds some useful methods for drawing shapes and text. Each method returns a bounding box (x, y, w, h) of the drawn shape to indicate the area of the display that was modified. This can be used to update only the modified area of the display. Exposes attributes not exposed in the base class, such as color_depth, width, height, buffer, and format. Also adds a save method to save the framebuffer to a file, and a from_file method to load a framebuffer from a file. Inherits from frambuf.Framebuffer, which may be compiled into MicroPython or may be from _framebuf.py. Methods should return an Area object, but the MicroPython framebuf module returns None, so the methods inherited from framebuf.FrameBuffer are overridden to return an Area object. Parameters: buffer ( bytearray ) \u2013 Framebuffer buffer width ( int ) \u2013 Width in pixels height ( int ) \u2013 Height in pixels format ( int ) \u2013 Framebuffer format Attributes: buffer ( bytearray ) \u2013 Framebuffer buffer width ( int ) \u2013 Width in pixels height ( int ) \u2013 Height in pixels format ( int ) \u2013 Framebuffer format color_depth ( int ) \u2013 Color depth","title":"FrameBuffer"},{"location":"reference/graphics/#graphics.FrameBuffer-functions","text":"","title":"Functions"},{"location":"reference/graphics/#graphics.FrameBuffer.arc","text":"arc ( * args , ** kwargs ) Arc drawing function. Will draw a single pixel wide arc with a radius r centered at x, y from a0 to a1. Parameters: x ( int ) \u2013 X-coordinate of the arc's center. y ( int ) \u2013 Y-coordinate of the arc's center. r ( int ) \u2013 Radius of the arc. a0 ( float ) \u2013 Starting angle in degrees. a1 ( float ) \u2013 Ending angle in degrees. c ( int ) \u2013 color. Returns: Area \u2013 The bounding box of the arc.","title":"arc"},{"location":"reference/graphics/#graphics.FrameBuffer.blit","text":"blit ( buf , x , y , key =- 1 , palette = None ) Blit the given buffer at the given location. Parameters: buf ( FrameBuffer ) \u2013 FrameBuffer to blit x ( int ) \u2013 x coordinate y ( int ) \u2013 y coordinate key ( int , default: -1 ) \u2013 Color key (default: -1) palette ( list , default: None ) \u2013 Palette (default: None) Returns: Area \u2013 Bounding box of the blitted buffer","title":"blit"},{"location":"reference/graphics/#graphics.FrameBuffer.blit_rect","text":"blit_rect ( buf , x , y , w , h ) Blit a rectangular area from a buffer to the canvas. Uses the canvas's blit_rect method if available, otherwise writes directly to the buffer. Parameters: buf ( memoryview ) \u2013 Buffer to blit. Must already be byte-swapped if necessary. x ( int ) \u2013 X-coordinate to blit to. y ( int ) \u2013 Y-coordinate to blit to. w ( int ) \u2013 Width of the area to blit. h ( int ) \u2013 Height of the area to blit. Returns: Area \u2013 The bounding box of the blitted area.","title":"blit_rect"},{"location":"reference/graphics/#graphics.FrameBuffer.blit_transparent","text":"blit_transparent ( * args , ** kwargs ) Blit a buffer with transparency. Parameters: buf ( memoryview ) \u2013 Buffer to blit. x ( int ) \u2013 X-coordinate to blit to. y ( int ) \u2013 Y-coordinate to blit to. w ( int ) \u2013 Width of the area to blit. h ( int ) \u2013 Height of the area to blit. key ( int ) \u2013 Key value for transparency. Returns: Area \u2013 The bounding box of the blitted area.","title":"blit_transparent"},{"location":"reference/graphics/#graphics.FrameBuffer.circle","text":"circle ( * args , ** kwargs ) Circle drawing function. Will draw a single pixel wide circle centered at x0, y0 and the specified r. Parameters: x0 ( int ) \u2013 Center x coordinate y0 ( int ) \u2013 Center y coordinate r ( int ) \u2013 Radius c ( int ) \u2013 Color f ( bool ) \u2013 Fill the circle (default: False) Returns: Area \u2013 The bounding box of the circle.","title":"circle"},{"location":"reference/graphics/#graphics.FrameBuffer.ellipse","text":"ellipse ( x , y , rx , ry , c , f = False , m = 15 ) Draw an ellipse at the given location, radii and color. Parameters: x ( int ) \u2013 Center x coordinate y ( int ) \u2013 Center y coordinate rx ( int ) \u2013 X radius ry ( int ) \u2013 Y radius c ( int ) \u2013 color f ( bool , default: False ) \u2013 Fill the ellipse (default: False) m ( int , default: 15 ) \u2013 Bitmask to determine which quadrants to draw (default: 0b1111) Returns: Area \u2013 Bounding box of the ellipse","title":"ellipse"},{"location":"reference/graphics/#graphics.FrameBuffer.fill","text":"fill ( c ) Fill the buffer with the given color. Parameters: c ( int ) \u2013 color Returns: Area \u2013 Bounding box of the filled buffer","title":"fill"},{"location":"reference/graphics/#graphics.FrameBuffer.fill_rect","text":"fill_rect ( x , y , w , h , c ) Fill the given rectangle with the given color. Parameters: x ( int ) \u2013 x coordinate y ( int ) \u2013 y coordinate w ( int ) \u2013 Width in pixels h ( int ) \u2013 Height in pixels c ( int ) \u2013 color Returns: Area \u2013 Bounding box of the filled rectangle","title":"fill_rect"},{"location":"reference/graphics/#graphics.FrameBuffer.from_file","text":"from_file ( filename ) Load a framebuffer from a file. Parameters: filename ( str ) \u2013 Filename to load from","title":"from_file"},{"location":"reference/graphics/#graphics.FrameBuffer.gradient_rect","text":"gradient_rect ( * args , ** kwargs ) Fill a rectangle with a gradient. Parameters: x ( int ) \u2013 X-coordinate of the top-left corner of the rectangle. y ( int ) \u2013 Y-coordinate of the top-left corner of the rectangle. w ( int ) \u2013 Width of the rectangle. h ( int ) \u2013 Height of the rectangle. c1 ( int ) \u2013 565 encoded color for the top or left edge. c2 ( int ) \u2013 565 encoded color for the bottom or right edge. If None or the same as c1, fill_rect will be called instead. vertical ( bool ) \u2013 If True, the gradient will be vertical. If False, the gradient will be horizontal. Returns: Area \u2013 The bounding box of the filled area.","title":"gradient_rect"},{"location":"reference/graphics/#graphics.FrameBuffer.hline","text":"hline ( x , y , w , c ) Draw a horizontal line at the given location, width and color. Parameters: x ( int ) \u2013 x coordinate y ( int ) \u2013 y coordinate w ( int ) \u2013 Width in pixels c ( int ) \u2013 color Returns: Area \u2013 Bounding box of the horizontal line","title":"hline"},{"location":"reference/graphics/#graphics.FrameBuffer.line","text":"line ( x1 , y1 , x2 , y2 , c ) Draw a line between the given start and end points and color. Parameters: x1 ( int ) \u2013 Start x coordinate y1 ( int ) \u2013 Start y coordinate x2 ( int ) \u2013 End x coordinate y2 ( int ) \u2013 End y coordinate c ( int ) \u2013 color Returns: Area \u2013 Bounding box of the line","title":"line"},{"location":"reference/graphics/#graphics.FrameBuffer.pixel","text":"pixel ( x , y , c = None ) Draw a single pixel at the given location and color. Parameters: x ( int ) \u2013 x coordinate y ( int ) \u2013 y coordinate c ( int , default: None ) \u2013 color (default: None) Returns: Area \u2013 Bounding box of the pixel","title":"pixel"},{"location":"reference/graphics/#graphics.FrameBuffer.poly","text":"poly ( x , y , coords , c , f = False ) Draw a polygon at the given location, coordinates and color. Parameters: x ( int ) \u2013 x coordinate y ( int ) \u2013 y coordinate coords ( array ) \u2013 Array of x, y coordinate tuples c ( int ) \u2013 color f ( bool , default: False ) \u2013 Fill the polygon (default: False) Returns: Area \u2013 Bounding box of the polygon","title":"poly"},{"location":"reference/graphics/#graphics.FrameBuffer.polygon","text":"polygon ( * args , ** kwargs ) Draw a polygon on the canvas. Parameters: points ( list ) \u2013 List of points to draw. x ( int ) \u2013 X-coordinate of the polygon's position. y ( int ) \u2013 Y-coordinate of the polygon's position. color ( int ) \u2013 color. angle ( float ) \u2013 Rotation angle in radians (default: 0). center_x ( int ) \u2013 X-coordinate of the rotation center (default: 0). center_y ( int ) \u2013 Y-coordinate of the rotation center (default: 0). Raises: ValueError \u2013 If the polygon has less than 3 points. Returns: Area \u2013 The bounding box of the polygon.","title":"polygon"},{"location":"reference/graphics/#graphics.FrameBuffer.rect","text":"rect ( x , y , w , h , c , f = False ) Draw a rectangle at the given location, size and color. Parameters: x ( int ) \u2013 Top left corner x coordinate y ( int ) \u2013 Top left corner y coordinate w ( int ) \u2013 Width in pixels h ( int ) \u2013 Height in pixels c ( int ) \u2013 color f ( bool , default: False ) \u2013 Fill the rectangle (default: False) Returns: Area \u2013 Bounding box of the rectangle","title":"rect"},{"location":"reference/graphics/#graphics.FrameBuffer.round_rect","text":"round_rect ( * args , ** kwargs ) Rounded rectangle drawing function. Will draw a single pixel wide rounded rectangle starting at x0, y0 and extending w, h pixels with the specified radius. Parameters: x0 ( int ) \u2013 X-coordinate of the top-left corner of the rectangle. y0 ( int ) \u2013 Y-coordinate of the top-left corner of the rectangle. w ( int ) \u2013 Width of the rectangle. h ( int ) \u2013 Height of the rectangle. r ( int ) \u2013 Radius of the corners. c ( int ) \u2013 color. f ( bool ) \u2013 Fill the rectangle (default: False). Returns: Area \u2013 The bounding box of the rectangle.","title":"round_rect"},{"location":"reference/graphics/#graphics.FrameBuffer.save","text":"save ( filename = None ) Save the framebuffer to a file. The file extension must match the format, otherwise the extension will be appended to the filename. Saves 1-bit formats as PBM, 2-bit formats as PGM with max value 3, 4-bit formats as PGM with max value 15, 8-bit formats as PGM with max value 255, and 16-bit formats as BMP. Parameters: filename ( str , default: None ) \u2013 Filename to save to","title":"save"},{"location":"reference/graphics/#graphics.FrameBuffer.scroll","text":"scroll ( xstep , ystep ) Shift the contents of the FrameBuffer by the given vector (xstep, ystep). This may leave a footprint of the previous colors in the FrameBuffer. Parameters: xstep ( int ) \u2013 The number of pixels to shift the FrameBuffer in the x direction. ystep ( int ) \u2013 The number of pixels to shift the FrameBuffer in the y direction. Raises: ValueError \u2013 If the FrameBuffer format depth is not a multiple of 8","title":"scroll"},{"location":"reference/graphics/#graphics.FrameBuffer.text","text":"text ( s , x , y , c = 1 , scale = 1 , inverted = False , font_data = None , height = 8 , ) Draw text at the given location, using the given font and color. Parameters: s ( str ) \u2013 Text to draw x ( int ) \u2013 x coordinate y ( int ) \u2013 y coordinate c ( int , default: 1 ) \u2013 color scale ( int , default: 1 ) \u2013 Scale factor (default: 1) inverted ( bool , default: False ) \u2013 Invert the text (default: False) font_data ( str , default: None ) \u2013 Path to the font file (default: None) height ( int , default: 8 ) \u2013 Height of the font (default: 8) Returns: Area \u2013 Bounding box of the text","title":"text"},{"location":"reference/graphics/#graphics.FrameBuffer.text14","text":"text14 ( * args , ** kwargs ) Place text on the canvas with a 14 pixel high font. Breaks on to next line. Does not break on line going off canvas. Args: canvas (Canvas): The DisplayDriver, FrameBuffer, or other canvas-like object to draw on. s (str): The text to draw. x (int): The x position to start drawing the text. y (int): The y position to start drawing the text. c (int): The color to draw the text in. Default is 1. scale (int): The scale factor to draw the text at. Default is 1. inverted (bool): If True, draw the text inverted. Default is False. font_data (str): The path to the font file to use. Default is None. Returns: Area: The area that was drawn to.","title":"text14"},{"location":"reference/graphics/#graphics.FrameBuffer.text16","text":"text16 ( * args , ** kwargs ) Place text on the canvas with a 16 pixel high font. Breaks on to next line. Does not break on line going off canvas. Args: canvas (Canvas): The DisplayDriver, FrameBuffer, or other canvas-like object to draw on. s (str): The text to draw. x (int): The x position to start drawing the text. y (int): The y position to start drawing the text. c (int): The color to draw the text in. Default is 1. scale (int): The scale factor to draw the text at. Default is 1. inverted (bool): If True, draw the text inverted. Default is False. font_data (str): The path to the font file to use. Default is None. Returns: Area: The area that was drawn to.","title":"text16"},{"location":"reference/graphics/#graphics.FrameBuffer.text8","text":"text8 ( * args , ** kwargs ) Place text on the canvas with an 8 pixel high font. Breaks on to next line. Does not break on line going off canvas. Args: canvas (Canvas): The DisplayDriver, FrameBuffer, or other canvas-like object to draw on. s (str): The text to draw. x (int): The x position to start drawing the text. y (int): The y position to start drawing the text. c (int): The color to draw the text in. Default is 1. scale (int): The scale factor to draw the text at. Default is 1. inverted (bool): If True, draw the text inverted. Default is False. font_data (str): The path to the font file to use. Default is None. Returns: Area: The area that was drawn to.","title":"text8"},{"location":"reference/graphics/#graphics.FrameBuffer.triangle","text":"triangle ( * args , ** kwargs ) Triangle drawing function. Draws a single pixel wide triangle with vertices at (x0, y0), (x1, y1), and (x2, y2). Parameters: x0 ( int ) \u2013 X-coordinate of the first vertex. y0 ( int ) \u2013 Y-coordinate of the first vertex. x1 ( int ) \u2013 X-coordinate of the second vertex. y1 ( int ) \u2013 Y-coordinate of the second vertex. x2 ( int ) \u2013 X-coordinate of the third vertex. y2 ( int ) \u2013 Y-coordinate of the third vertex. c ( int ) \u2013 color. f ( bool ) \u2013 Fill the triangle (default: False). Returns: Area \u2013 The bounding box of the triangle.","title":"triangle"},{"location":"reference/graphics/#graphics.FrameBuffer.vline","text":"vline ( x , y , h , c ) Draw a vertical line at the given location, height and color. Parameters: x ( int ) \u2013 x coordinate y ( int ) \u2013 y coordinate h ( int ) \u2013 Height in pixels c ( int ) \u2013 color Returns: Area \u2013 Bounding box of the vertical line","title":"vline"},{"location":"reference/graphics/#graphics-functions","text":"","title":"Functions"},{"location":"reference/graphics/#graphics.arc","text":"arc ( canvas , x , y , r , a0 , a1 , c ) Arc drawing function. Will draw a single pixel wide arc with a radius r centered at x, y from a0 to a1. Parameters: x ( int ) \u2013 X-coordinate of the arc's center. y ( int ) \u2013 Y-coordinate of the arc's center. r ( int ) \u2013 Radius of the arc. a0 ( float ) \u2013 Starting angle in degrees. a1 ( float ) \u2013 Ending angle in degrees. c ( int ) \u2013 color. Returns: Area \u2013 The bounding box of the arc.","title":"arc"},{"location":"reference/graphics/#graphics.blit","text":"blit ( canvas , source , x , y , key =- 1 , palette = None ) Blit a source to the canvas at the specified x, y location. Parameters: source ( FrameBuffer ) \u2013 Source FrameBuffer object. x ( int ) \u2013 X-coordinate to blit to. y ( int ) \u2013 Y-coordinate to blit to. key ( int , default: -1 ) \u2013 Key value for transparency (default: -1). palette ( Palette , default: None ) \u2013 Palette object for color translation (default: None). Returns: Area \u2013 The bounding box of the blitted area.","title":"blit"},{"location":"reference/graphics/#graphics.blit_rect","text":"blit_rect ( canvas , buf , x , y , w , h ) Blit a rectangular area from a buffer to the canvas. Uses the canvas's blit_rect method if available, otherwise writes directly to the buffer. Parameters: buf ( memoryview ) \u2013 Buffer to blit. Must already be byte-swapped if necessary. x ( int ) \u2013 X-coordinate to blit to. y ( int ) \u2013 Y-coordinate to blit to. w ( int ) \u2013 Width of the area to blit. h ( int ) \u2013 Height of the area to blit. Returns: Area \u2013 The bounding box of the blitted area.","title":"blit_rect"},{"location":"reference/graphics/#graphics.blit_transparent","text":"blit_transparent ( canvas , buf , x , y , w , h , key ) Blit a buffer with transparency. Parameters: buf ( memoryview ) \u2013 Buffer to blit. x ( int ) \u2013 X-coordinate to blit to. y ( int ) \u2013 Y-coordinate to blit to. w ( int ) \u2013 Width of the area to blit. h ( int ) \u2013 Height of the area to blit. key ( int ) \u2013 Key value for transparency. Returns: Area \u2013 The bounding box of the blitted area.","title":"blit_transparent"},{"location":"reference/graphics/#graphics.bmp_to_framebuffer","text":"bmp_to_framebuffer ( filename ) Convert a BMP file to a RGB565 FrameBuffer. First ensures planes is 1, bits per pixel is 16, and compression is 0. Parameters: filename ( str ) \u2013 Filename of the","title":"bmp_to_framebuffer"},{"location":"reference/graphics/#graphics.circle","text":"circle ( canvas , x0 , y0 , r , c , f = False ) Circle drawing function. Will draw a single pixel wide circle centered at x0, y0 and the specified r. Parameters: x0 ( int ) \u2013 Center x coordinate y0 ( int ) \u2013 Center y coordinate r ( int ) \u2013 Radius c ( int ) \u2013 Color f ( bool , default: False ) \u2013 Fill the circle (default: False) Returns: Area \u2013 The bounding box of the circle.","title":"circle"},{"location":"reference/graphics/#graphics.ellipse","text":"ellipse ( canvas , x0 , y0 , r1 , r2 , c , f = False , m = 15 , w = None , h = None ) Midpoint ellipse algorithm Draw an ellipse at the given location. Radii r1 and r2 define the geometry; equal values cause a circle to be drawn. The c parameter defines the color. The optional f parameter can be set to True to fill the ellipse. Otherwise just a one pixel outline is drawn. The optional m parameter enables drawing to be restricted to certain quadrants of the ellipse. The LS four bits determine which quadrants are to be drawn, with bit 0 specifying Q1, b1 Q2, b2 Q3 and b3 Q4. Quadrants are numbered counterclockwise with Q1 being top right. Parameters: x0 ( int ) \u2013 Center x coordinate y0 ( int ) \u2013 Center y coordinate r1 ( int ) \u2013 x radius r2 ( int ) \u2013 y radius c ( int ) \u2013 color f ( bool , default: False ) \u2013 Fill the ellipse (default: False) m ( int , default: 15 ) \u2013 Bitmask to determine which quadrants to draw (default: 0b1111) w ( int , default: None ) \u2013 Width of the ellipse (default: None) h ( int , default: None ) \u2013 Height of the ellipse (default: None) Returns: Area \u2013 The bounding box of the ellipse.","title":"ellipse"},{"location":"reference/graphics/#graphics.fill","text":"fill ( canvas , c ) Fill the entire canvas with a color. Uses the canvas's fill method if available, otherwise calls the fill_rect function. Parameters: c ( int ) \u2013 color. Returns: Area \u2013 The bounding box of the filled area.","title":"fill"},{"location":"reference/graphics/#graphics.fill_rect","text":"fill_rect ( canvas , x , y , w , h , c ) Filled rectangle drawing function. Draws a filled rectangle starting at x, y and extending w, h pixels. Uses the canvas's fill_rect method if available, otherwise calls the pixel function for each pixel. Parameters: x ( int ) \u2013 X-coordinate of the top-left corner of the rectangle. y ( int ) \u2013 Y-coordinate of the top-left corner of the rectangle. w ( int ) \u2013 Width of the rectangle. h ( int ) \u2013 Height of the rectangle. c ( int ) \u2013 color Returns: Area \u2013 The bounding box of the filled area.","title":"fill_rect"},{"location":"reference/graphics/#graphics.gradient_rect","text":"gradient_rect ( canvas , x , y , w , h , c1 , c2 = None , vertical = True ) Fill a rectangle with a gradient. Parameters: x ( int ) \u2013 X-coordinate of the top-left corner of the rectangle. y ( int ) \u2013 Y-coordinate of the top-left corner of the rectangle. w ( int ) \u2013 Width of the rectangle. h ( int ) \u2013 Height of the rectangle. c1 ( int ) \u2013 565 encoded color for the top or left edge. c2 ( int , default: None ) \u2013 565 encoded color for the bottom or right edge. If None or the same as c1, fill_rect will be called instead. vertical ( bool , default: True ) \u2013 If True, the gradient will be vertical. If False, the gradient will be horizontal. Returns: Area \u2013 The bounding box of the filled area.","title":"gradient_rect"},{"location":"reference/graphics/#graphics.hline","text":"hline ( canvas , x0 , y0 , w , c ) Horizontal line drawing function. Will draw a single pixel wide line. Parameters: x0 ( int ) \u2013 X-coordinate of the start of the line. y0 ( int ) \u2013 Y-coordinate of the start of the line. w ( int ) \u2013 Width of the line. c ( int ) \u2013 color. Returns: Area \u2013 The bounding box of the line.","title":"hline"},{"location":"reference/graphics/#graphics.line","text":"line ( canvas , x0 , y0 , x1 , y1 , c ) Line drawing function. Will draw a single pixel wide line starting at x0, y0 and ending at x1, y1. Parameters: x0 ( int ) \u2013 X-coordinate of the start of the line. y0 ( int ) \u2013 Y-coordinate of the start of the line. x1 ( int ) \u2013 X-coordinate of the end of the line. y1 ( int ) \u2013 Y-coordinate of the end of the line. c ( int ) \u2013 color. Returns: Area \u2013 The bounding box of the line.","title":"line"},{"location":"reference/graphics/#graphics.pbm_to_framebuffer","text":"pbm_to_framebuffer ( filename ) Convert a PBM file to a MONO_HLSB FrameBuffer Parameters: filename ( str ) \u2013 Filename of the PBM file","title":"pbm_to_framebuffer"},{"location":"reference/graphics/#graphics.pgm_to_framebuffer","text":"pgm_to_framebuffer ( filename ) Convert a PGM file to a GS2_HMSB, GS4_HMSB or GS8 FrameBuffer Parameters: filename ( str ) \u2013 Filename of the PGM file","title":"pgm_to_framebuffer"},{"location":"reference/graphics/#graphics.pixel","text":"pixel ( canvas , x , y , c ) Draw a single pixel at the specified x, y location. Uses the canvas's pixel method if available, otherwise writes directly to the buffer. Parameters: x ( int ) \u2013 X-coordinate of the pixel. y ( int ) \u2013 Y-coordinate of the pixel. c ( int ) \u2013 color. Returns: Area \u2013 The bounding box of the pixel.","title":"pixel"},{"location":"reference/graphics/#graphics.poly","text":"poly ( canvas , x , y , coords , c , f = False ) Given a list of coordinates, draw an arbitrary (convex or concave) closed polygon at the given x, y location using the given color. The coords must be specified as an array of integers, e.g. array('h', [x0, y0, x1, y1, ... xn, yn]) or a list or tuple of points, e.g. [(x0, y0), (x1, y1), ... (xn, yn)]. The optional f parameter can be set to True to fill the polygon. Otherwise, just a one-pixel outline is drawn. Parameters: x ( int ) \u2013 X-coordinate of the polygon's position. y ( int ) \u2013 Y-coordinate of the polygon's position. coords ( list ) \u2013 List of coordinates. c ( int ) \u2013 color. f ( bool , default: False ) \u2013 Fill the polygon (default: False). Returns: Area \u2013 The bounding box of the polygon.","title":"poly"},{"location":"reference/graphics/#graphics.polygon","text":"polygon ( canvas , points , x , y , color , angle = 0 , center_x = 0 , center_y = 0 , ) Draw a polygon on the canvas. Parameters: points ( list ) \u2013 List of points to draw. x ( int ) \u2013 X-coordinate of the polygon's position. y ( int ) \u2013 Y-coordinate of the polygon's position. color ( int ) \u2013 color. angle ( float , default: 0 ) \u2013 Rotation angle in radians (default: 0). center_x ( int , default: 0 ) \u2013 X-coordinate of the rotation center (default: 0). center_y ( int , default: 0 ) \u2013 Y-coordinate of the rotation center (default: 0). Raises: ValueError \u2013 If the polygon has less than 3 points. Returns: Area \u2013 The bounding box of the polygon.","title":"polygon"},{"location":"reference/graphics/#graphics.rect","text":"rect ( canvas , x0 , y0 , w , h , c , f = False ) Rectangle drawing function. Will draw a single pixel wide rectangle starting at x0, y0 and extending w, h pixels. Parameters: x0 ( int ) \u2013 X-coordinate of the top-left corner of the rectangle. y0 ( int ) \u2013 Y-coordinate of the top-left corner of the rectangle. w ( int ) \u2013 Width of the rectangle. h ( int ) \u2013 Height of the rectangle. c ( int ) \u2013 color. f ( bool , default: False ) \u2013 Fill the rectangle (default: False). Returns: Area \u2013 The bounding box of the rectangle.","title":"rect"},{"location":"reference/graphics/#graphics.round_rect","text":"round_rect ( canvas , x0 , y0 , w , h , r , c , f = False ) Rounded rectangle drawing function. Will draw a single pixel wide rounded rectangle starting at x0, y0 and extending w, h pixels with the specified radius. Parameters: x0 ( int ) \u2013 X-coordinate of the top-left corner of the rectangle. y0 ( int ) \u2013 Y-coordinate of the top-left corner of the rectangle. w ( int ) \u2013 Width of the rectangle. h ( int ) \u2013 Height of the rectangle. r ( int ) \u2013 Radius of the corners. c ( int ) \u2013 color. f ( bool , default: False ) \u2013 Fill the rectangle (default: False). Returns: Area \u2013 The bounding box of the rectangle.","title":"round_rect"},{"location":"reference/graphics/#graphics.text","text":"text ( * args , height = 8 , ** kwargs ) Selector to call the correct text function based on the height of the font. See text8, text14, and text16 for more information. Parameters: height ( int , default: 8 ) \u2013 The height of the font to use. Default is 8.","title":"text"},{"location":"reference/graphics/#graphics.text14","text":"text14 ( canvas , s , x , y , c = 1 , scale = 1 , inverted = False , font_data = None , ) Place text on the canvas with a 14 pixel high font. Breaks on to next line. Does not break on line going off canvas. Args: canvas (Canvas): The DisplayDriver, FrameBuffer, or other canvas-like object to draw on. s (str): The text to draw. x (int): The x position to start drawing the text. y (int): The y position to start drawing the text. c (int): The color to draw the text in. Default is 1. scale (int): The scale factor to draw the text at. Default is 1. inverted (bool): If True, draw the text inverted. Default is False. font_data (str | byterray): The path to the font .bin file or memoryview. Default is None. Returns: Area: The area that was drawn to.","title":"text14"},{"location":"reference/graphics/#graphics.text16","text":"text16 ( canvas , s , x , y , c = 1 , scale = 1 , inverted = False , font_data = None , ) Place text on the canvas with a 16 pixel high font. Breaks on to next line. Does not break on line going off canvas. Args: canvas (Canvas): The DisplayDriver, FrameBuffer, or other canvas-like object to draw on. s (str): The text to draw. x (int): The x position to start drawing the text. y (int): The y position to start drawing the text. c (int): The color to draw the text in. Default is 1. scale (int): The scale factor to draw the text at. Default is 1. inverted (bool): If True, draw the text inverted. Default is False. font_data (str | byterray): The path to the font .bin file or memoryview. Default is None. Returns: Area: The area that was drawn to.","title":"text16"},{"location":"reference/graphics/#graphics.text8","text":"text8 ( canvas , s , x , y , c = 1 , scale = 1 , inverted = False , font_data = None , ) Place text on the canvas with an 8 pixel high font. Breaks on to next line. Does not break on line going off canvas. Args: canvas (Canvas): The DisplayDriver, FrameBuffer, or other canvas-like object to draw on. s (str): The text to draw. x (int): The x position to start drawing the text. y (int): The y position to start drawing the text. c (int): The color to draw the text in. Default is 1. scale (int): The scale factor to draw the text at. Default is 1. inverted (bool): If True, draw the text inverted. Default is False. font_data (str | byterray): The path to the font .bin file or memoryview. Default is None. Returns: Area: The area that was drawn to.","title":"text8"},{"location":"reference/graphics/#graphics.triangle","text":"triangle ( canvas , x0 , y0 , x1 , y1 , x2 , y2 , c , f = False ) Triangle drawing function. Draws a single pixel wide triangle with vertices at (x0, y0), (x1, y1), and (x2, y2). Parameters: x0 ( int ) \u2013 X-coordinate of the first vertex. y0 ( int ) \u2013 Y-coordinate of the first vertex. x1 ( int ) \u2013 X-coordinate of the second vertex. y1 ( int ) \u2013 Y-coordinate of the second vertex. x2 ( int ) \u2013 X-coordinate of the third vertex. y2 ( int ) \u2013 Y-coordinate of the third vertex. c ( int ) \u2013 color. f ( bool , default: False ) \u2013 Fill the triangle (default: False). Returns: Area \u2013 The bounding box of the triangle.","title":"triangle"},{"location":"reference/graphics/#graphics.vline","text":"vline ( canvas , x0 , y0 , h , c ) Horizontal line drawing function. Will draw a single pixel wide line. Parameters: x0 ( int ) \u2013 X-coordinate of the start of the line. y0 ( int ) \u2013 Y-coordinate of the start of the line. h ( int ) \u2013 Height of the line. c ( int ) \u2013 color. Returns: Area \u2013 The bounding box of the line.","title":"vline"},{"location":"reference/multimer/","text":"multimer \u00b6 Cross-platform Timer class for *Python. Enables using 'from multimer import Timer' on MicroPython on microcontrollers, on MicroPython on Unix (which doesn't have a machine.Timer) and CPython (ditto). _librt.py uses uses MicroPython ffi to connect to libc and librt, while _sdl2.py uses SDL2 on CPython to connect to libSDL2. No compatibility for CircuitPython yet. Returns None if the platform is not supported rather than raising an ImportError so that the client can handle the error more gracefully (e.g. by using if Timer is not None: ). Usage from multimer import Timer tim = Timer() tim.init(mode=Timer.PERIODIC, period=500, callback=lambda t: print(\".\")) .... tim.deinit() Classes \u00b6 Functions \u00b6 get_timer \u00b6 get_timer ( callback , period = 33 ) Creates and returns a timer to periodically call the callback function Parameters: callback ( function ) \u2013 The function to call periodically period ( int , default: 33 ) \u2013 The period in milliseconds, default is 33ms (30fps)","title":"multimer"},{"location":"reference/multimer/#multimer--multimer","text":"Cross-platform Timer class for *Python. Enables using 'from multimer import Timer' on MicroPython on microcontrollers, on MicroPython on Unix (which doesn't have a machine.Timer) and CPython (ditto). _librt.py uses uses MicroPython ffi to connect to libc and librt, while _sdl2.py uses SDL2 on CPython to connect to libSDL2. No compatibility for CircuitPython yet. Returns None if the platform is not supported rather than raising an ImportError so that the client can handle the error more gracefully (e.g. by using if Timer is not None: ). Usage from multimer import Timer tim = Timer() tim.init(mode=Timer.PERIODIC, period=500, callback=lambda t: print(\".\")) .... tim.deinit()","title":"multimer"},{"location":"reference/multimer/#multimer-classes","text":"","title":"Classes"},{"location":"reference/multimer/#multimer-functions","text":"","title":"Functions"},{"location":"reference/multimer/#multimer.get_timer","text":"get_timer ( callback , period = 33 ) Creates and returns a timer to periodically call the callback function Parameters: callback ( function ) \u2013 The function to call periodically period ( int , default: 33 ) \u2013 The period in milliseconds, default is 33ms (30fps)","title":"get_timer"},{"location":"reference/palettes/","text":"palettes \u00b6 Classes \u00b6 MappedPalette \u00b6 A class to represent a color palette with a color map. Functions \u00b6 color_rgb \u00b6 color_rgb ( color ) color can be an 16-bit integer or a tuple, list or bytearray of length 2 or 3. Palette \u00b6 A class to represent a color palette. Functions \u00b6 color_rgb \u00b6 color_rgb ( color ) color can be an 16-bit integer or a tuple, list or bytearray of length 2 or 3.","title":"palettes"},{"location":"reference/palettes/#palettes--palettes","text":"","title":"palettes"},{"location":"reference/palettes/#palettes-classes","text":"","title":"Classes"},{"location":"reference/palettes/#palettes.MappedPalette","text":"A class to represent a color palette with a color map.","title":"MappedPalette"},{"location":"reference/palettes/#palettes.MappedPalette-functions","text":"","title":"Functions"},{"location":"reference/palettes/#palettes.MappedPalette.color_rgb","text":"color_rgb ( color ) color can be an 16-bit integer or a tuple, list or bytearray of length 2 or 3.","title":"color_rgb"},{"location":"reference/palettes/#palettes.Palette","text":"A class to represent a color palette.","title":"Palette"},{"location":"reference/palettes/#palettes.Palette-functions","text":"","title":"Functions"},{"location":"reference/palettes/#palettes.Palette.color_rgb","text":"color_rgb ( color ) color can be an 16-bit integer or a tuple, list or bytearray of length 2 or 3.","title":"color_rgb"},{"location":"reference/palettes/cube/","text":"palettes.cube \u00b6 Makes a color cube palette. Usage from palettes import get_palette palette = get_palette(name=\"cube\", size=5, color_depth=16, swapped=False) OR \u00b6 palette = get_palette(name=\"cube\") OR \u00b6 from palettes.cube import CubePalette palette = CubePalette(size=5, color_depth=24) print(f\"Palette: {palette.name}, Length: {len(palette)}\") for i, color in enumerate(palette): for i, color in enumerate(palette): print(f\"{i}. {color:#06X} {palette.color_name(i)}\") Classes \u00b6 CubePalette \u00b6 A color cube palette. The size of the cube is determined by the size parameter. Functions \u00b6 color_rgb \u00b6 color_rgb ( color ) color can be an 16-bit integer or a tuple, list or bytearray of length 2 or 3.","title":"cube"},{"location":"reference/palettes/cube/#palettes.cube--palettescube","text":"Makes a color cube palette. Usage from palettes import get_palette palette = get_palette(name=\"cube\", size=5, color_depth=16, swapped=False)","title":"palettes.cube"},{"location":"reference/palettes/cube/#palettes.cube--or","text":"palette = get_palette(name=\"cube\")","title":"OR"},{"location":"reference/palettes/cube/#palettes.cube--or_1","text":"from palettes.cube import CubePalette palette = CubePalette(size=5, color_depth=24) print(f\"Palette: {palette.name}, Length: {len(palette)}\") for i, color in enumerate(palette): for i, color in enumerate(palette): print(f\"{i}. {color:#06X} {palette.color_name(i)}\")","title":"OR"},{"location":"reference/palettes/cube/#palettes.cube-classes","text":"","title":"Classes"},{"location":"reference/palettes/cube/#palettes.cube.CubePalette","text":"A color cube palette. The size of the cube is determined by the size parameter.","title":"CubePalette"},{"location":"reference/palettes/cube/#palettes.cube.CubePalette-functions","text":"","title":"Functions"},{"location":"reference/palettes/cube/#palettes.cube.CubePalette.color_rgb","text":"color_rgb ( color ) color can be an 16-bit integer or a tuple, list or bytearray of length 2 or 3.","title":"color_rgb"},{"location":"reference/palettes/material_design/","text":"palettes.material_design \u00b6 This module contains the Material Design color palette as a class object. Usage from palettes import get_palette palette = get_palette(name=\"material_design\", color_depth=16, swapped=False) OR \u00b6 palette = get_palette(\"material_design\") OR \u00b6 from palettes.material_design import MDPalette palette = MDPalette(size=5, color_depth=24) to access the primary variant of a color family by name: \u00b6 x = palette.RED x = palette.BLACK to access all 256 colors directly: \u00b6 x = palette[127] # color at index 127 to access a shade by name: \u00b6 x = palette.RED_S500 # shade 500 x = palette.RED_S900 # shade 900 x = palette.RED_S50 # shade 50 to access an accent of a color family by name: \u00b6 x = palette.RED_A100 x = palette.RED_A700 to iterate over all 256 colors: \u00b6 for x in palette: pass Classes \u00b6 MDPalette \u00b6 A class to represent the Material Design color palette. Functions \u00b6 color_rgb \u00b6 color_rgb ( color ) color can be an 16-bit integer or a tuple, list or bytearray of length 2 or 3.","title":"material_design"},{"location":"reference/palettes/material_design/#palettes.material_design--palettesmaterial_design","text":"This module contains the Material Design color palette as a class object. Usage from palettes import get_palette palette = get_palette(name=\"material_design\", color_depth=16, swapped=False)","title":"palettes.material_design"},{"location":"reference/palettes/material_design/#palettes.material_design--or","text":"palette = get_palette(\"material_design\")","title":"OR"},{"location":"reference/palettes/material_design/#palettes.material_design--or_1","text":"from palettes.material_design import MDPalette palette = MDPalette(size=5, color_depth=24)","title":"OR"},{"location":"reference/palettes/material_design/#palettes.material_design--to_access_the_primary_variant_of_a_color_family_by_name","text":"x = palette.RED x = palette.BLACK","title":"to access the primary variant of a color family by name:"},{"location":"reference/palettes/material_design/#palettes.material_design--to_access_all_256_colors_directly","text":"x = palette[127] # color at index 127","title":"to access all 256 colors directly:"},{"location":"reference/palettes/material_design/#palettes.material_design--to_access_a_shade_by_name","text":"x = palette.RED_S500 # shade 500 x = palette.RED_S900 # shade 900 x = palette.RED_S50 # shade 50","title":"to access a shade by name:"},{"location":"reference/palettes/material_design/#palettes.material_design--to_access_an_accent_of_a_color_family_by_name","text":"x = palette.RED_A100 x = palette.RED_A700","title":"to access an accent of a color family by name:"},{"location":"reference/palettes/material_design/#palettes.material_design--to_iterate_over_all_256_colors","text":"for x in palette: pass","title":"to iterate over all 256 colors:"},{"location":"reference/palettes/material_design/#palettes.material_design-classes","text":"","title":"Classes"},{"location":"reference/palettes/material_design/#palettes.material_design.MDPalette","text":"A class to represent the Material Design color palette.","title":"MDPalette"},{"location":"reference/palettes/material_design/#palettes.material_design.MDPalette-functions","text":"","title":"Functions"},{"location":"reference/palettes/material_design/#palettes.material_design.MDPalette.color_rgb","text":"color_rgb ( color ) color can be an 16-bit integer or a tuple, list or bytearray of length 2 or 3.","title":"color_rgb"},{"location":"reference/palettes/wheel/","text":"pypalette.wheel \u00b6 This module contains the cool wheel color palette as a class object. Usage from palettes import get_palette palette = get_palette(name=\"wheel\", color_depth=16, swapped=False, length=256) OR \u00b6 palette = get_palette(name=\"wheel\") OR \u00b6 from palettes.wheel import WheelPalette palette = WheelPalette(color_depth=16, swapped=False, length=256) print(f\"Palette: {palette.name}, Length: {len(palette)}\") for i, color in enumerate(palette): for i, color in enumerate(palette): print(f\"{i}. {color:#06X} {palette.color_name(i)}\") to access the named colors directly: \u00b6 x = palette.RED x = palette.BLACK Classes \u00b6 WheelPalette \u00b6 A class to represent a color wheel as a palette. Functions \u00b6 color_rgb \u00b6 color_rgb ( color ) color can be an 16-bit integer or a tuple, list or bytearray of length 2 or 3.","title":"wheel"},{"location":"reference/palettes/wheel/#palettes.wheel--pypalettewheel","text":"This module contains the cool wheel color palette as a class object. Usage from palettes import get_palette palette = get_palette(name=\"wheel\", color_depth=16, swapped=False, length=256)","title":"pypalette.wheel"},{"location":"reference/palettes/wheel/#palettes.wheel--or","text":"palette = get_palette(name=\"wheel\")","title":"OR"},{"location":"reference/palettes/wheel/#palettes.wheel--or_1","text":"from palettes.wheel import WheelPalette palette = WheelPalette(color_depth=16, swapped=False, length=256) print(f\"Palette: {palette.name}, Length: {len(palette)}\") for i, color in enumerate(palette): for i, color in enumerate(palette): print(f\"{i}. {color:#06X} {palette.color_name(i)}\")","title":"OR"},{"location":"reference/palettes/wheel/#palettes.wheel--to_access_the_named_colors_directly","text":"x = palette.RED x = palette.BLACK","title":"to access the named colors directly:"},{"location":"reference/palettes/wheel/#palettes.wheel-classes","text":"","title":"Classes"},{"location":"reference/palettes/wheel/#palettes.wheel.WheelPalette","text":"A class to represent a color wheel as a palette.","title":"WheelPalette"},{"location":"reference/palettes/wheel/#palettes.wheel.WheelPalette-functions","text":"","title":"Functions"},{"location":"reference/palettes/wheel/#palettes.wheel.WheelPalette.color_rgb","text":"color_rgb ( color ) color can be an 16-bit integer or a tuple, list or bytearray of length 2 or 3.","title":"color_rgb"}]}